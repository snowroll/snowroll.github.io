{
    "version": "https://jsonfeed.org/version/1",
    "title": "SnowRoll Blog • All posts by \"codeql\" tag",
    "description": "分享经验，记录生活",
    "home_page_url": "https://snowroll.github.io",
    "items": [
        {
            "id": "https://snowroll.github.io/codeql-query/",
            "url": "https://snowroll.github.io/codeql-query/",
            "title": "CodeQL 查询",
            "date_published": "2023-07-31T00:00:00.000Z",
            "content_html": "<p>codeql 查询 sink-source</p>\n<p>快照包含源文件和数据库，  ql 代码查询的是数据库中的数据，然后将符合要求的结果映射到对应的源代码中</p>\n<p>核心思想 —— 将代码作为数据处理</p>\n<p>QL 谓词 —— 微型查询，表征数据之间的关系。已有的谓词保存在 QL 库中 .qll，可以通过 <code>import tutorial</code>  方式导入 tutorial 库</p>\n<h1 id=\"谓词定义\"><a class=\"markdownIt-Anchor\" href=\"#谓词定义\">#</a> 谓词定义</h1>\n<p>谓词描述 —— 给定参数和元组集合的关系</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">predicate isCountry(string country)&#123;</span><br><span class=\"line\">  country &#x3D; &quot;Germany&quot;</span><br><span class=\"line\">  or</span><br><span class=\"line\">  country &#x3D; &quot;Belgium&quot;</span><br><span class=\"line\">  or</span><br><span class=\"line\">  country &#x3D; &quot;France&quot;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>谓词定义解析</p>\n<ul>\n<li>predicate 关键字，适用于没有返回结果的谓词  或者返回结果类型，例如 int</li>\n<li>isCountry 谓词名称，以小写字母开头</li>\n<li>string country  谓词参数，多个以逗号间隔</li>\n<li>{…}  谓词主体，逻辑表达式</li>\n</ul>\n<p><strong>带有返回结果的谓词</strong></p>\n<p>引入一个特殊变量 result</p>\n<figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">int getSucessor(int i)&#123;</span><br><span class=\"line\">  <span class=\"keyword\">result</span> <span class=\"operator\">=</span> i<span class=\"operator\">+</span><span class=\"number\">1</span> <span class=\"keyword\">and</span> i <span class=\"keyword\">in</span> [<span class=\"number\">1.</span><span class=\"number\">.9</span>]</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>每个参数都带一个返回值（或者一个也不带）</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">string getANeighbor(string country) &#123;</span><br><span class=\"line\">  country = <span class=\"string\">&quot;France&quot;</span> <span class=\"keyword\">and</span> result = <span class=\"string\">&quot;Belgium&quot;</span></span><br><span class=\"line\">  <span class=\"keyword\">or</span></span><br><span class=\"line\">  country = <span class=\"string\">&quot;France&quot;</span> <span class=\"keyword\">and</span> result = <span class=\"string\">&quot;Germany&quot;</span></span><br><span class=\"line\">  <span class=\"keyword\">or</span></span><br><span class=\"line\">  country = <span class=\"string\">&quot;Germany&quot;</span> <span class=\"keyword\">and</span> result = <span class=\"string\">&quot;Austria&quot;</span></span><br><span class=\"line\">  <span class=\"keyword\">or</span> </span><br><span class=\"line\">  country = <span class=\"string\">&quot;Germany&quot;</span> <span class=\"keyword\">and</span> result = <span class=\"string\">&quot;Belgium&quot;</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<ul>\n<li>getANeighbor (“Germany”) 返回结果 “Austria&quot;和&quot;Belgium”</li>\n<li>getANeighbor (“Belgium”) 无返回结果</li>\n</ul>\n<p><strong>递归谓词</strong></p>\n<p>谓词的返回结果直接或间接依赖于自身</p>\n<figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">string getANeighbor(string country) &#123;</span><br><span class=\"line\">  country <span class=\"operator\">=</span> &quot;France&quot; <span class=\"keyword\">and</span> <span class=\"keyword\">result</span> <span class=\"operator\">=</span> &quot;Belgium&quot;</span><br><span class=\"line\">  <span class=\"keyword\">or</span></span><br><span class=\"line\">  country <span class=\"operator\">=</span> &quot;France&quot; <span class=\"keyword\">and</span> <span class=\"keyword\">result</span> <span class=\"operator\">=</span> &quot;Germany&quot;</span><br><span class=\"line\">  <span class=\"keyword\">or</span></span><br><span class=\"line\">  country <span class=\"operator\">=</span> &quot;Germany&quot; <span class=\"keyword\">and</span> <span class=\"keyword\">result</span> <span class=\"operator\">=</span> &quot;Austria&quot;</span><br><span class=\"line\">  <span class=\"keyword\">or</span></span><br><span class=\"line\">  country <span class=\"operator\">=</span> &quot;Germany&quot; <span class=\"keyword\">and</span> <span class=\"keyword\">result</span> <span class=\"operator\">=</span> &quot;Belgium&quot;</span><br><span class=\"line\">  <span class=\"keyword\">or</span></span><br><span class=\"line\">  country <span class=\"operator\">=</span> getANeighbor(<span class=\"keyword\">result</span>)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<ul>\n<li>\n<p>getANeighbor (“Belgium”)  返回 “France&quot;和&quot;Germany”</p>\n<p>简单解析，当前 4 个逻辑表达式都不正确时，判断 country = getANeighbor (result)，给定的参数时 &quot;Belgium&quot;，所以这里逻辑表达式成立的条件是 country=“Belgium”=getANeighbor (result)。</p>\n<p>getANeighbor () 返回值是 &quot;Belgium&quot;, 其成立条件是传入的参数为 &quot;France&quot; 或者 &quot;Germany&quot;，这里用 result 来作为 getANeighbor () 的参数，所以最终的返回结果为 &quot;France&quot; 和 &quot;Germany&quot;</p>\n</li>\n</ul>\n<p>将线索转换为查询语句</p>\n<p>查询某个不秃头的人</p>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">from</span> Person t</span><br><span class=\"line\"><span class=\"keyword\">where</span> <span class=\"keyword\">exists</span>(string c <span class=\"operator\">|</span> t.getHairColor()<span class=\"operator\">=</span>c)</span><br><span class=\"line\"><span class=\"keyword\">select</span> t</span><br></pre></td></tr></table></figure>\n<ul>\n<li>exists 关键字，是否存在</li>\n<li>string c 临时变量</li>\n<li>t.getHairColor () = c 逻辑表达式</li>\n</ul>\n<h1 id=\"类定义\"><a class=\"markdownIt-Anchor\" href=\"#类定义\">#</a> 类定义</h1>\n<p>自定义类，来找出考察对象，即住在村南的居民</p>\n<figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">perdicate southern(Person p) &#123;</span><br><span class=\"line\">  p.getLocation() <span class=\"operator\">=</span> &quot;south&quot;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">class Southerner extends Person &#123;</span><br><span class=\"line\">  Southerner() &#123;southern(this)&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>QL 中类用来表示一个逻辑属性 —— 当一个值满足该属性时，它是类的成员。这意味一个值可以属于多个类，例如 3 既属于 &quot;整数&quot; 类，也属于 &quot;奇数&quot; 类</p>\n<p>上述类定义中， <code>southern(this)</code>  定义了该类的逻辑属性。表达式中使用了特殊变量 this，表示一个 Person 类型的值。如果一个 Person 满足 southern (this)，那他属于 Southerner 类，即住在村南的居民。</p>\n<p>当列举村南的居民，代码如下</p>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">from</span> Southerner s</span><br><span class=\"line\"><span class=\"keyword\">select</span> s</span><br></pre></td></tr></table></figure>\n<p>部分谓词以参数传递变量，例如 southern§，部分谓词跟着某些变量后面，例如 p.getAge ()。这是因为 getAge () 是定义在类 Person 中的一个成员谓词</p>\n<p>例如，王冠丢失后，村落实施了交通管制，孩子不允许离开居住地。即意味着谓词 isAllowedIn (string region) 不适用所有村名和所有区域，所以需要对孩子重载原来的谓词 isAllowedIn (string region)。</p>\n<p>重新定义一个类 Child，表示所有 10 岁以下的村民，重新定义谓词 isAllowdIn (string region)，表示孩子只能在自己的地盘走动，表达式为 region = this.getLocation ()</p>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">class Child extends Person &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">/* 特征谓词 */</span></span><br><span class=\"line\">  Child() &#123;this.getAge() &lt; 10&#125;</span><br><span class=\"line\">  </span><br><span class=\"line\">  <span class=\"comment\">/* 成员谓词 */</span></span><br><span class=\"line\">  override predicate isAllowedIn(string region) &#123;</span><br><span class=\"line\">    region <span class=\"operator\">=</span> this.getLocation()</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<p><strong>操作的传递闭包</strong></p>\n<p>同一个操作被应用多次，被称为操作的传递闭包。在处理传递闭包时，有两个特殊的符号极其有用，即 + 和 *</p>\n<ul>\n<li><code>parentOf+(p)</code> ，对变量 p 应用一次或多次谓词</li>\n<li><code>parentOf*(p)</code> ，对变量 p 应用零次或者多次谓词 parentOf ()</li>\n</ul>\n<h1 id=\"深入了解递归\"><a class=\"markdownIt-Anchor\" href=\"#深入了解递归\">#</a> 深入了解递归</h1>\n<p>QL 语言中，如果谓词直接或者间接地调用了自身，称其为递归型谓词</p>\n<p>为了求解递归谓词的返回值的集合，QL 编译器需要寻找递归的不动点，从空集开始，重复应用谓词，直到集合不发生变化，此时集合称为最小不动点。</p>\n<p>求 0-100 之间的整数递归型谓词</p>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">int getANumber() &#123;</span><br><span class=\"line\">  <span class=\"keyword\">result</span> <span class=\"operator\">=</span> <span class=\"number\">0</span></span><br><span class=\"line\">  <span class=\"keyword\">or</span> </span><br><span class=\"line\">  <span class=\"keyword\">result</span> <span class=\"operator\">&lt;=</span> <span class=\"number\">100</span> <span class=\"keyword\">and</span> <span class=\"keyword\">result</span> <span class=\"operator\">=</span> getANumber() <span class=\"operator\">+</span> <span class=\"number\">1</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">select</span> getANumber()</span><br></pre></td></tr></table></figure>\n<p>求解该谓词，会得到 0-100 的集合</p>\n<p><strong>相互递归</strong></p>\n<p>递归型谓词除了调用自身外，也可以互相调用，形成一个循环</p>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">int getAEven() &#123;</span><br><span class=\"line\">  <span class=\"keyword\">result</span> <span class=\"operator\">=</span> <span class=\"number\">0</span></span><br><span class=\"line\">  <span class=\"keyword\">or</span> </span><br><span class=\"line\">  <span class=\"keyword\">result</span> <span class=\"operator\">&lt;=</span> <span class=\"number\">100</span> <span class=\"keyword\">and</span> <span class=\"keyword\">result</span> <span class=\"operator\">=</span> getAnOdd() <span class=\"operator\">+</span> <span class=\"number\">1</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">int getAnOdd() &#123;</span><br><span class=\"line\">  <span class=\"keyword\">result</span> <span class=\"operator\">=</span> getAEven</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">select</span> getAnEven()</span><br></pre></td></tr></table></figure>\n<h1 id=\"python\"><a class=\"markdownIt-Anchor\" href=\"#python\">#</a> Python</h1>\n<p><strong>变量</strong></p>\n<p>Python 源代码中的变量可用 CodeQL 库中的 Variable 类来表示，该类有两个子类，LocalVariable 表示函数和类级别的变量，子类 GlobalVariable 用于表示模块级别的变量</p>\n<p><strong>控制流分析</strong></p>\n<p>每个作用域类（Class，Function，Module）都包含了一个由 ControlFlowNode 构成的图，每个作用域都有一个入口点和至少一个的出口点。为了提高分析控制流和数据流的速度，控制流节点会被分组为基本构造块。一个基本块就是一个没有任何分支的代码序列。</p>\n<p>AST 节点和控制流节点存在一对多的关系。</p>\n<p><strong>查找针对特定函数的调用</strong></p>\n<p>通过 Call 和 Name 两个类，查找对函数 eval 的调用</p>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">import python</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">from</span> <span class=\"keyword\">Call</span> <span class=\"keyword\">call</span>, Name name</span><br><span class=\"line\"><span class=\"keyword\">where</span> call.getFunc() <span class=\"operator\">=</span> name <span class=\"keyword\">and</span> name.getId() <span class=\"operator\">=</span> &quot;eval&quot;</span><br><span class=\"line\"><span class=\"keyword\">select</span> <span class=\"keyword\">call</span>, &quot;call to &#x27;eval&#x27;&quot;</span><br></pre></td></tr></table></figure>\n<h2 id=\"语句和表达式分析\"><a class=\"markdownIt-Anchor\" href=\"#语句和表达式分析\">#</a> 语句和表达式分析</h2>\n<p><strong>语句</strong></p>\n<p>对于 Python 中各种类型的语句，CodeQL 都提供了相应的类加以表示</p>\n<p>Stmt 类 —— 语句</p>\n<ul>\n<li>\n<p>Assert 类 —— assert 语句</p>\n</li>\n<li>\n<p>Assign 类</p>\n</li>\n<li>\n<p>AssignStmt 类 —— 赋值语句，如 x = y</p>\n</li>\n<li>\n<p>ClassDef —— 类定义语句</p>\n</li>\n<li>\n<p>FunctionDef —— 函数定义语句</p>\n</li>\n<li>\n<p>AugAssign —— 增量赋值 (augmented assignment) 语句，如 x += y</p>\n</li>\n<li>\n<p>Break 类 —— break 语句</p>\n</li>\n<li>\n<p>Continue 类 —— continue 语句</p>\n</li>\n<li>\n<p>Delete 类 —— del 语句</p>\n</li>\n<li>\n<p>ExceptStmt 类 —— try 语句的 except 部分</p>\n</li>\n<li>\n<p>Exec 类 —— exec 语句</p>\n</li>\n<li>\n<p>For 类 —— for 语句</p>\n</li>\n<li>\n<p>Global 类 —— global 语句</p>\n</li>\n<li>\n<p>If 类 —— if 语句</p>\n</li>\n<li>\n<p>ImportStar 类 —— from xxx import * 语句</p>\n</li>\n<li>\n<p>Import 类 —— 其他类型的 import 语句</p>\n</li>\n<li>\n<p>Nonlocal 类 —— nonlocal 语句</p>\n</li>\n<li>\n<p>Pass 类 —— pass 语句</p>\n</li>\n<li>\n<p>Print 类 —— print 语句 (仅限于 python 2 版本)</p>\n</li>\n<li>\n<p>Raise 类 —— raise 语句</p>\n</li>\n<li>\n<p>Return 类 —— return 语句</p>\n</li>\n<li>\n<p>Try 类 —— try 语句</p>\n</li>\n<li>\n<p>While 类 —— while 语句</p>\n</li>\n<li>\n<p>With 类 —— with 语句</p>\n</li>\n</ul>\n<p><strong>表达式</strong></p>\n<p>对于 Python 中各种类型的表达式，CodeQL 都提供了相应的类来加以表示。</p>\n<p>Expr 类 —— 表达式</p>\n<ul>\n<li>\n<p>Attribute —— 属性，例如 obj.attr</p>\n</li>\n<li>\n<p>BinaryExpr —— 二进制运算，例如 x+y</p>\n</li>\n<li>\n<p>BoolExpr —— Short circuit logical operations， 例如 x and y, x or y</p>\n</li>\n<li>\n<p>Bytes —— 字节，例如 b&quot;x&quot;</p>\n</li>\n<li>\n<p>Call —— 函数调用，例如 f (arg)</p>\n</li>\n<li>\n<p>Compare —— 比较运算，0&lt;x&lt;10</p>\n</li>\n<li A:=\"\" 2=\"\">\n<p>Dict —— 字典，例如</p>\n</li>\n<li k:=\"\" v=\"\" for=\"\" css-module=\".\">\n<p>DictComp 类 —— 字典推导式，如</p>\n</li>\n<li>\n<p>Ellipsis 类 —— 省略号表达式，如…</p>\n</li>\n<li>\n<p>GeneratorExp 类 —— 生成器表达式</p>\n</li>\n<li>\n<p>IfExp 类 —— 条件表达式，如 x if cond else y</p>\n</li>\n<li>\n<p>ImportExpr 类 —— 表示导入模块的表达式</p>\n</li>\n<li>\n<p>ImportMember 类 —— 表示从模块导入某些成员的表达式（from xxx import * 语句的一部分）</p>\n</li>\n<li>\n<p>Lambda 类 —— Lambda 表达式</p>\n</li>\n<li>\n<p>List 类 —— 列表，如 [‘a’, ‘b’]</p>\n</li>\n<li>\n<p>ListComp 类 —— 列表推导式，如 [x for …]</p>\n</li>\n<li>\n<p>Name 类 —— 对变量 var 的引用</p>\n</li>\n<li>\n<p>Num 类 —— 数字，如 3 或 4.2</p>\n</li>\n<li>\n<p>Floatliteral</p>\n</li>\n<li>\n<p>ImaginaryLiteral 类</p>\n</li>\n<li>\n<p>IntegerLiteral 类</p>\n</li>\n<li>\n<p>Repr 类 —— 反引号表达</p>\n</li>\n<li a,=\"\" b=\"\">\n<p>Set 类 —— 集合，如</p>\n</li>\n<li x=\"\" for=\"\" css-module=\".\">\n<p>SetComp 类 —— 集合推导式，如</p>\n</li>\n<li>\n<p>Slice 类 —— 切片；如表达式 seq [0:1] 中的 0:1</p>\n</li>\n<li>\n<p>Starred 类 —— 星号表达式，如 y, *x = 1,2,3（仅限于 Python 3）</p>\n</li>\n<li>\n<p>StrConst 类 —— 字符串。 在 Python2 中，可以是字节或 Unicode 字符。 在 Python3 中，只能是 Unicode 字符。</p>\n</li>\n<li>\n<p>Subscript 类 —— 下标运算，如 seq [index]</p>\n</li>\n<li>\n<p>UnaryExpr 类 —— 一元运算，如 - x</p>\n</li>\n<li>\n<p>Unicode 类 —— Unicode 字符，如 u&quot;x&quot; 或（Python 3 中的）“x”</p>\n</li>\n<li>\n<p>Yield 类 —— yield 表达式</p>\n</li>\n<li>\n<p>YieldFrom 类 —— yield from 表达式（Python 3.3+)</p>\n</li>\n</ul>\n<h2 id=\"控制流分析\"><a class=\"markdownIt-Anchor\" href=\"#控制流分析\">#</a> 控制流分析</h2>\n<p><strong>ControlFlowNode 类</strong></p>\n<p>抽象语法树节点和控制流节点存在一对多的关系，每个语法元素，即 AstNode 类，可以映射到零个、一个或多个 ControlFlowNode 类，每个 ControlFlowNode 类只映射到一个 AstNode</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">try</span>:</span><br><span class=\"line\">    might_raise()</span><br><span class=\"line\">    <span class=\"keyword\">if</span> cond:</span><br><span class=\"line\">        <span class=\"keyword\">break</span></span><br><span class=\"line\"><span class=\"keyword\">finally</span>:</span><br><span class=\"line\">    close_resource()</span><br></pre></td></tr></table></figure>\n<p>访问 close_resource () 的路径有三条，一正常执行，二引发 might_raise，三 break</p>\n<p>查找不可达语句，每条通过 AstNode 的路径都有一个 ControlFlowNode，所以所有不可达的 AstNode 都没有通过 ControlFlowNode 的路径，因此没有 ControlFlowNode 的 AstNode 是不可达的</p>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">import python</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">from</span> AstNode node</span><br><span class=\"line\"><span class=\"keyword\">where</span> <span class=\"keyword\">not</span> <span class=\"keyword\">exists</span>(node.getAFlowNode())</span><br><span class=\"line\"><span class=\"keyword\">select</span> node</span><br></pre></td></tr></table></figure>\n<p>执行上述代码可能会得到大量返回结果，因为 Module 类是 AstNode 的子类，所以查询结果中包含用 C 语言实现的模块以及不包含源代码的模块。所以，最好还是由查找不可达 AstNode 转换为查找不可达语句</p>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">import python</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">from</span> Stmt s</span><br><span class=\"line\"><span class=\"keyword\">where</span> <span class=\"keyword\">not</span> <span class=\"keyword\">exists</span>(s.getAFlowNode())</span><br><span class=\"line\"><span class=\"keyword\">select</span> s</span><br></pre></td></tr></table></figure>\n<h3 id=\"污点跟踪和数据流分析\"><a class=\"markdownIt-Anchor\" href=\"#污点跟踪和数据流分析\">#</a> 污点跟踪和数据流分析</h3>\n<p>污点跟踪库位于 TaintTracking 模块中，另外，用于污点跟踪和数据流分析的所有查询都有三个显式组件（其中一个是可选的），以及一个隐式组件。显式组件包括</p>\n<ol>\n<li>一个或多个可能存在不安全数据的源点，它们由 TaintTracking::Source 类表示。</li>\n<li>由 TaintTracking::Sink 类表示的一个或多个数据或污点可能流向的接收点。</li>\n<li>零个或多个清洗器，由 Sanitizer 类表示。</li>\n</ol>\n<p>在数据从源点流向接收点的过程中，如果没有遭到清洗器的拦截的话，用于污点跟踪或数据流分析的查询就会返回相应的分析结果。</p>\n<p>这三个组件是通过 TaintTracking::Configuration 绑定在一起的，以便明确特定查询与哪些源点和接收点相关。</p>\n<p>最后一个隐式组件是污点的 “kind”，由 TaintKind 类表示。污点的类型决定了，除了执行内置的、针对 “保留值” 的处理之外，还执行哪些针对 “非保留值” 的分析步骤。例如，对于上面讲过的 dir = path + “/”，当污点表示字符串的时候，则污点数据会从 path 流向 dir，但如果污点为 None 的话，则不会出现这种情况。</p>\n<p><strong>查询所有对于 eval 函数的调用</strong></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">import python</span><br><span class=\"line\"></span><br><span class=\"line\">from Call call, Name name</span><br><span class=\"line\">where call.getFunc() &#x3D; name and name.getId() &#x3D; &quot;eval&quot;</span><br><span class=\"line\">select call, &quot;call to &#39;eval&#39;&quot;</span><br></pre></td></tr></table></figure>\n<p>上面查询存在两个问题</p>\n<ol>\n<li>对于所有名为’eval’的调用都会被视为内置函数 eval 的调用，导致假阳性</li>\n<li>其假设 eval 不能被其他名称引用，导致假阴性</li>\n</ol>\n<p>改进 —— 通过谓词 Value::named 来准确识别 eval 函数</p>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">import python</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">from</span> Name name</span><br><span class=\"line\"><span class=\"keyword\">where</span> name <span class=\"operator\">=</span> <span class=\"keyword\">Value</span>::named(<span class=\"string\">&#x27;eval&#x27;</span>)</span><br><span class=\"line\"><span class=\"keyword\">select</span> name</span><br></pre></td></tr></table></figure>\n<p>准确识别 eval 函数后，通过 Value.getACall () 来识别对 eval 函数的调用</p>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">import python</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">from</span> ControlFlowNode <span class=\"keyword\">call</span>, <span class=\"keyword\">Value</span> val</span><br><span class=\"line\"><span class=\"keyword\">where</span> eval <span class=\"operator\">=</span> <span class=\"keyword\">Value</span>::named(<span class=\"string\">&#x27;eval&#x27;</span>) <span class=\"keyword\">and</span> </span><br><span class=\"line\">    <span class=\"keyword\">call</span> <span class=\"operator\">=</span> eval.getACall()</span><br><span class=\"line\"><span class=\"keyword\">select</span> <span class=\"keyword\">call</span>, &quot;call to &#x27;eval&#x27;&quot;</span><br></pre></td></tr></table></figure>\n<h1 id=\"使用vscode-配置codeql工作区\"><a class=\"markdownIt-Anchor\" href=\"#使用vscode-配置codeql工作区\">#</a> 使用 VSCode 配置 CodeQL 工作区</h1>\n<h2 id=\"使用starter工作区\"><a class=\"markdownIt-Anchor\" href=\"#使用starter工作区\">#</a> 使用 &quot;starter&quot; 工作区</h2>\n<p>&quot;starter&quot; 工作区实际上是一个 Git 存储库，包含如下内容</p>\n<ul>\n<li>用于存放分析 Python 代码的 CodeQL 库和查询的存储库</li>\n</ul>\n<h2 id=\"编写路径查询\"><a class=\"markdownIt-Anchor\" href=\"#编写路径查询\">#</a> 编写路径查询</h2>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">*...</span></span><br><span class=\"line\"><span class=\"comment\">*@kind path-problem</span></span><br><span class=\"line\"><span class=\"comment\">*...</span></span><br><span class=\"line\"><span class=\"comment\">*/</span></span><br><span class=\"line\"></span><br><span class=\"line\">import python</span><br><span class=\"line\">import semmle.python.security.Paths</span><br><span class=\"line\"></span><br><span class=\"line\">...</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">from</span> TaintedPathSource source, TaintedPathSink sink</span><br><span class=\"line\"><span class=\"keyword\">where</span> source.flowsTo(sink)</span><br><span class=\"line\"><span class=\"keyword\">select</span> sink.getNode(), source, sink, <span class=\"string\">&#x27;&#x27;</span></span><br></pre></td></tr></table></figure>\n<ul>\n<li>Paths 从标准 CodeQL 库中导入的路径图模块</li>\n<li>source，sink 为路径图中的节点</li>\n</ul>\n<p><strong>路径查询元数据</strong></p>\n<p>其必须包含属性 @kind path-problem，以确保查询结果可以正确解释和显示</p>\n<p><strong>生成路径解释</strong></p>\n<p>为了生成路径解释，我们的查询需要计算路径图。因此，我们需要定一个谓词 edges，用于计算与查询生成结果相关的谓词。从标准库导入预定义的 edges 谓词</p>\n<p>Python</p>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">import semmle.python.security.Paths</span><br></pre></td></tr></table></figure>\n<p>自定义谓词</p>\n<figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">query predicate edges(PathNode a, PathNode b)&#123;</span><br><span class=\"line\"><span class=\"comment\">/** Logical conditions which hold if `(a,b)` is an edge in the data flow graph */</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p><strong>定义流动条件</strong></p>\n<p>在编写路径查询时，通常包含一个谓词，该谓词仅在数据从源点流向接收点时成立</p>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">where</span> source.flowsTo(sink)</span><br></pre></td></tr></table></figure>\n<h1 id=\"codeql-cli\"><a class=\"markdownIt-Anchor\" href=\"#codeql-cli\">#</a> CodeQL CLI</h1>\n<h2 id=\"创建codeql数据库\"><a class=\"markdownIt-Anchor\" href=\"#创建codeql数据库\">#</a> 创建 CodeQL 数据库</h2>\n<p><strong>执行 codeql database create</strong></p>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">codeql database <span class=\"keyword\">create</span> [database<span class=\"operator\">-</span>path] <span class=\"comment\">--language python --source-root ./demo-root</span></span><br></pre></td></tr></table></figure>\n<p>其中，必须指定</p>\n<ul>\n<li>\n<p>–language: 为其创建数据库的语言的标识符。CodeQL 支持为以下语言创建数据库</p>\n<table>\n<thead>\n<tr>\n<th>语言</th>\n<th>标识符</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>C/C++</td>\n<td>cpp</td>\n</tr>\n<tr>\n<td>C#</td>\n<td>csharp</td>\n</tr>\n<tr>\n<td>Go</td>\n<td>go</td>\n</tr>\n<tr>\n<td>Java</td>\n<td>java</td>\n</tr>\n<tr>\n<td>JavaScript/TypeScript</td>\n<td>javascript</td>\n</tr>\n<tr>\n<td>Python</td>\n<td>python</td>\n</tr>\n</tbody>\n</table>\n</li>\n<li>\n<p>–source-root： 用于创建数据库的源文件的根目录。默认情况会将当前目录认为是源文件的根目录</p>\n</li>\n</ul>\n<h2 id=\"使用codeql-cli分析数据库\"><a class=\"markdownIt-Anchor\" href=\"#使用codeql-cli分析数据库\">#</a> 使用 CodeQL CLI 分析数据库</h2>\n<p>实际利用 CodeQL 分析代码的过程，就是在从代码中提取的数据库上运行查询的过程。</p>\n<p><strong>运行查询</strong></p>\n<ul>\n<li>\n<p>database analyze</p>\n</li>\n<li>\n<p>database run-queries  —— 该命令将以中间二进制格式（通常为 BQRS 格式）输出非解释型结果</p>\n</li>\n<li>\n<p>query run —— 该命令既可以输出 BQRS 格式的文件，也可以将结果直接输出至命令行</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">codeql query run ./query.ql --databse=./demo-query --output=./result.bqrs </span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n<p><strong>解码 bqrs</strong></p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">codeql bqrs decode [--output=&lt;file&gt;] [--result-set=&lt;name&gt;] [--sort-key=&lt;col&gt;[,&lt;col&gt;...]] &lt;options&gt;... -- &lt;file&gt;</span><br></pre></td></tr></table></figure>\n<p><strong>codeql database analyze</strong></p>\n<p>运行 database analyze 命令时，其完成下述工作</p>\n<ol>\n<li>运行一个或多个查询文件，在 CodeQL 数据库上运行相应的查询代码</li>\n<li>根据某些查询元数据来解释结果，以便在源代码中相应位置显示警示信息</li>\n</ol>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">codeql database analyze --format=csv --output=./path</span><br></pre></td></tr></table></figure>\n<ul>\n<li>–format —— 分析过程中生成的结果文件的格式</li>\n<li>–output —— 分析过程中生成的结果文件输出路径</li>\n</ul>\n<p><strong>使用自定义查询</strong></p>\n<ol>\n<li>\n<p>编写有效查询，并将其保存到扩展名为.ql 的文件中</p>\n</li>\n<li>\n<p>提供查询元数据</p>\n<p>查询元数据通常位于每个查询文件的顶部，其作用时向用户提供有关该查询的说明信息，并告诉 CodeQL 如何处理查询结果</p>\n<p>必须提供的两个属性</p>\n<ul>\n<li>查询标识符 （@id）： 由小写字母和数字组成的单词序列，用 “/” 或 &quot;-&quot; 作为分隔符，用于对查询进行标识和分类</li>\n<li>查询类型（@kind）：用以表示查询结果时警报（@kind problem）还是路径（@kind path-problem）</li>\n</ul>\n</li>\n</ol>\n<p><strong>创建自定义 QL 包</strong></p>\n<p>编写自定义的查询代码时，应将其保存在自定义的 QL 包目录中。QL 包提供了一种组织 CodeQL 分析过程中所用文件的方法。自定义 QL 包目录下必须提供一个名为 <code>qlback.yml</code>  文件。</p>\n<p><code>qlback.yml</code>  文件用于告诉 CodeQL 如下信息：如何编译相应的查询代码，这个包依赖哪些库，在哪里找到查询套件信息。<span class=\"exturl\" data-url=\"aHR0cHM6Ly9oZWxwLnNlbW1sZS5jb20vY29kZXFsL2NvZGVxbC1jbGkvcmVmZXJlbmNlL3FscGFjay1vdmVydmlldy5odG1sI3FscGFjay15bWw=\">https://help.semmle.com/codeql/codeql-cli/reference/qlpack-overview.html#qlpack-yml</span></p>\n<ul>\n<li>\n<p><strong>Q1:</strong> VSCode 中可以执行得到结果，命令行中执行 codeql query run 无法得到结果？</p>\n<p><strong>A:</strong> 在 VSCode 使用了工作区，所以执行查询时会自动在工作区目录下检索 ql 文件中导入的第三方库。而命令行执行时，ql 文件所在位置则无法检索到相应的第三方库。目前做法，把 ql 文件放在 VSCode-CodeQL-starter (工作区) 的 codeql-custom-queries-python/ 目录下</p>\n<p>后续改进可以打包相关第三方库，这个方式还需要学习</p>\n<p><span class=\"exturl\" data-url=\"aHR0cHM6Ly9kb2NzLmdpdGh1Yi5jb20vemgvY29kZS1zZWN1cml0eS9jb2RlcWwtY2xpL2NvZGVxbC1jbGktbWFudWFsL3BhY2stcGFja2xpc3Q=\">https://docs.github.com/zh/code-security/codeql-cli/codeql-cli-manual/pack-packlist</span></p>\n</li>\n</ul>\n<h2 id=\"更新codeql数据库\"><a class=\"markdownIt-Anchor\" href=\"#更新codeql数据库\">#</a> 更新 CodeQL 数据库</h2>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">codeql database upgrade</span><br></pre></td></tr></table></figure>\n",
            "tags": [
                "codeql"
            ]
        },
        {
            "id": "https://snowroll.github.io/codeql/",
            "url": "https://snowroll.github.io/codeql/",
            "title": "codeql",
            "date_published": "2022-10-10T23:15:03.000Z",
            "content_html": "<p>CodeQL 是一个代码语义分析引擎，可以用来发现代码中存在的漏洞。CodeQL 首先对项目进行静态分析，生成一系列中间文件，称为 database。用户可以编写 QL 查询语句，利用 CodeQL 引擎对这些数据库进行查询。</p>\n<h1 id=\"1-安装\"><a class=\"markdownIt-Anchor\" href=\"#1-安装\">#</a> 1. 安装</h1>\n<ul>\n<li>\n<p>Visual Studio Code</p>\n<p>因为 CodeQL 一般搭配 VS Code 使用，所以我们先下载 VS Code。官网地址： <span class=\"exturl\" data-url=\"aHR0cHM6Ly9jb2RlLnZpc3VhbHN0dWRpby5jb20vRG93bmxvYWQ=\">https://code.visualstudio.com/Download</span></p>\n</li>\n<li>\n<p>CodeQL</p>\n<ul>\n<li>\n<p>命令行工具下载</p>\n<p><span class=\"exturl\" data-url=\"aHR0cHM6Ly9naXRodWIuY29tL2dpdGh1Yi9jb2RlcWwtY2xpLWJpbmFyaWVzL3JlbGVhc2Vz\">https://github.com/github/codeql-cli-binaries/releases</span></p>\n<p><img data-src=\"codeql.assets/image-20221011072919774.png\" alt=\"image-20221011072919774\"></p>\n<p>选择自己的操作系统对应的版本，下载解压好之后再添加系统变量\t\t<img data-src=\"codeql.assets/image-20221011073232229.png\" alt=\"image-20221011073232229\" style=\"zoom:30%;\" /></p>\n<p>mac 添加环境变量的方法</p>\n<p>a.  <code>vi ~/.bash_profile</code></p>\n<p>b. 末尾添加一行  <code>export PATH=your-path/codeql-cli:$PATH</code></p>\n<p>c. 退出， <code>source ~/.bash_profile</code></p>\n</li>\n<li>\n<p>VS Code 插件下载</p>\n<p><img data-src=\"codeql.assets/image-20221011074329619.png\" alt=\"image-20221011074329619\"></p>\n</li>\n</ul>\n</li>\n</ul>\n<h1 id=\"2-生成database\"><a class=\"markdownIt-Anchor\" href=\"#2-生成database\">#</a> 2. 生成 database</h1>\n<h1 id=\"3-查询\"><a class=\"markdownIt-Anchor\" href=\"#3-查询\">#</a> 3. 查询</h1>\n",
            "tags": [
                "codeql"
            ]
        },
        {
            "id": "https://snowroll.github.io/CodeQL-synatx/",
            "url": "https://snowroll.github.io/CodeQL-synatx/",
            "title": "CodeQL 语法",
            "date_published": "2022-10-08T12:00:00.000Z",
            "content_html": "<h2 id=\"codeql\"><a class=\"markdownIt-Anchor\" href=\"#codeql\">#</a> CodeQL</h2>\n<p>官方文档   <span class=\"exturl\" data-url=\"aHR0cHM6Ly9jb2RlcWwuZ2l0aHViLmNvbS9kb2NzL3FsLWxhbmd1YWdlLXJlZmVyZW5jZS8=\">https://codeql.github.com/docs/ql-language-reference/</span></p>\n<h3 id=\"1-ql语言特性\"><a class=\"markdownIt-Anchor\" href=\"#1-ql语言特性\">#</a> 1. QL 语言特性</h3>\n<p>逻辑语言，继承自 Datalog。例如，针对一个包含父子关系数据库，查询一个人的所有后代总数。逻辑表达</p>\n<ol>\n<li>找到这个人的后代，孩子或者孩子的后代</li>\n<li>计算总数</li>\n</ol>\n<p>QL 查询语句如下</p>\n<figure class=\"highlight q\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Person getADescendant(Person p) &#123;</span><br><span class=\"line\">  result = p.getAChild() <span class=\"built_in\">or</span></span><br><span class=\"line\">  result = getADescendant(p.getAChild())</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"type\">int</span> getNumberOfDescendants(Person p) &#123;</span><br><span class=\"line\">  result = <span class=\"built_in\">count</span>(getADescendant(p))</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"2-predicates-谓词\"><a class=\"markdownIt-Anchor\" href=\"#2-predicates-谓词\">#</a> 2. Predicates 谓词</h3>\n<p>谓词用来描述逻辑关系，一个谓词测试一组元组。</p>\n<figure class=\"highlight q\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">predicate isCountry(<span class=\"built_in\">string</span> country) &#123;</span><br><span class=\"line\">  country = <span class=\"string\">&quot;Germany&quot;</span></span><br><span class=\"line\">  <span class=\"built_in\">or</span></span><br><span class=\"line\">  country = <span class=\"string\">&quot;Belgium&quot;</span></span><br><span class=\"line\">  <span class=\"built_in\">or</span></span><br><span class=\"line\">  country = <span class=\"string\">&quot;France&quot;</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">predicate hasCapital(<span class=\"built_in\">string</span> country, <span class=\"built_in\">string</span> capital) &#123;</span><br><span class=\"line\">  country = <span class=\"string\">&quot;Belgium&quot;</span> <span class=\"built_in\">and</span> capital = <span class=\"string\">&quot;Brussels&quot;</span></span><br><span class=\"line\">  <span class=\"built_in\">or</span></span><br><span class=\"line\">  country = <span class=\"string\">&quot;Germany&quot;</span> <span class=\"built_in\">and</span> capital = <span class=\"string\">&quot;Berlin&quot;</span></span><br><span class=\"line\">  <span class=\"built_in\">or</span></span><br><span class=\"line\">  country = <span class=\"string\">&quot;France&quot;</span> <span class=\"built_in\">and</span> capital = <span class=\"string\">&quot;Paris&quot;</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>谓词 <code>isCountry</code>  是一元元组 <code>&#123;(&quot;Belgium&quot;),(&quot;Germany&quot;),(&quot;France&quot;)&#125;</code></p>\n<h4 id=\"谓词定义规则\"><a class=\"markdownIt-Anchor\" href=\"#谓词定义规则\">#</a> 谓词定义规则：</h4>\n<ol>\n<li><code>predicate</code>  - 没有返回结果 / 返回值类型 - 有返回结果</li>\n<li>名字，以小写字母开头</li>\n<li>参数，类型 + 名字，如果有多个参数，以逗号分隔</li>\n<li>主体</li>\n</ol>\n<ul>\n<li>\n<p><strong>没有返回结果</strong></p>\n<figure class=\"highlight q\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">predicate isSmall(<span class=\"type\">int</span> i) &#123;</span><br><span class=\"line\">  i in [<span class=\"number\">1</span> .. <span class=\"number\">9</span>]</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n</li>\n<li>\n<p><strong>有返回结果</strong></p>\n<figure class=\"highlight q\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"type\">int</span> getSuccessor(<span class=\"type\">int</span> i) &#123;</span><br><span class=\"line\">  result = i + <span class=\"number\">1</span> <span class=\"built_in\">and</span></span><br><span class=\"line\">  i in [<span class=\"number\">1</span> .. <span class=\"number\">9</span>]</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n<h4 id=\"谓词类型\"><a class=\"markdownIt-Anchor\" href=\"#谓词类型\">#</a> 谓词类型</h4>\n<ol>\n<li>非成员谓词  class 之外定义</li>\n<li>特征谓词  class 内定义，且所有变量都被 <code>this</code>  限制</li>\n<li>成员谓词  class 内定义</li>\n</ol>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">int getSuccessor(int i) &#123;  &#x2F;&#x2F; 1. Non-member predicate</span><br><span class=\"line\">  result &#x3D; i + 1 and</span><br><span class=\"line\">  i in [1 .. 9]</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">class FavoriteNumbers extends int &#123;</span><br><span class=\"line\">  FavoriteNumbers() &#123;  &#x2F;&#x2F; 2. Characteristic predicate</span><br><span class=\"line\">    this &#x3D; 1 or</span><br><span class=\"line\">    this &#x3D; 4 or</span><br><span class=\"line\">    this &#x3D; 9</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  string getName() &#123;   &#x2F;&#x2F; 3. Member predicate for the class &#96;FavoriteNumbers&#96;</span><br><span class=\"line\">    this &#x3D; 1 and result &#x3D; &quot;one&quot;</span><br><span class=\"line\">    or</span><br><span class=\"line\">    this &#x3D; 4 and result &#x3D; &quot;four&quot;</span><br><span class=\"line\">    or</span><br><span class=\"line\">    this &#x3D; 9 and result &#x3D; &quot;nine&quot;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h4 id=\"谓词绑定\"><a class=\"markdownIt-Anchor\" href=\"#谓词绑定\">#</a> 谓词绑定</h4>\n<p>谓词必须能在有限时间内验证，所以其对应的集合不能是无限的，否则会报错</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#x2F;*</span><br><span class=\"line\">  Compilation errors:</span><br><span class=\"line\">  ERROR: &quot;i&quot; is not bound to a value.</span><br><span class=\"line\">  ERROR: &quot;result&quot; is not bound to a value.</span><br><span class=\"line\">  ERROR: expression &quot;i * 4&quot; is not bound to a value.</span><br><span class=\"line\">*&#x2F;</span><br><span class=\"line\">int multiplyBy4(int i) &#123;</span><br><span class=\"line\">  result &#x3D; i * 4</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p><strong>绑定集合</strong></p>\n<p>如果想创建 “无限谓词”，然后在有限集合上使用。必须添加注解 <code>bindingset</code></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">bindingset[i]</span><br><span class=\"line\">int multiplyBy4(int i) &#123;</span><br><span class=\"line\">  result &#x3D; i * 4</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">from int i  &#x2F;&#x2F; 数据集</span><br><span class=\"line\">where i in [1 .. 10]  &#x2F;&#x2F; 限制条件</span><br><span class=\"line\">select multiplyBy4(i)  &#x2F;&#x2F; 运算得到结果</span><br></pre></td></tr></table></figure>\n<h4 id=\"数据集谓词\"><a class=\"markdownIt-Anchor\" href=\"#数据集谓词\">#</a> 数据集谓词</h4>\n<p>每个数据集都包含着一个记录值关系的表格，“database predicates”。其被认为是另一种 QL 中的谓词</p>\n<h3 id=\"3-queries-查询\"><a class=\"markdownIt-Anchor\" href=\"#3-queries-查询\">#</a> 3. Queries 查询</h3>\n<p>Queries 是 QL 程序的输出，对结果进行评估</p>\n<p>两类 Queries</p>\n<ul>\n<li><code>select clause</code>  选择子句，在 module 中定义</li>\n<li><code>query predicates</code>  查询谓词，在 module 的谓词作用域，可以由模块自己定义，也可以从其他模块进行导入</li>\n</ul>\n<h4 id=\"select-clauses\"><a class=\"markdownIt-Anchor\" href=\"#select-clauses\">#</a> Select clauses</h4>\n<p>写一个查询模块（一般是 <code>.ql</code>  文件）时，可以包含一个选择子句，一般在文件末尾</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">from &#x2F;* ... variable declarations ... *&#x2F;</span><br><span class=\"line\">where &#x2F;* ... logical formula ... *&#x2F;</span><br><span class=\"line\">select &#x2F;* ... expressions ... *&#x2F;</span><br></pre></td></tr></table></figure>\n<p><code>from</code>  和 <code>where</code>  是可选项</p>\n<p><code>expressions</code>  的两个关键词</p>\n<ul>\n<li><code>as</code> ，紧跟一个名字，设置结果栏的标签</li>\n<li><code>order by</code> ，紧跟结果栏的名字，可以按顺序排列结果 两个顺序关键词， <code>asc</code>  /  <code>desc</code></li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">from int x, int y</span><br><span class=\"line\">where x &#x3D; 3 and y in [0 .. 2]</span><br><span class=\"line\">select x, y, x * y as product, &quot;product: &quot; + product</span><br></pre></td></tr></table></figure>\n<p>结果</p>\n<table>\n<thead>\n<tr>\n<th>x</th>\n<th>y</th>\n<th>product</th>\n<th>[3]</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>3</td>\n<td>0</td>\n<td>0</td>\n<td>0</td>\n</tr>\n<tr>\n<td>3</td>\n<td>1</td>\n<td>3</td>\n<td>3</td>\n</tr>\n<tr>\n<td>3</td>\n<td>2</td>\n<td>6</td>\n<td>6</td>\n</tr>\n</tbody>\n</table>\n<p>可以在选择子句的最后添加 <code>order by y desc</code> ，结果会按照 y 的降序排列</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">from int x, int y</span><br><span class=\"line\">where x &#x3D; 3 and y in [0 .. 2]</span><br><span class=\"line\">select x, y, x * y as product, &quot;product: &quot; + product order by y desc</span><br></pre></td></tr></table></figure>\n<p>结果</p>\n<table>\n<thead>\n<tr>\n<th>x</th>\n<th>y</th>\n<th>product</th>\n<th>[3]</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>3</td>\n<td>2</td>\n<td>6</td>\n<td>6</td>\n</tr>\n<tr>\n<td>3</td>\n<td>1</td>\n<td>3</td>\n<td>3</td>\n</tr>\n<tr>\n<td>3</td>\n<td>0</td>\n<td>0</td>\n<td>0</td>\n</tr>\n</tbody>\n</table>\n<h4 id=\"query-predicates\"><a class=\"markdownIt-Anchor\" href=\"#query-predicates\">#</a> Query predicates</h4>\n<p>查询谓词就是带有 <code>query</code>  注解的非成员谓词，会返回所有谓词评估通过的元组</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">query int getProduct(int x, int y) &#123;</span><br><span class=\"line\">  x &#x3D; 3 and</span><br><span class=\"line\">  y in [0 .. 2] and</span><br><span class=\"line\">  result &#x3D; x * y</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>结果</p>\n<table>\n<thead>\n<tr>\n<th>x</th>\n<th>y</th>\n<th>result</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>3</td>\n<td>0</td>\n<td>0</td>\n</tr>\n<tr>\n<td>3</td>\n<td>1</td>\n<td>3</td>\n</tr>\n<tr>\n<td>3</td>\n<td>2</td>\n<td>6</td>\n</tr>\n</tbody>\n</table>\n<p>查询谓词的好处是可以在代码的其他部分调用，而选择子句不行。例如，你可以在类中使用 <code>getProduct</code></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">class MultipleOfThree extends int &#123;</span><br><span class=\"line\">  MultipleOfThree() &#123; this &#x3D; getProduct(_, _) &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n",
            "tags": [
                "codeql"
            ]
        }
    ]
}