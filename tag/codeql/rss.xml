<?xml version="1.0"?>
<rss version="2.0">
    <channel>
        <title>SnowRoll Blog • Posts by &#34;codeql&#34; tag</title>
        <link>https://snowroll.github.io</link>
        <description>分享经验，记录生活</description>
        <language>zh-CN</language>
        <pubDate>Mon, 31 Jul 2023 00:00:00 +0000</pubDate>
        <lastBuildDate>Mon, 31 Jul 2023 00:00:00 +0000</lastBuildDate>
        <category>python</category>
        <category>codeql</category>
        <category>crypto</category>
        <category>Line By Line</category>
        <category>paper</category>
        <category>basketball</category>
        <category>read</category>
        <category>chatgpt</category>
        <category>crawler</category>
        <category>dockerß</category>
        <category>email</category>
        <category>github page</category>
        <category>gitlab</category>
        <category>linux</category>
        <category>heartbeat, java</category>
        <category>latex</category>
        <category>shell</category>
        <category>markdown</category>
        <category>mongodb</category>
        <category>photograph</category>
        <category>powershell</category>
        <category>reverse-shell</category>
        <category>mail</category>
        <category>except</category>
        <category>java</category>
        <category>travel</category>
        <item>
            <guid isPermalink="true">https://snowroll.github.io/codeql-query/</guid>
            <title>CodeQL 查询</title>
            <link>https://snowroll.github.io/codeql-query/</link>
            <category>codeql</category>
            <pubDate>Mon, 31 Jul 2023 00:00:00 +0000</pubDate>
            <description><![CDATA[ &lt;p&gt;codeql 查询 sink-source&lt;/p&gt;
&lt;p&gt;快照包含源文件和数据库，  ql 代码查询的是数据库中的数据，然后将符合要求的结果映射到对应的源代码中&lt;/p&gt;
&lt;p&gt;核心思想 —— 将代码作为数据处理&lt;/p&gt;
&lt;p&gt;QL 谓词 —— 微型查询，表征数据之间的关系。已有的谓词保存在 QL 库中 .qll，可以通过 &lt;code&gt;import tutorial&lt;/code&gt;  方式导入 tutorial 库&lt;/p&gt;
&lt;h1 id=&#34;谓词定义&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#谓词定义&#34;&gt;#&lt;/a&gt; 谓词定义&lt;/h1&gt;
&lt;p&gt;谓词描述 —— 给定参数和元组集合的关系&lt;/p&gt;
&lt;figure class=&#34;highlight plain&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;predicate isCountry(string country)&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  country &amp;#x3D; &amp;quot;Germany&amp;quot;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  or&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  country &amp;#x3D; &amp;quot;Belgium&amp;quot;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  or&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  country &amp;#x3D; &amp;quot;France&amp;quot;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;谓词定义解析&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;predicate 关键字，适用于没有返回结果的谓词  或者返回结果类型，例如 int&lt;/li&gt;
&lt;li&gt;isCountry 谓词名称，以小写字母开头&lt;/li&gt;
&lt;li&gt;string country  谓词参数，多个以逗号间隔&lt;/li&gt;
&lt;li&gt;{…}  谓词主体，逻辑表达式&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;带有返回结果的谓词&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;引入一个特殊变量 result&lt;/p&gt;
&lt;figure class=&#34;highlight&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;int getSucessor(int i)&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  &lt;span class=&#34;keyword&#34;&gt;result&lt;/span&gt; &lt;span class=&#34;operator&#34;&gt;=&lt;/span&gt; i&lt;span class=&#34;operator&#34;&gt;+&lt;/span&gt;&lt;span class=&#34;number&#34;&gt;1&lt;/span&gt; &lt;span class=&#34;keyword&#34;&gt;and&lt;/span&gt; i &lt;span class=&#34;keyword&#34;&gt;in&lt;/span&gt; [&lt;span class=&#34;number&#34;&gt;1.&lt;/span&gt;&lt;span class=&#34;number&#34;&gt;.9&lt;/span&gt;]&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;每个参数都带一个返回值（或者一个也不带）&lt;/p&gt;
&lt;figure class=&#34;highlight python&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;string getANeighbor(string country) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  country = &lt;span class=&#34;string&#34;&gt;&amp;quot;France&amp;quot;&lt;/span&gt; &lt;span class=&#34;keyword&#34;&gt;and&lt;/span&gt; result = &lt;span class=&#34;string&#34;&gt;&amp;quot;Belgium&amp;quot;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  &lt;span class=&#34;keyword&#34;&gt;or&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  country = &lt;span class=&#34;string&#34;&gt;&amp;quot;France&amp;quot;&lt;/span&gt; &lt;span class=&#34;keyword&#34;&gt;and&lt;/span&gt; result = &lt;span class=&#34;string&#34;&gt;&amp;quot;Germany&amp;quot;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  &lt;span class=&#34;keyword&#34;&gt;or&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  country = &lt;span class=&#34;string&#34;&gt;&amp;quot;Germany&amp;quot;&lt;/span&gt; &lt;span class=&#34;keyword&#34;&gt;and&lt;/span&gt; result = &lt;span class=&#34;string&#34;&gt;&amp;quot;Austria&amp;quot;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  &lt;span class=&#34;keyword&#34;&gt;or&lt;/span&gt; &lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  country = &lt;span class=&#34;string&#34;&gt;&amp;quot;Germany&amp;quot;&lt;/span&gt; &lt;span class=&#34;keyword&#34;&gt;and&lt;/span&gt; result = &lt;span class=&#34;string&#34;&gt;&amp;quot;Belgium&amp;quot;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;ul&gt;
&lt;li&gt;getANeighbor (“Germany”) 返回结果 “Austria&amp;quot;和&amp;quot;Belgium”&lt;/li&gt;
&lt;li&gt;getANeighbor (“Belgium”) 无返回结果&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;递归谓词&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;谓词的返回结果直接或间接依赖于自身&lt;/p&gt;
&lt;figure class=&#34;highlight&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;11&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;string getANeighbor(string country) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  country &lt;span class=&#34;operator&#34;&gt;=&lt;/span&gt; &amp;quot;France&amp;quot; &lt;span class=&#34;keyword&#34;&gt;and&lt;/span&gt; &lt;span class=&#34;keyword&#34;&gt;result&lt;/span&gt; &lt;span class=&#34;operator&#34;&gt;=&lt;/span&gt; &amp;quot;Belgium&amp;quot;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  &lt;span class=&#34;keyword&#34;&gt;or&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  country &lt;span class=&#34;operator&#34;&gt;=&lt;/span&gt; &amp;quot;France&amp;quot; &lt;span class=&#34;keyword&#34;&gt;and&lt;/span&gt; &lt;span class=&#34;keyword&#34;&gt;result&lt;/span&gt; &lt;span class=&#34;operator&#34;&gt;=&lt;/span&gt; &amp;quot;Germany&amp;quot;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  &lt;span class=&#34;keyword&#34;&gt;or&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  country &lt;span class=&#34;operator&#34;&gt;=&lt;/span&gt; &amp;quot;Germany&amp;quot; &lt;span class=&#34;keyword&#34;&gt;and&lt;/span&gt; &lt;span class=&#34;keyword&#34;&gt;result&lt;/span&gt; &lt;span class=&#34;operator&#34;&gt;=&lt;/span&gt; &amp;quot;Austria&amp;quot;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  &lt;span class=&#34;keyword&#34;&gt;or&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  country &lt;span class=&#34;operator&#34;&gt;=&lt;/span&gt; &amp;quot;Germany&amp;quot; &lt;span class=&#34;keyword&#34;&gt;and&lt;/span&gt; &lt;span class=&#34;keyword&#34;&gt;result&lt;/span&gt; &lt;span class=&#34;operator&#34;&gt;=&lt;/span&gt; &amp;quot;Belgium&amp;quot;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  &lt;span class=&#34;keyword&#34;&gt;or&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  country &lt;span class=&#34;operator&#34;&gt;=&lt;/span&gt; getANeighbor(&lt;span class=&#34;keyword&#34;&gt;result&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;getANeighbor (“Belgium”)  返回 “France&amp;quot;和&amp;quot;Germany”&lt;/p&gt;
&lt;p&gt;简单解析，当前 4 个逻辑表达式都不正确时，判断 country = getANeighbor (result)，给定的参数时 &amp;quot;Belgium&amp;quot;，所以这里逻辑表达式成立的条件是 country=“Belgium”=getANeighbor (result)。&lt;/p&gt;
&lt;p&gt;getANeighbor () 返回值是 &amp;quot;Belgium&amp;quot;, 其成立条件是传入的参数为 &amp;quot;France&amp;quot; 或者 &amp;quot;Germany&amp;quot;，这里用 result 来作为 getANeighbor () 的参数，所以最终的返回结果为 &amp;quot;France&amp;quot; 和 &amp;quot;Germany&amp;quot;&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;将线索转换为查询语句&lt;/p&gt;
&lt;p&gt;查询某个不秃头的人&lt;/p&gt;
&lt;figure class=&#34;highlight sql&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;from&lt;/span&gt; Person t&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;where&lt;/span&gt; &lt;span class=&#34;keyword&#34;&gt;exists&lt;/span&gt;(string c &lt;span class=&#34;operator&#34;&gt;|&lt;/span&gt; t.getHairColor()&lt;span class=&#34;operator&#34;&gt;=&lt;/span&gt;c)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;select&lt;/span&gt; t&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;ul&gt;
&lt;li&gt;exists 关键字，是否存在&lt;/li&gt;
&lt;li&gt;string c 临时变量&lt;/li&gt;
&lt;li&gt;t.getHairColor () = c 逻辑表达式&lt;/li&gt;
&lt;/ul&gt;
&lt;h1 id=&#34;类定义&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#类定义&#34;&gt;#&lt;/a&gt; 类定义&lt;/h1&gt;
&lt;p&gt;自定义类，来找出考察对象，即住在村南的居民&lt;/p&gt;
&lt;figure class=&#34;highlight&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;perdicate southern(Person p) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  p.getLocation() &lt;span class=&#34;operator&#34;&gt;=&lt;/span&gt; &amp;quot;south&amp;quot;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;class Southerner extends Person &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  Southerner() &amp;#123;southern(this)&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;QL 中类用来表示一个逻辑属性 —— 当一个值满足该属性时，它是类的成员。这意味一个值可以属于多个类，例如 3 既属于 &amp;quot;整数&amp;quot; 类，也属于 &amp;quot;奇数&amp;quot; 类&lt;/p&gt;
&lt;p&gt;上述类定义中， &lt;code&gt;southern(this)&lt;/code&gt;  定义了该类的逻辑属性。表达式中使用了特殊变量 this，表示一个 Person 类型的值。如果一个 Person 满足 southern (this)，那他属于 Southerner 类，即住在村南的居民。&lt;/p&gt;
&lt;p&gt;当列举村南的居民，代码如下&lt;/p&gt;
&lt;figure class=&#34;highlight sql&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;from&lt;/span&gt; Southerner s&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;select&lt;/span&gt; s&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;部分谓词以参数传递变量，例如 southern§，部分谓词跟着某些变量后面，例如 p.getAge ()。这是因为 getAge () 是定义在类 Person 中的一个成员谓词&lt;/p&gt;
&lt;p&gt;例如，王冠丢失后，村落实施了交通管制，孩子不允许离开居住地。即意味着谓词 isAllowedIn (string region) 不适用所有村名和所有区域，所以需要对孩子重载原来的谓词 isAllowedIn (string region)。&lt;/p&gt;
&lt;p&gt;重新定义一个类 Child，表示所有 10 岁以下的村民，重新定义谓词 isAllowdIn (string region)，表示孩子只能在自己的地盘走动，表达式为 region = this.getLocation ()&lt;/p&gt;
&lt;figure class=&#34;highlight sql&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;11&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;class Child extends Person &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  &lt;span class=&#34;comment&#34;&gt;/* 特征谓词 */&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  Child() &amp;#123;this.getAge() &amp;lt; 10&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  &lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  &lt;span class=&#34;comment&#34;&gt;/* 成员谓词 */&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  override predicate isAllowedIn(string region) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    region &lt;span class=&#34;operator&#34;&gt;=&lt;/span&gt; this.getLocation()&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;&lt;strong&gt;操作的传递闭包&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;同一个操作被应用多次，被称为操作的传递闭包。在处理传递闭包时，有两个特殊的符号极其有用，即 + 和 *&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;parentOf+(p)&lt;/code&gt; ，对变量 p 应用一次或多次谓词&lt;/li&gt;
&lt;li&gt;&lt;code&gt;parentOf*(p)&lt;/code&gt; ，对变量 p 应用零次或者多次谓词 parentOf ()&lt;/li&gt;
&lt;/ul&gt;
&lt;h1 id=&#34;深入了解递归&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#深入了解递归&#34;&gt;#&lt;/a&gt; 深入了解递归&lt;/h1&gt;
&lt;p&gt;QL 语言中，如果谓词直接或者间接地调用了自身，称其为递归型谓词&lt;/p&gt;
&lt;p&gt;为了求解递归谓词的返回值的集合，QL 编译器需要寻找递归的不动点，从空集开始，重复应用谓词，直到集合不发生变化，此时集合称为最小不动点。&lt;/p&gt;
&lt;p&gt;求 0-100 之间的整数递归型谓词&lt;/p&gt;
&lt;figure class=&#34;highlight sql&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;int getANumber() &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  &lt;span class=&#34;keyword&#34;&gt;result&lt;/span&gt; &lt;span class=&#34;operator&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;number&#34;&gt;0&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  &lt;span class=&#34;keyword&#34;&gt;or&lt;/span&gt; &lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  &lt;span class=&#34;keyword&#34;&gt;result&lt;/span&gt; &lt;span class=&#34;operator&#34;&gt;&amp;lt;=&lt;/span&gt; &lt;span class=&#34;number&#34;&gt;100&lt;/span&gt; &lt;span class=&#34;keyword&#34;&gt;and&lt;/span&gt; &lt;span class=&#34;keyword&#34;&gt;result&lt;/span&gt; &lt;span class=&#34;operator&#34;&gt;=&lt;/span&gt; getANumber() &lt;span class=&#34;operator&#34;&gt;+&lt;/span&gt; &lt;span class=&#34;number&#34;&gt;1&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;select&lt;/span&gt; getANumber()&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;求解该谓词，会得到 0-100 的集合&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;相互递归&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;递归型谓词除了调用自身外，也可以互相调用，形成一个循环&lt;/p&gt;
&lt;figure class=&#34;highlight sql&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;11&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;int getAEven() &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  &lt;span class=&#34;keyword&#34;&gt;result&lt;/span&gt; &lt;span class=&#34;operator&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;number&#34;&gt;0&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  &lt;span class=&#34;keyword&#34;&gt;or&lt;/span&gt; &lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  &lt;span class=&#34;keyword&#34;&gt;result&lt;/span&gt; &lt;span class=&#34;operator&#34;&gt;&amp;lt;=&lt;/span&gt; &lt;span class=&#34;number&#34;&gt;100&lt;/span&gt; &lt;span class=&#34;keyword&#34;&gt;and&lt;/span&gt; &lt;span class=&#34;keyword&#34;&gt;result&lt;/span&gt; &lt;span class=&#34;operator&#34;&gt;=&lt;/span&gt; getAnOdd() &lt;span class=&#34;operator&#34;&gt;+&lt;/span&gt; &lt;span class=&#34;number&#34;&gt;1&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;int getAnOdd() &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  &lt;span class=&#34;keyword&#34;&gt;result&lt;/span&gt; &lt;span class=&#34;operator&#34;&gt;=&lt;/span&gt; getAEven&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;select&lt;/span&gt; getAnEven()&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h1 id=&#34;python&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#python&#34;&gt;#&lt;/a&gt; Python&lt;/h1&gt;
&lt;p&gt;&lt;strong&gt;变量&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;Python 源代码中的变量可用 CodeQL 库中的 Variable 类来表示，该类有两个子类，LocalVariable 表示函数和类级别的变量，子类 GlobalVariable 用于表示模块级别的变量&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;控制流分析&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;每个作用域类（Class，Function，Module）都包含了一个由 ControlFlowNode 构成的图，每个作用域都有一个入口点和至少一个的出口点。为了提高分析控制流和数据流的速度，控制流节点会被分组为基本构造块。一个基本块就是一个没有任何分支的代码序列。&lt;/p&gt;
&lt;p&gt;AST 节点和控制流节点存在一对多的关系。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;查找针对特定函数的调用&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;通过 Call 和 Name 两个类，查找对函数 eval 的调用&lt;/p&gt;
&lt;figure class=&#34;highlight sql&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;import python&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;from&lt;/span&gt; &lt;span class=&#34;keyword&#34;&gt;Call&lt;/span&gt; &lt;span class=&#34;keyword&#34;&gt;call&lt;/span&gt;, Name name&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;where&lt;/span&gt; call.getFunc() &lt;span class=&#34;operator&#34;&gt;=&lt;/span&gt; name &lt;span class=&#34;keyword&#34;&gt;and&lt;/span&gt; name.getId() &lt;span class=&#34;operator&#34;&gt;=&lt;/span&gt; &amp;quot;eval&amp;quot;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;select&lt;/span&gt; &lt;span class=&#34;keyword&#34;&gt;call&lt;/span&gt;, &amp;quot;call to &amp;#x27;eval&amp;#x27;&amp;quot;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h2 id=&#34;语句和表达式分析&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#语句和表达式分析&#34;&gt;#&lt;/a&gt; 语句和表达式分析&lt;/h2&gt;
&lt;p&gt;&lt;strong&gt;语句&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;对于 Python 中各种类型的语句，CodeQL 都提供了相应的类加以表示&lt;/p&gt;
&lt;p&gt;Stmt 类 —— 语句&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Assert 类 —— assert 语句&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Assign 类&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;AssignStmt 类 —— 赋值语句，如 x = y&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;ClassDef —— 类定义语句&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;FunctionDef —— 函数定义语句&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;AugAssign —— 增量赋值 (augmented assignment) 语句，如 x += y&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Break 类 —— break 语句&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Continue 类 —— continue 语句&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Delete 类 —— del 语句&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;ExceptStmt 类 —— try 语句的 except 部分&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Exec 类 —— exec 语句&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;For 类 —— for 语句&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Global 类 —— global 语句&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;If 类 —— if 语句&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;ImportStar 类 —— from xxx import * 语句&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Import 类 —— 其他类型的 import 语句&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Nonlocal 类 —— nonlocal 语句&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Pass 类 —— pass 语句&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Print 类 —— print 语句 (仅限于 python 2 版本)&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Raise 类 —— raise 语句&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Return 类 —— return 语句&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Try 类 —— try 语句&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;While 类 —— while 语句&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;With 类 —— with 语句&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;表达式&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;对于 Python 中各种类型的表达式，CodeQL 都提供了相应的类来加以表示。&lt;/p&gt;
&lt;p&gt;Expr 类 —— 表达式&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Attribute —— 属性，例如 obj.attr&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;BinaryExpr —— 二进制运算，例如 x+y&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;BoolExpr —— Short circuit logical operations， 例如 x and y, x or y&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Bytes —— 字节，例如 b&amp;quot;x&amp;quot;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Call —— 函数调用，例如 f (arg)&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Compare —— 比较运算，0&amp;lt;x&amp;lt;10&lt;/p&gt;
&lt;/li&gt;
&lt;li A:=&#34;&#34; 2=&#34;&#34;&gt;
&lt;p&gt;Dict —— 字典，例如&lt;/p&gt;
&lt;/li&gt;
&lt;li k:=&#34;&#34; v=&#34;&#34; for=&#34;&#34; css-module=&#34;.&#34;&gt;
&lt;p&gt;DictComp 类 —— 字典推导式，如&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Ellipsis 类 —— 省略号表达式，如…&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;GeneratorExp 类 —— 生成器表达式&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;IfExp 类 —— 条件表达式，如 x if cond else y&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;ImportExpr 类 —— 表示导入模块的表达式&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;ImportMember 类 —— 表示从模块导入某些成员的表达式（from xxx import * 语句的一部分）&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Lambda 类 —— Lambda 表达式&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;List 类 —— 列表，如 [‘a’, ‘b’]&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;ListComp 类 —— 列表推导式，如 [x for …]&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Name 类 —— 对变量 var 的引用&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Num 类 —— 数字，如 3 或 4.2&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Floatliteral&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;ImaginaryLiteral 类&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;IntegerLiteral 类&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Repr 类 —— 反引号表达&lt;/p&gt;
&lt;/li&gt;
&lt;li a,=&#34;&#34; b=&#34;&#34;&gt;
&lt;p&gt;Set 类 —— 集合，如&lt;/p&gt;
&lt;/li&gt;
&lt;li x=&#34;&#34; for=&#34;&#34; css-module=&#34;.&#34;&gt;
&lt;p&gt;SetComp 类 —— 集合推导式，如&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Slice 类 —— 切片；如表达式 seq [0:1] 中的 0:1&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Starred 类 —— 星号表达式，如 y, *x = 1,2,3（仅限于 Python 3）&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;StrConst 类 —— 字符串。 在 Python2 中，可以是字节或 Unicode 字符。 在 Python3 中，只能是 Unicode 字符。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Subscript 类 —— 下标运算，如 seq [index]&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;UnaryExpr 类 —— 一元运算，如 - x&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Unicode 类 —— Unicode 字符，如 u&amp;quot;x&amp;quot; 或（Python 3 中的）“x”&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Yield 类 —— yield 表达式&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;YieldFrom 类 —— yield from 表达式（Python 3.3+)&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;控制流分析&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#控制流分析&#34;&gt;#&lt;/a&gt; 控制流分析&lt;/h2&gt;
&lt;p&gt;&lt;strong&gt;ControlFlowNode 类&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;抽象语法树节点和控制流节点存在一对多的关系，每个语法元素，即 AstNode 类，可以映射到零个、一个或多个 ControlFlowNode 类，每个 ControlFlowNode 类只映射到一个 AstNode&lt;/p&gt;
&lt;figure class=&#34;highlight python&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;try&lt;/span&gt;:&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    might_raise()&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;keyword&#34;&gt;if&lt;/span&gt; cond:&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;keyword&#34;&gt;break&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;finally&lt;/span&gt;:&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    close_resource()&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;访问 close_resource () 的路径有三条，一正常执行，二引发 might_raise，三 break&lt;/p&gt;
&lt;p&gt;查找不可达语句，每条通过 AstNode 的路径都有一个 ControlFlowNode，所以所有不可达的 AstNode 都没有通过 ControlFlowNode 的路径，因此没有 ControlFlowNode 的 AstNode 是不可达的&lt;/p&gt;
&lt;figure class=&#34;highlight sql&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;import python&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;from&lt;/span&gt; AstNode node&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;where&lt;/span&gt; &lt;span class=&#34;keyword&#34;&gt;not&lt;/span&gt; &lt;span class=&#34;keyword&#34;&gt;exists&lt;/span&gt;(node.getAFlowNode())&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;select&lt;/span&gt; node&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;执行上述代码可能会得到大量返回结果，因为 Module 类是 AstNode 的子类，所以查询结果中包含用 C 语言实现的模块以及不包含源代码的模块。所以，最好还是由查找不可达 AstNode 转换为查找不可达语句&lt;/p&gt;
&lt;figure class=&#34;highlight sql&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;import python&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;from&lt;/span&gt; Stmt s&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;where&lt;/span&gt; &lt;span class=&#34;keyword&#34;&gt;not&lt;/span&gt; &lt;span class=&#34;keyword&#34;&gt;exists&lt;/span&gt;(s.getAFlowNode())&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;select&lt;/span&gt; s&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h3 id=&#34;污点跟踪和数据流分析&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#污点跟踪和数据流分析&#34;&gt;#&lt;/a&gt; 污点跟踪和数据流分析&lt;/h3&gt;
&lt;p&gt;污点跟踪库位于 TaintTracking 模块中，另外，用于污点跟踪和数据流分析的所有查询都有三个显式组件（其中一个是可选的），以及一个隐式组件。显式组件包括&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;一个或多个可能存在不安全数据的源点，它们由 TaintTracking::Source 类表示。&lt;/li&gt;
&lt;li&gt;由 TaintTracking::Sink 类表示的一个或多个数据或污点可能流向的接收点。&lt;/li&gt;
&lt;li&gt;零个或多个清洗器，由 Sanitizer 类表示。&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;在数据从源点流向接收点的过程中，如果没有遭到清洗器的拦截的话，用于污点跟踪或数据流分析的查询就会返回相应的分析结果。&lt;/p&gt;
&lt;p&gt;这三个组件是通过 TaintTracking::Configuration 绑定在一起的，以便明确特定查询与哪些源点和接收点相关。&lt;/p&gt;
&lt;p&gt;最后一个隐式组件是污点的 “kind”，由 TaintKind 类表示。污点的类型决定了，除了执行内置的、针对 “保留值” 的处理之外，还执行哪些针对 “非保留值” 的分析步骤。例如，对于上面讲过的 dir = path + “/”，当污点表示字符串的时候，则污点数据会从 path 流向 dir，但如果污点为 None 的话，则不会出现这种情况。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;查询所有对于 eval 函数的调用&lt;/strong&gt;&lt;/p&gt;
&lt;figure class=&#34;highlight plain&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;import python&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;from Call call, Name name&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;where call.getFunc() &amp;#x3D; name and name.getId() &amp;#x3D; &amp;quot;eval&amp;quot;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;select call, &amp;quot;call to &amp;#39;eval&amp;#39;&amp;quot;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;上面查询存在两个问题&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;对于所有名为’eval’的调用都会被视为内置函数 eval 的调用，导致假阳性&lt;/li&gt;
&lt;li&gt;其假设 eval 不能被其他名称引用，导致假阴性&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;改进 —— 通过谓词 Value::named 来准确识别 eval 函数&lt;/p&gt;
&lt;figure class=&#34;highlight sql&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;import python&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;from&lt;/span&gt; Name name&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;where&lt;/span&gt; name &lt;span class=&#34;operator&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;keyword&#34;&gt;Value&lt;/span&gt;::named(&lt;span class=&#34;string&#34;&gt;&amp;#x27;eval&amp;#x27;&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;select&lt;/span&gt; name&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;准确识别 eval 函数后，通过 Value.getACall () 来识别对 eval 函数的调用&lt;/p&gt;
&lt;figure class=&#34;highlight sql&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;import python&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;from&lt;/span&gt; ControlFlowNode &lt;span class=&#34;keyword&#34;&gt;call&lt;/span&gt;, &lt;span class=&#34;keyword&#34;&gt;Value&lt;/span&gt; val&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;where&lt;/span&gt; eval &lt;span class=&#34;operator&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;keyword&#34;&gt;Value&lt;/span&gt;::named(&lt;span class=&#34;string&#34;&gt;&amp;#x27;eval&amp;#x27;&lt;/span&gt;) &lt;span class=&#34;keyword&#34;&gt;and&lt;/span&gt; &lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;keyword&#34;&gt;call&lt;/span&gt; &lt;span class=&#34;operator&#34;&gt;=&lt;/span&gt; eval.getACall()&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;select&lt;/span&gt; &lt;span class=&#34;keyword&#34;&gt;call&lt;/span&gt;, &amp;quot;call to &amp;#x27;eval&amp;#x27;&amp;quot;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h1 id=&#34;使用vscode-配置codeql工作区&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#使用vscode-配置codeql工作区&#34;&gt;#&lt;/a&gt; 使用 VSCode 配置 CodeQL 工作区&lt;/h1&gt;
&lt;h2 id=&#34;使用starter工作区&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#使用starter工作区&#34;&gt;#&lt;/a&gt; 使用 &amp;quot;starter&amp;quot; 工作区&lt;/h2&gt;
&lt;p&gt;&amp;quot;starter&amp;quot; 工作区实际上是一个 Git 存储库，包含如下内容&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;用于存放分析 Python 代码的 CodeQL 库和查询的存储库&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;编写路径查询&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#编写路径查询&#34;&gt;#&lt;/a&gt; 编写路径查询&lt;/h2&gt;
&lt;figure class=&#34;highlight sql&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;14&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;comment&#34;&gt;/**&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;comment&#34;&gt;*...&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;comment&#34;&gt;*@kind path-problem&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;comment&#34;&gt;*...&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;comment&#34;&gt;*/&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;import python&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;import semmle.python.security.Paths&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;...&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;from&lt;/span&gt; TaintedPathSource source, TaintedPathSink sink&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;where&lt;/span&gt; source.flowsTo(sink)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;select&lt;/span&gt; sink.getNode(), source, sink, &lt;span class=&#34;string&#34;&gt;&amp;#x27;&amp;#x27;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;ul&gt;
&lt;li&gt;Paths 从标准 CodeQL 库中导入的路径图模块&lt;/li&gt;
&lt;li&gt;source，sink 为路径图中的节点&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;路径查询元数据&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;其必须包含属性 @kind path-problem，以确保查询结果可以正确解释和显示&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;生成路径解释&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;为了生成路径解释，我们的查询需要计算路径图。因此，我们需要定一个谓词 edges，用于计算与查询生成结果相关的谓词。从标准库导入预定义的 edges 谓词&lt;/p&gt;
&lt;p&gt;Python&lt;/p&gt;
&lt;figure class=&#34;highlight sql&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;import semmle.python.security.Paths&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;自定义谓词&lt;/p&gt;
&lt;figure class=&#34;highlight&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;query predicate edges(PathNode a, PathNode b)&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;comment&#34;&gt;/** Logical conditions which hold if `(a,b)` is an edge in the data flow graph */&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;&lt;strong&gt;定义流动条件&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;在编写路径查询时，通常包含一个谓词，该谓词仅在数据从源点流向接收点时成立&lt;/p&gt;
&lt;figure class=&#34;highlight sql&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;where&lt;/span&gt; source.flowsTo(sink)&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h1 id=&#34;codeql-cli&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#codeql-cli&#34;&gt;#&lt;/a&gt; CodeQL CLI&lt;/h1&gt;
&lt;h2 id=&#34;创建codeql数据库&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#创建codeql数据库&#34;&gt;#&lt;/a&gt; 创建 CodeQL 数据库&lt;/h2&gt;
&lt;p&gt;&lt;strong&gt;执行 codeql database create&lt;/strong&gt;&lt;/p&gt;
&lt;figure class=&#34;highlight sql&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;codeql database &lt;span class=&#34;keyword&#34;&gt;create&lt;/span&gt; [database&lt;span class=&#34;operator&#34;&gt;-&lt;/span&gt;path] &lt;span class=&#34;comment&#34;&gt;--language python --source-root ./demo-root&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;其中，必须指定&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;–language: 为其创建数据库的语言的标识符。CodeQL 支持为以下语言创建数据库&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;语言&lt;/th&gt;
&lt;th&gt;标识符&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;C/C++&lt;/td&gt;
&lt;td&gt;cpp&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;C#&lt;/td&gt;
&lt;td&gt;csharp&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Go&lt;/td&gt;
&lt;td&gt;go&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Java&lt;/td&gt;
&lt;td&gt;java&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;JavaScript/TypeScript&lt;/td&gt;
&lt;td&gt;javascript&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Python&lt;/td&gt;
&lt;td&gt;python&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;–source-root： 用于创建数据库的源文件的根目录。默认情况会将当前目录认为是源文件的根目录&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;使用codeql-cli分析数据库&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#使用codeql-cli分析数据库&#34;&gt;#&lt;/a&gt; 使用 CodeQL CLI 分析数据库&lt;/h2&gt;
&lt;p&gt;实际利用 CodeQL 分析代码的过程，就是在从代码中提取的数据库上运行查询的过程。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;运行查询&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;database analyze&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;database run-queries  —— 该命令将以中间二进制格式（通常为 BQRS 格式）输出非解释型结果&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;query run —— 该命令既可以输出 BQRS 格式的文件，也可以将结果直接输出至命令行&lt;/p&gt;
&lt;figure class=&#34;highlight shell&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;codeql query run ./query.ql --databse=./demo-query --output=./result.bqrs &lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;解码 bqrs&lt;/strong&gt;&lt;/p&gt;
&lt;figure class=&#34;highlight shell&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;codeql bqrs decode [--output=&amp;lt;file&amp;gt;] [--result-set=&amp;lt;name&amp;gt;] [--sort-key=&amp;lt;col&amp;gt;[,&amp;lt;col&amp;gt;...]] &amp;lt;options&amp;gt;... -- &amp;lt;file&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;&lt;strong&gt;codeql database analyze&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;运行 database analyze 命令时，其完成下述工作&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;运行一个或多个查询文件，在 CodeQL 数据库上运行相应的查询代码&lt;/li&gt;
&lt;li&gt;根据某些查询元数据来解释结果，以便在源代码中相应位置显示警示信息&lt;/li&gt;
&lt;/ol&gt;
&lt;figure class=&#34;highlight shell&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;codeql database analyze --format=csv --output=./path&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;ul&gt;
&lt;li&gt;–format —— 分析过程中生成的结果文件的格式&lt;/li&gt;
&lt;li&gt;–output —— 分析过程中生成的结果文件输出路径&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;使用自定义查询&lt;/strong&gt;&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;编写有效查询，并将其保存到扩展名为.ql 的文件中&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;提供查询元数据&lt;/p&gt;
&lt;p&gt;查询元数据通常位于每个查询文件的顶部，其作用时向用户提供有关该查询的说明信息，并告诉 CodeQL 如何处理查询结果&lt;/p&gt;
&lt;p&gt;必须提供的两个属性&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;查询标识符 （@id）： 由小写字母和数字组成的单词序列，用 “/” 或 &amp;quot;-&amp;quot; 作为分隔符，用于对查询进行标识和分类&lt;/li&gt;
&lt;li&gt;查询类型（@kind）：用以表示查询结果时警报（@kind problem）还是路径（@kind path-problem）&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;&lt;strong&gt;创建自定义 QL 包&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;编写自定义的查询代码时，应将其保存在自定义的 QL 包目录中。QL 包提供了一种组织 CodeQL 分析过程中所用文件的方法。自定义 QL 包目录下必须提供一个名为 &lt;code&gt;qlback.yml&lt;/code&gt;  文件。&lt;/p&gt;
&lt;p&gt;&lt;code&gt;qlback.yml&lt;/code&gt;  文件用于告诉 CodeQL 如下信息：如何编译相应的查询代码，这个包依赖哪些库，在哪里找到查询套件信息。&lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly9oZWxwLnNlbW1sZS5jb20vY29kZXFsL2NvZGVxbC1jbGkvcmVmZXJlbmNlL3FscGFjay1vdmVydmlldy5odG1sI3FscGFjay15bWw=&#34;&gt;https://help.semmle.com/codeql/codeql-cli/reference/qlpack-overview.html#qlpack-yml&lt;/span&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Q1:&lt;/strong&gt; VSCode 中可以执行得到结果，命令行中执行 codeql query run 无法得到结果？&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;A:&lt;/strong&gt; 在 VSCode 使用了工作区，所以执行查询时会自动在工作区目录下检索 ql 文件中导入的第三方库。而命令行执行时，ql 文件所在位置则无法检索到相应的第三方库。目前做法，把 ql 文件放在 VSCode-CodeQL-starter (工作区) 的 codeql-custom-queries-python/ 目录下&lt;/p&gt;
&lt;p&gt;后续改进可以打包相关第三方库，这个方式还需要学习&lt;/p&gt;
&lt;p&gt;&lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly9kb2NzLmdpdGh1Yi5jb20vemgvY29kZS1zZWN1cml0eS9jb2RlcWwtY2xpL2NvZGVxbC1jbGktbWFudWFsL3BhY2stcGFja2xpc3Q=&#34;&gt;https://docs.github.com/zh/code-security/codeql-cli/codeql-cli-manual/pack-packlist&lt;/span&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;更新codeql数据库&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#更新codeql数据库&#34;&gt;#&lt;/a&gt; 更新 CodeQL 数据库&lt;/h2&gt;
&lt;figure class=&#34;highlight shell&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;codeql database upgrade&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
 ]]></description>
        </item>
        <item>
            <guid isPermalink="true">https://snowroll.github.io/codeql/</guid>
            <title>codeql</title>
            <link>https://snowroll.github.io/codeql/</link>
            <category>codeql</category>
            <pubDate>Mon, 10 Oct 2022 23:15:03 +0000</pubDate>
            <description><![CDATA[ &lt;p&gt;CodeQL 是一个代码语义分析引擎，可以用来发现代码中存在的漏洞。CodeQL 首先对项目进行静态分析，生成一系列中间文件，称为 database。用户可以编写 QL 查询语句，利用 CodeQL 引擎对这些数据库进行查询。&lt;/p&gt;
&lt;h1 id=&#34;1-安装&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#1-安装&#34;&gt;#&lt;/a&gt; 1. 安装&lt;/h1&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Visual Studio Code&lt;/p&gt;
&lt;p&gt;因为 CodeQL 一般搭配 VS Code 使用，所以我们先下载 VS Code。官网地址： &lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly9jb2RlLnZpc3VhbHN0dWRpby5jb20vRG93bmxvYWQ=&#34;&gt;https://code.visualstudio.com/Download&lt;/span&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;CodeQL&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;命令行工具下载&lt;/p&gt;
&lt;p&gt;&lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly9naXRodWIuY29tL2dpdGh1Yi9jb2RlcWwtY2xpLWJpbmFyaWVzL3JlbGVhc2Vz&#34;&gt;https://github.com/github/codeql-cli-binaries/releases&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;codeql.assets/image-20221011072919774.png&#34; alt=&#34;image-20221011072919774&#34;&gt;&lt;/p&gt;
&lt;p&gt;选择自己的操作系统对应的版本，下载解压好之后再添加系统变量		&lt;img data-src=&#34;codeql.assets/image-20221011073232229.png&#34; alt=&#34;image-20221011073232229&#34; style=&#34;zoom:30%;&#34; /&gt;&lt;/p&gt;
&lt;p&gt;mac 添加环境变量的方法&lt;/p&gt;
&lt;p&gt;a.  &lt;code&gt;vi ~/.bash_profile&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;b. 末尾添加一行  &lt;code&gt;export PATH=your-path/codeql-cli:$PATH&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;c. 退出， &lt;code&gt;source ~/.bash_profile&lt;/code&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;VS Code 插件下载&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;codeql.assets/image-20221011074329619.png&#34; alt=&#34;image-20221011074329619&#34;&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h1 id=&#34;2-生成database&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#2-生成database&#34;&gt;#&lt;/a&gt; 2. 生成 database&lt;/h1&gt;
&lt;h1 id=&#34;3-查询&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#3-查询&#34;&gt;#&lt;/a&gt; 3. 查询&lt;/h1&gt;
 ]]></description>
        </item>
        <item>
            <guid isPermalink="true">https://snowroll.github.io/CodeQL-synatx/</guid>
            <title>CodeQL 语法</title>
            <link>https://snowroll.github.io/CodeQL-synatx/</link>
            <category>codeql</category>
            <pubDate>Sat, 08 Oct 2022 12:00:00 +0000</pubDate>
            <description><![CDATA[ &lt;h2 id=&#34;codeql&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#codeql&#34;&gt;#&lt;/a&gt; CodeQL&lt;/h2&gt;
&lt;p&gt;官方文档   &lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly9jb2RlcWwuZ2l0aHViLmNvbS9kb2NzL3FsLWxhbmd1YWdlLXJlZmVyZW5jZS8=&#34;&gt;https://codeql.github.com/docs/ql-language-reference/&lt;/span&gt;&lt;/p&gt;
&lt;h3 id=&#34;1-ql语言特性&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#1-ql语言特性&#34;&gt;#&lt;/a&gt; 1. QL 语言特性&lt;/h3&gt;
&lt;p&gt;逻辑语言，继承自 Datalog。例如，针对一个包含父子关系数据库，查询一个人的所有后代总数。逻辑表达&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;找到这个人的后代，孩子或者孩子的后代&lt;/li&gt;
&lt;li&gt;计算总数&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;QL 查询语句如下&lt;/p&gt;
&lt;figure class=&#34;highlight q&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;Person getADescendant(Person p) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  result = p.getAChild() &lt;span class=&#34;built_in&#34;&gt;or&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  result = getADescendant(p.getAChild())&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;type&#34;&gt;int&lt;/span&gt; getNumberOfDescendants(Person p) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  result = &lt;span class=&#34;built_in&#34;&gt;count&lt;/span&gt;(getADescendant(p))&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h3 id=&#34;2-predicates-谓词&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#2-predicates-谓词&#34;&gt;#&lt;/a&gt; 2. Predicates 谓词&lt;/h3&gt;
&lt;p&gt;谓词用来描述逻辑关系，一个谓词测试一组元组。&lt;/p&gt;
&lt;figure class=&#34;highlight q&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;15&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;predicate isCountry(&lt;span class=&#34;built_in&#34;&gt;string&lt;/span&gt; country) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  country = &lt;span class=&#34;string&#34;&gt;&amp;quot;Germany&amp;quot;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  &lt;span class=&#34;built_in&#34;&gt;or&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  country = &lt;span class=&#34;string&#34;&gt;&amp;quot;Belgium&amp;quot;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  &lt;span class=&#34;built_in&#34;&gt;or&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  country = &lt;span class=&#34;string&#34;&gt;&amp;quot;France&amp;quot;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;predicate hasCapital(&lt;span class=&#34;built_in&#34;&gt;string&lt;/span&gt; country, &lt;span class=&#34;built_in&#34;&gt;string&lt;/span&gt; capital) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  country = &lt;span class=&#34;string&#34;&gt;&amp;quot;Belgium&amp;quot;&lt;/span&gt; &lt;span class=&#34;built_in&#34;&gt;and&lt;/span&gt; capital = &lt;span class=&#34;string&#34;&gt;&amp;quot;Brussels&amp;quot;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  &lt;span class=&#34;built_in&#34;&gt;or&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  country = &lt;span class=&#34;string&#34;&gt;&amp;quot;Germany&amp;quot;&lt;/span&gt; &lt;span class=&#34;built_in&#34;&gt;and&lt;/span&gt; capital = &lt;span class=&#34;string&#34;&gt;&amp;quot;Berlin&amp;quot;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  &lt;span class=&#34;built_in&#34;&gt;or&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  country = &lt;span class=&#34;string&#34;&gt;&amp;quot;France&amp;quot;&lt;/span&gt; &lt;span class=&#34;built_in&#34;&gt;and&lt;/span&gt; capital = &lt;span class=&#34;string&#34;&gt;&amp;quot;Paris&amp;quot;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;谓词 &lt;code&gt;isCountry&lt;/code&gt;  是一元元组 &lt;code&gt;&amp;#123;(&amp;quot;Belgium&amp;quot;),(&amp;quot;Germany&amp;quot;),(&amp;quot;France&amp;quot;)&amp;#125;&lt;/code&gt;&lt;/p&gt;
&lt;h4 id=&#34;谓词定义规则&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#谓词定义规则&#34;&gt;#&lt;/a&gt; 谓词定义规则：&lt;/h4&gt;
&lt;ol&gt;
&lt;li&gt;&lt;code&gt;predicate&lt;/code&gt;  - 没有返回结果 / 返回值类型 - 有返回结果&lt;/li&gt;
&lt;li&gt;名字，以小写字母开头&lt;/li&gt;
&lt;li&gt;参数，类型 + 名字，如果有多个参数，以逗号分隔&lt;/li&gt;
&lt;li&gt;主体&lt;/li&gt;
&lt;/ol&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;没有返回结果&lt;/strong&gt;&lt;/p&gt;
&lt;figure class=&#34;highlight q&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;predicate isSmall(&lt;span class=&#34;type&#34;&gt;int&lt;/span&gt; i) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  i in [&lt;span class=&#34;number&#34;&gt;1&lt;/span&gt; .. &lt;span class=&#34;number&#34;&gt;9&lt;/span&gt;]&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;有返回结果&lt;/strong&gt;&lt;/p&gt;
&lt;figure class=&#34;highlight q&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;type&#34;&gt;int&lt;/span&gt; getSuccessor(&lt;span class=&#34;type&#34;&gt;int&lt;/span&gt; i) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  result = i + &lt;span class=&#34;number&#34;&gt;1&lt;/span&gt; &lt;span class=&#34;built_in&#34;&gt;and&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  i in [&lt;span class=&#34;number&#34;&gt;1&lt;/span&gt; .. &lt;span class=&#34;number&#34;&gt;9&lt;/span&gt;]&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;谓词类型&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#谓词类型&#34;&gt;#&lt;/a&gt; 谓词类型&lt;/h4&gt;
&lt;ol&gt;
&lt;li&gt;非成员谓词  class 之外定义&lt;/li&gt;
&lt;li&gt;特征谓词  class 内定义，且所有变量都被 &lt;code&gt;this&lt;/code&gt;  限制&lt;/li&gt;
&lt;li&gt;成员谓词  class 内定义&lt;/li&gt;
&lt;/ol&gt;
&lt;figure class=&#34;highlight plain&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;20&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;int getSuccessor(int i) &amp;#123;  &amp;#x2F;&amp;#x2F; 1. Non-member predicate&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  result &amp;#x3D; i + 1 and&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  i in [1 .. 9]&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;class FavoriteNumbers extends int &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  FavoriteNumbers() &amp;#123;  &amp;#x2F;&amp;#x2F; 2. Characteristic predicate&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    this &amp;#x3D; 1 or&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    this &amp;#x3D; 4 or&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    this &amp;#x3D; 9&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  string getName() &amp;#123;   &amp;#x2F;&amp;#x2F; 3. Member predicate for the class &amp;#96;FavoriteNumbers&amp;#96;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    this &amp;#x3D; 1 and result &amp;#x3D; &amp;quot;one&amp;quot;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    or&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    this &amp;#x3D; 4 and result &amp;#x3D; &amp;quot;four&amp;quot;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    or&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    this &amp;#x3D; 9 and result &amp;#x3D; &amp;quot;nine&amp;quot;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h4 id=&#34;谓词绑定&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#谓词绑定&#34;&gt;#&lt;/a&gt; 谓词绑定&lt;/h4&gt;
&lt;p&gt;谓词必须能在有限时间内验证，所以其对应的集合不能是无限的，否则会报错&lt;/p&gt;
&lt;figure class=&#34;highlight plain&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&amp;#x2F;*&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  Compilation errors:&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  ERROR: &amp;quot;i&amp;quot; is not bound to a value.&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  ERROR: &amp;quot;result&amp;quot; is not bound to a value.&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  ERROR: expression &amp;quot;i * 4&amp;quot; is not bound to a value.&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;*&amp;#x2F;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;int multiplyBy4(int i) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  result &amp;#x3D; i * 4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;&lt;strong&gt;绑定集合&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;如果想创建 “无限谓词”，然后在有限集合上使用。必须添加注解 &lt;code&gt;bindingset&lt;/code&gt;&lt;/p&gt;
&lt;figure class=&#34;highlight plain&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;bindingset[i]&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;int multiplyBy4(int i) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  result &amp;#x3D; i * 4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;from int i  &amp;#x2F;&amp;#x2F; 数据集&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;where i in [1 .. 10]  &amp;#x2F;&amp;#x2F; 限制条件&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;select multiplyBy4(i)  &amp;#x2F;&amp;#x2F; 运算得到结果&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h4 id=&#34;数据集谓词&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#数据集谓词&#34;&gt;#&lt;/a&gt; 数据集谓词&lt;/h4&gt;
&lt;p&gt;每个数据集都包含着一个记录值关系的表格，“database predicates”。其被认为是另一种 QL 中的谓词&lt;/p&gt;
&lt;h3 id=&#34;3-queries-查询&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#3-queries-查询&#34;&gt;#&lt;/a&gt; 3. Queries 查询&lt;/h3&gt;
&lt;p&gt;Queries 是 QL 程序的输出，对结果进行评估&lt;/p&gt;
&lt;p&gt;两类 Queries&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;select clause&lt;/code&gt;  选择子句，在 module 中定义&lt;/li&gt;
&lt;li&gt;&lt;code&gt;query predicates&lt;/code&gt;  查询谓词，在 module 的谓词作用域，可以由模块自己定义，也可以从其他模块进行导入&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;select-clauses&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#select-clauses&#34;&gt;#&lt;/a&gt; Select clauses&lt;/h4&gt;
&lt;p&gt;写一个查询模块（一般是 &lt;code&gt;.ql&lt;/code&gt;  文件）时，可以包含一个选择子句，一般在文件末尾&lt;/p&gt;
&lt;figure class=&#34;highlight plain&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;from &amp;#x2F;* ... variable declarations ... *&amp;#x2F;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;where &amp;#x2F;* ... logical formula ... *&amp;#x2F;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;select &amp;#x2F;* ... expressions ... *&amp;#x2F;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;&lt;code&gt;from&lt;/code&gt;  和 &lt;code&gt;where&lt;/code&gt;  是可选项&lt;/p&gt;
&lt;p&gt;&lt;code&gt;expressions&lt;/code&gt;  的两个关键词&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;as&lt;/code&gt; ，紧跟一个名字，设置结果栏的标签&lt;/li&gt;
&lt;li&gt;&lt;code&gt;order by&lt;/code&gt; ，紧跟结果栏的名字，可以按顺序排列结果 两个顺序关键词， &lt;code&gt;asc&lt;/code&gt;  /  &lt;code&gt;desc&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;figure class=&#34;highlight plain&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;from int x, int y&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;where x &amp;#x3D; 3 and y in [0 .. 2]&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;select x, y, x * y as product, &amp;quot;product: &amp;quot; + product&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;结果&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;x&lt;/th&gt;
&lt;th&gt;y&lt;/th&gt;
&lt;th&gt;product&lt;/th&gt;
&lt;th&gt;[3]&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;3&lt;/td&gt;
&lt;td&gt;0&lt;/td&gt;
&lt;td&gt;0&lt;/td&gt;
&lt;td&gt;0&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;3&lt;/td&gt;
&lt;td&gt;1&lt;/td&gt;
&lt;td&gt;3&lt;/td&gt;
&lt;td&gt;3&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;3&lt;/td&gt;
&lt;td&gt;2&lt;/td&gt;
&lt;td&gt;6&lt;/td&gt;
&lt;td&gt;6&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;可以在选择子句的最后添加 &lt;code&gt;order by y desc&lt;/code&gt; ，结果会按照 y 的降序排列&lt;/p&gt;
&lt;figure class=&#34;highlight plain&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;from int x, int y&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;where x &amp;#x3D; 3 and y in [0 .. 2]&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;select x, y, x * y as product, &amp;quot;product: &amp;quot; + product order by y desc&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;结果&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;x&lt;/th&gt;
&lt;th&gt;y&lt;/th&gt;
&lt;th&gt;product&lt;/th&gt;
&lt;th&gt;[3]&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;3&lt;/td&gt;
&lt;td&gt;2&lt;/td&gt;
&lt;td&gt;6&lt;/td&gt;
&lt;td&gt;6&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;3&lt;/td&gt;
&lt;td&gt;1&lt;/td&gt;
&lt;td&gt;3&lt;/td&gt;
&lt;td&gt;3&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;3&lt;/td&gt;
&lt;td&gt;0&lt;/td&gt;
&lt;td&gt;0&lt;/td&gt;
&lt;td&gt;0&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h4 id=&#34;query-predicates&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#query-predicates&#34;&gt;#&lt;/a&gt; Query predicates&lt;/h4&gt;
&lt;p&gt;查询谓词就是带有 &lt;code&gt;query&lt;/code&gt;  注解的非成员谓词，会返回所有谓词评估通过的元组&lt;/p&gt;
&lt;figure class=&#34;highlight plain&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;query int getProduct(int x, int y) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  x &amp;#x3D; 3 and&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  y in [0 .. 2] and&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  result &amp;#x3D; x * y&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;结果&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;x&lt;/th&gt;
&lt;th&gt;y&lt;/th&gt;
&lt;th&gt;result&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;3&lt;/td&gt;
&lt;td&gt;0&lt;/td&gt;
&lt;td&gt;0&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;3&lt;/td&gt;
&lt;td&gt;1&lt;/td&gt;
&lt;td&gt;3&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;3&lt;/td&gt;
&lt;td&gt;2&lt;/td&gt;
&lt;td&gt;6&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;查询谓词的好处是可以在代码的其他部分调用，而选择子句不行。例如，你可以在类中使用 &lt;code&gt;getProduct&lt;/code&gt;&lt;/p&gt;
&lt;figure class=&#34;highlight plain&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;class MultipleOfThree extends int &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  MultipleOfThree() &amp;#123; this &amp;#x3D; getProduct(_, _) &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
 ]]></description>
        </item>
    </channel>
</rss>
