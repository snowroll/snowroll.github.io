{
    "version": "https://jsonfeed.org/version/1",
    "title": "SnowRoll Blog • All posts by \"python\" tag",
    "description": "分享经验，记录生活",
    "home_page_url": "https://snowroll.github.io",
    "items": [
        {
            "id": "https://snowroll.github.io/python_ast/",
            "url": "https://snowroll.github.io/python_ast/",
            "title": "Python代码AST解析",
            "date_published": "2023-08-31T15:16:53.000Z",
            "content_html": "<h1 id=\"ast解析\"><a class=\"markdownIt-Anchor\" href=\"#ast解析\">#</a> AST 解析</h1>\n<p>抽象语法树（AST）可以帮助我们更好地处理 python 的源码，是静态分析中常用的工具。下面让我们一起来看看如何利用 AST 来处理 python 源码。</p>\n<h2 id=\"获取源码ast\"><a class=\"markdownIt-Anchor\" href=\"#获取源码ast\">#</a> 获取源码 AST</h2>\n<p>首先，我们来处理一个简单的 python 语句 <code>print('hello!')</code></p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> ast</span><br><span class=\"line\"><span class=\"keyword\">from</span> astpretty <span class=\"keyword\">import</span> pprint</span><br><span class=\"line\"></span><br><span class=\"line\">source_code = <span class=\"string\">&quot;print(&#x27;hello!&#x27;)&quot;</span></span><br><span class=\"line\">abstract_tree = ast.parse(source_code)</span><br><span class=\"line\">pprint(abstract_tree)</span><br></pre></td></tr></table></figure>\n<p><code>print('hello!')</code>  的 AST 如下所示</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Module(</span><br><span class=\"line\">    body=[</span><br><span class=\"line\">        Expr(</span><br><span class=\"line\">            lineno=1,</span><br><span class=\"line\">            col_offset=0,</span><br><span class=\"line\">            value=Call(</span><br><span class=\"line\">                lineno=1,</span><br><span class=\"line\">                col_offset=0,</span><br><span class=\"line\">                func=Name(lineno=1, col_offset=0, id=<span class=\"string\">&#x27;print&#x27;</span>, ctx=Load()),</span><br><span class=\"line\">                args=[Str(lineno=1, col_offset=6, s=<span class=\"string\">&#x27;hello!&#x27;</span>)],</span><br><span class=\"line\">                keywords=[],</span><br><span class=\"line\">            ),</span><br><span class=\"line\">        ),</span><br><span class=\"line\">    ],</span><br><span class=\"line\">)</span><br></pre></td></tr></table></figure>\n<p>如上所示，就是一个简单的 python 代码的 AST 表示。</p>\n<p>更多关于 AST 语法相关的内容可以参考<span class=\"exturl\" data-url=\"aHR0cHM6Ly9kb2NzLnB5dGhvbi5vcmcvMy9saWJyYXJ5L2FzdC5odG1s\">【官方文档】</span>。</p>\n<h2 id=\"遍历ast节点\"><a class=\"markdownIt-Anchor\" href=\"#遍历ast节点\">#</a> 遍历 AST 节点</h2>\n<p>得到 AST 表示显然不是我们的最终目的，我们想要能够借助 AST 来获取更多信息。</p>\n<p>举个例子，我们想要获取 python 源码中所有函数定义的名称。下面我们就开始探索一下，如何利用 AST 来达成我们的目的。</p>\n<p><code>sample.py</code></p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">foo</span>():</span></span><br><span class=\"line\">    <span class=\"built_in\">print</span>(<span class=\"string\">&#x27;func foo&#x27;</span>)</span><br></pre></td></tr></table></figure>\n<p>利用上述方法我们可以得到 <code>sample.py</code>  的 AST 表示，如下。</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Module(</span><br><span class=\"line\">    body=[</span><br><span class=\"line\">        FunctionDef(</span><br><span class=\"line\">            lineno=1,</span><br><span class=\"line\">            col_offset=0,</span><br><span class=\"line\">            name=<span class=\"string\">&#x27;foo&#x27;</span>,</span><br><span class=\"line\">            args=arguments(args=[], vararg=None, kwonlyargs=[], kw_defaults=[], kwarg=None, defaults=[]),</span><br><span class=\"line\">            body=[</span><br><span class=\"line\">                Expr(</span><br><span class=\"line\">                    lineno=2,</span><br><span class=\"line\">                    col_offset=4,</span><br><span class=\"line\">                    value=Call(</span><br><span class=\"line\">                        lineno=2,</span><br><span class=\"line\">                        col_offset=4,</span><br><span class=\"line\">                        func=Name(lineno=2, col_offset=4, id=<span class=\"string\">&#x27;print&#x27;</span>, ctx=Load()),</span><br><span class=\"line\">                        args=[Str(lineno=2, col_offset=10, s=<span class=\"string\">&#x27;func foo&#x27;</span>)],</span><br><span class=\"line\">                        keywords=[],</span><br><span class=\"line\">                    ),</span><br><span class=\"line\">                ),</span><br><span class=\"line\">            ],</span><br><span class=\"line\">            decorator_list=[],</span><br><span class=\"line\">            returns=None,</span><br><span class=\"line\">        ),</span><br><span class=\"line\">    ],</span><br><span class=\"line\">)</span><br></pre></td></tr></table></figure>\n<p>观察可知，我们只需要拿到 <code>name='foo'</code>  这个信息就可以，那么我们怎么拿到这个值呢？</p>\n<p>AST 是一个个节点构成的树状结构，通过遍历 AST 上的每个节点，我们可以获得其相对应的属性信息。例如 <code>Module</code>  就是一个节点，其包含一个 <code>body</code>  的属性。</p>\n<p>先上代码 <code>visit_ast.py</code></p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> ast</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 读取源码并构建ast</span></span><br><span class=\"line\">content = <span class=\"built_in\">open</span>(<span class=\"string\">&quot;sample.py&quot;</span>).read()</span><br><span class=\"line\">script_ast = ast.parse(content)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 定义一个访问类</span></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">MyVisit</span>(<span class=\"params\">ast.NodeVisitor</span>):</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">visit_FunctionDef</span>(<span class=\"params\">self,node</span>):</span></span><br><span class=\"line\">        <span class=\"built_in\">print</span>(node.name)</span><br><span class=\"line\">        <span class=\"keyword\">return</span> node</span><br><span class=\"line\"></span><br><span class=\"line\">m = MyVisit()</span><br><span class=\"line\">m.visit(script_ast)</span><br></pre></td></tr></table></figure>\n<p>输出结果</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">foo</span><br></pre></td></tr></table></figure>\n<p>我们继承了 <code>ast.NodeVisitor</code>  类，重载了访问 <code>FunctionDef</code>  节点的方法，将该节点对应的 <code>node.name</code>  进行了输出。如果你想存储函数的名称，可以在__init__函数中定一个数组，来存储这些 function name。</p>\n<p>但上述代码存在着一个问题，当访问完 <code>FunctionDef</code>  节点后，我们选择了直接 return，这样会导致 <code>FunctionDef</code>  中的子节点无法被访问。如果存在函数嵌套定义，我们就无法拿到所有的函数名称。我们修改 <code>sample.py</code>  的内容，如下所示</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">foo</span>():</span></span><br><span class=\"line\">    <span class=\"built_in\">print</span>(<span class=\"string\">&#x27;hello!&#x27;</span>)</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">bar</span>():</span></span><br><span class=\"line\">        <span class=\"built_in\">print</span>(<span class=\"string\">&#x27;world!&#x27;</span>)</span><br></pre></td></tr></table></figure>\n<p>执行 <code>visit_ast.py</code> ，得到的输出结果</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">foo</span><br></pre></td></tr></table></figure>\n<p>为了解决这个问题，我们需要看一下 ast 中关于 NodeVisitor 类的定义</p>\n<h2 id=\"astnodevisitor\"><a class=\"markdownIt-Anchor\" href=\"#astnodevisitor\">#</a> ast.NodeVisitor</h2>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">NodeVisitor</span>(<span class=\"params\"><span class=\"built_in\">object</span></span>):</span></span><br><span class=\"line\">    <span class=\"string\">&quot;&quot;&quot;</span></span><br><span class=\"line\"><span class=\"string\">    A node visitor base class that walks the abstract syntax tree and calls a</span></span><br><span class=\"line\"><span class=\"string\">    visitor function for every node found. ...</span></span><br><span class=\"line\"><span class=\"string\">    &quot;&quot;&quot;</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">visit</span>(<span class=\"params\">self, node</span>):</span></span><br><span class=\"line\">        <span class=\"string\">&quot;&quot;&quot;Visit a node.&quot;&quot;&quot;</span></span><br><span class=\"line\">        method = <span class=\"string\">&#x27;visit_&#x27;</span> + node.__class__.__name__</span><br><span class=\"line\">        visitor = <span class=\"built_in\">getattr</span>(self, method, self.generic_visit)</span><br><span class=\"line\">        <span class=\"keyword\">return</span> visitor(node)</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">generic_visit</span>(<span class=\"params\">self, node</span>):</span></span><br><span class=\"line\">        <span class=\"string\">&quot;&quot;&quot;Called if no explicit visitor function exists for a node.&quot;&quot;&quot;</span></span><br><span class=\"line\">        <span class=\"keyword\">for</span> field, value <span class=\"keyword\">in</span> iter_fields(node):</span><br><span class=\"line\">            <span class=\"keyword\">if</span> <span class=\"built_in\">isinstance</span>(value, <span class=\"built_in\">list</span>):</span><br><span class=\"line\">                <span class=\"keyword\">for</span> item <span class=\"keyword\">in</span> value:</span><br><span class=\"line\">                    <span class=\"keyword\">if</span> <span class=\"built_in\">isinstance</span>(item, AST):</span><br><span class=\"line\">                        self.visit(item)</span><br><span class=\"line\">            <span class=\"keyword\">elif</span> <span class=\"built_in\">isinstance</span>(value, AST):</span><br><span class=\"line\">                self.visit(value)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 代码解读</span></span><br><span class=\"line\"><span class=\"built_in\">getattr</span>(<span class=\"built_in\">object</span>, name[, default])</span><br><span class=\"line\">返回一个对象的属性name，如果没有则返回默认值</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">getattr</span>(self, method, self.generic_visit)</span><br><span class=\"line\">通过继承 NodeVisitor，并定义method方法，就能实现多种类型节点的遍历</span><br></pre></td></tr></table></figure>\n<p>解析一下这个代码</p>\n<ul>\n<li>\n<p><code>visit(self, node)</code></p>\n<p>会先通过获取节点对应的类名，来获取对应的访问方法。最开始我们传递的 <code>script_ast</code>  就是一个 <code>Module</code> ，那么 <code>method</code>  即为 <code>visit_Module</code> 。</p>\n<p><code>visitor = getattr(self, method, self.generic_visit)</code>  这里涉及一个 Python 的函数 <code>getattr</code> ，其原始的函数定义为 <code>getattr(object, name[, default])</code> ，这个函数的作用是返回对象 object 的一个名为 name 的属性，如果不存在则返回默认值 default。</p>\n<p>在这个语境下的作用就是返回 <code>NodeVisitor.&#123;method&#125;</code>  这个属性，即返回 <code>NodeVisitor.visit_Module</code> 。如果这个属性没有定义，那么返回 <code>NodeVisitor.generic_visit</code> 。这样就可以理解为什么我们定义了一个 <code>visit_FunctionDef</code>  函数，就可以处理该节点的相关信息。</p>\n</li>\n<li>\n<p><code>generic_visit(self, node)</code></p>\n<p>这个是默认的节点遍历函数，从函数定义可知其会利用 <code>visit</code>  函数来遍历当前节点中所有键值对的值。</p>\n</li>\n</ul>\n<p>回顾我们的需求，我们想在访问 <code>FunctionDef</code>  节点后，还能够处理其子节点中的 <code>FunctionDef</code> ，结合这些代码，我们可以修正我们的遍历程序，如下所示</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> ast</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 读取源码并构建ast</span></span><br><span class=\"line\">content = <span class=\"built_in\">open</span>(<span class=\"string\">&quot;sample.py&quot;</span>).read()</span><br><span class=\"line\">script_ast = ast.parse(content)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 定义一个访问类</span></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">MyVisit</span>(<span class=\"params\">ast.NodeVisitor</span>):</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">visit_FunctionDef</span>(<span class=\"params\">self, node</span>):</span></span><br><span class=\"line\">        <span class=\"built_in\">print</span>(node.name)</span><br><span class=\"line\">        self.generic_visit(node)</span><br><span class=\"line\"></span><br><span class=\"line\">m = MyVisit()</span><br><span class=\"line\">m.visit(script_ast)</span><br></pre></td></tr></table></figure>\n<p>运行结果</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">foo</span><br><span class=\"line\">bar</span><br></pre></td></tr></table></figure>\n<p>我们在访问第一个 <code>FunctionDef</code>  节点之后，使用 <code>generic_visit</code>  访问其子节点，结合上面函数定义，我们就可以访问到嵌套定义的第二个函数 <code>bar</code> 。</p>\n<h1 id=\"ast修改\"><a class=\"markdownIt-Anchor\" href=\"#ast修改\">#</a> AST 修改</h1>\n<p>既然不同的源码对应不同的 AST，那么如果我们直接在 AST 层面修改，其对应的源码是否也会发生变化呢？答案是 yes，接下来我们就通过一个简单的例子学习一下如何修改 AST，以及如果通过 AST 生成 Python 源码。</p>\n<p><code>sample.py</code></p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">foo</span>():</span></span><br><span class=\"line\">    <span class=\"built_in\">print</span>(<span class=\"string\">&#x27;func foo&#x27;</span>)</span><br></pre></td></tr></table></figure>\n<p>AST 表示</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Module(</span><br><span class=\"line\">    body&#x3D;[</span><br><span class=\"line\">        FunctionDef(</span><br><span class=\"line\">            lineno&#x3D;1,</span><br><span class=\"line\">            col_offset&#x3D;0,</span><br><span class=\"line\">            name&#x3D;&#39;foo&#39;,</span><br><span class=\"line\">            args&#x3D;arguments(args&#x3D;[], vararg&#x3D;None, kwonlyargs&#x3D;[], kw_defaults&#x3D;[], kwarg&#x3D;None, defaults&#x3D;[]),</span><br><span class=\"line\">            body&#x3D;[</span><br><span class=\"line\">                Expr(</span><br><span class=\"line\">                    lineno&#x3D;2,</span><br><span class=\"line\">                    col_offset&#x3D;4,</span><br><span class=\"line\">                    value&#x3D;Call(</span><br><span class=\"line\">                        lineno&#x3D;2,</span><br><span class=\"line\">                        col_offset&#x3D;4,</span><br><span class=\"line\">                        func&#x3D;Name(lineno&#x3D;2, col_offset&#x3D;4, id&#x3D;&#39;print&#39;, ctx&#x3D;Load()),</span><br><span class=\"line\">                        args&#x3D;[Str(lineno&#x3D;2, col_offset&#x3D;10, s&#x3D;&#39;func foo&#39;)],</span><br><span class=\"line\">                        keywords&#x3D;[],</span><br><span class=\"line\">                    ),</span><br><span class=\"line\">                ),</span><br><span class=\"line\">            ],</span><br><span class=\"line\">            decorator_list&#x3D;[],</span><br><span class=\"line\">            returns&#x3D;None,</span><br><span class=\"line\">        ),</span><br><span class=\"line\">    ],</span><br><span class=\"line\">)</span><br></pre></td></tr></table></figure>\n<p>假设我们想把上面 <code>sample.py</code>  中输出的内容修改成 <code>hello world!</code> ， <code>ast</code>  这个库也提供了相应的方法供我们参考。</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> ast</span><br><span class=\"line\"><span class=\"keyword\">import</span> astunparse</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 读取源码并构建ast</span></span><br><span class=\"line\">content = <span class=\"built_in\">open</span>(<span class=\"string\">&quot;sample.py&quot;</span>).read()</span><br><span class=\"line\">script_ast = ast.parse(content)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 定义一个访问类</span></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">MyTransformer</span>(<span class=\"params\">ast.NodeTransformer</span>):</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">visit_Str</span>(<span class=\"params\">self, node</span>):</span></span><br><span class=\"line\">        node.s = <span class=\"string\">&#x27;hello world!&#x27;</span></span><br><span class=\"line\">        <span class=\"keyword\">return</span> node</span><br><span class=\"line\"></span><br><span class=\"line\">m = MyTransformer()</span><br><span class=\"line\">modified = m.visit(script_ast)</span><br><span class=\"line\"><span class=\"built_in\">print</span>(astunparse.Unparser(modified))</span><br></pre></td></tr></table></figure>\n<p>运行结果</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">foo</span>():</span></span><br><span class=\"line\">    <span class=\"built_in\">print</span>(<span class=\"string\">&#x27;hello world!&#x27;</span>)</span><br></pre></td></tr></table></figure>\n<p>同理，我们看一下 <code>ast</code>  中关于 <code>NodeTransformer</code>  的定义</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">NodeTransformer</span>(<span class=\"params\">NodeVisitor</span>):</span></span><br><span class=\"line\">    <span class=\"string\">&quot;&quot;&quot;</span></span><br><span class=\"line\"><span class=\"string\">    A :class:`NodeVisitor` subclass that walks the abstract syntax tree and</span></span><br><span class=\"line\"><span class=\"string\">    allows modification of nodes. ...</span></span><br><span class=\"line\"><span class=\"string\">    &quot;&quot;&quot;</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">generic_visit</span>(<span class=\"params\">self, node</span>):</span></span><br><span class=\"line\">        <span class=\"keyword\">for</span> field, old_value <span class=\"keyword\">in</span> iter_fields(node):</span><br><span class=\"line\">            <span class=\"keyword\">if</span> <span class=\"built_in\">isinstance</span>(old_value, <span class=\"built_in\">list</span>):</span><br><span class=\"line\">                new_values = []</span><br><span class=\"line\">                <span class=\"keyword\">for</span> value <span class=\"keyword\">in</span> old_value:</span><br><span class=\"line\">                    <span class=\"keyword\">if</span> <span class=\"built_in\">isinstance</span>(value, AST):</span><br><span class=\"line\">                        value = self.visit(value)</span><br><span class=\"line\">                        <span class=\"keyword\">if</span> value <span class=\"keyword\">is</span> <span class=\"literal\">None</span>:</span><br><span class=\"line\">                            <span class=\"keyword\">continue</span></span><br><span class=\"line\">                        <span class=\"keyword\">elif</span> <span class=\"keyword\">not</span> <span class=\"built_in\">isinstance</span>(value, AST):</span><br><span class=\"line\">                            new_values.extend(value)</span><br><span class=\"line\">                            <span class=\"keyword\">continue</span></span><br><span class=\"line\">                    new_values.append(value)</span><br><span class=\"line\">                old_value[:] = new_values</span><br><span class=\"line\">            <span class=\"keyword\">elif</span> <span class=\"built_in\">isinstance</span>(old_value, AST):</span><br><span class=\"line\">                new_node = self.visit(old_value)</span><br><span class=\"line\">                <span class=\"keyword\">if</span> new_node <span class=\"keyword\">is</span> <span class=\"literal\">None</span>:</span><br><span class=\"line\">                    <span class=\"built_in\">delattr</span>(node, field)</span><br><span class=\"line\">                <span class=\"keyword\">else</span>:</span><br><span class=\"line\">                    <span class=\"built_in\">setattr</span>(node, field, new_node)</span><br><span class=\"line\">        <span class=\"keyword\">return</span> node</span><br></pre></td></tr></table></figure>\n<p><code>NodeTransformer</code>  继承了 <code>NodeVisitor</code> ，所以定义遍历节点的方法是一样的。我们想修改 <code>Str</code>  节点，所以就重载了 <code>visit_Str</code>  这个函数，并对其进行修改。</p>\n<ul>\n<li>\n<p><code>generic_visit(self, node)</code></p>\n<p>我们直接观察第二个分支语句</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">elif</span> <span class=\"built_in\">isinstance</span>(old_value, AST):</span><br><span class=\"line\">    new_node = self.visit(old_value)</span><br><span class=\"line\">    <span class=\"keyword\">if</span> new_node <span class=\"keyword\">is</span> <span class=\"literal\">None</span>:</span><br><span class=\"line\">        <span class=\"built_in\">delattr</span>(node, field)</span><br><span class=\"line\">    <span class=\"keyword\">else</span>:</span><br><span class=\"line\">        <span class=\"built_in\">setattr</span>(node, field, new_node)</span><br></pre></td></tr></table></figure>\n<p>当遍历 <code>old_value</code>  时，会得到一个返回值 <code>new_node</code> ，然后如果返回值为 <code>None</code> ，则代表 <code>old_value</code>  被删除了，所以对当前遍历的节点 <code>node</code>  进行了删除属性操作 <code>delattr(node, field)</code> 。若不为 <code>None</code> ，则用新的值替换原有的 <code>old_value</code> ，即 <code>setattr(node, field, new_node)</code></p>\n<p>所以当我们遍历修改完 <code>node.s</code>  之后，我们需要将修改后的节点进行返回。</p>\n<p>当这个节点 <code>node</code>  的处理都结束后， <code>generic_visit</code>  会返回修改后的节点。也就完成了 AST 的重构</p>\n</li>\n</ul>\n<p>通过第三方库函数 <code>astunparse.Unparser</code> ，我们可以将修改后的 AST 还原为源码。</p>\n",
            "tags": [
                "python"
            ]
        },
        {
            "id": "https://snowroll.github.io/lambda/",
            "url": "https://snowroll.github.io/lambda/",
            "title": "lambda",
            "date_published": "2022-06-28T14:10:27.000Z",
            "content_html": "<h3 id=\"内容摘要\"><a class=\"markdownIt-Anchor\" href=\"#内容摘要\">#</a> 内容摘要</h3>\n<ul>\n<li>lambda 函数</li>\n<li>lambda 函数用法</li>\n</ul>\n<a id=\"more\"></a>\n<ul>\n<li>\n<p>lambda 函数</p>\n<p>最开始接触 lambda 函数时，觉得它好神奇，简单一行代码可以完成平时多行代码才能实现的函数功能。</p>\n<p>例如:</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">func = <span class=\"keyword\">lambda</span> x,y: x+y</span><br><span class=\"line\">func(<span class=\"number\">1</span>,<span class=\"number\">2</span>)</span><br></pre></td></tr></table></figure>\n<p>执行结果为：</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"number\">3</span></span><br></pre></td></tr></table></figure>\n<p>那 lambda 函数究竟是什么呢？lambda 函数是<strong>匿名</strong>函数，即无需定义函数名，在一行中定义函数</p>\n<ul>\n<li>\n<p>lambda 表达式</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">lambda</span> arg1, arg2, ...: expression</span><br></pre></td></tr></table></figure>\n<p>我们按照正常的函数定义来看这个表达式，函数可以有 0 个或多个参数，因此 <code>arg</code>  是可选项。函数语句即为 <code>expression</code> ， <code>expression</code>  的执行结果即为返回值， <code>expression</code>  定义为 <code>None</code>  即代表没有返回值</p>\n</li>\n</ul>\n</li>\n<li>\n<p>lambda 函数用法</p>\n<ul>\n<li>\n<p>赋值语句，定义函数</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">func = <span class=\"keyword\">lambda</span> x,y: x*y</span><br><span class=\"line\">func(<span class=\"number\">2</span>,<span class=\"number\">2</span>)</span><br><span class=\"line\"><span class=\"comment\"># output</span></span><br><span class=\"line\"><span class=\"number\">4</span></span><br></pre></td></tr></table></figure>\n</li>\n<li>\n<p>函数覆盖，替换已有函数</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">time.clock = <span class=\"keyword\">lambda</span>:<span class=\"string\">&#x27;again&#x27;</span></span><br><span class=\"line\">time.clock()</span><br><span class=\"line\"><span class=\"comment\"># output</span></span><br><span class=\"line\"><span class=\"string\">&#x27;again&#x27;</span></span><br></pre></td></tr></table></figure>\n</li>\n<li>\n<p>作为其他函数的参数</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># sorted </span></span><br><span class=\"line\"><span class=\"comment\"># 常用的字典按value排序</span></span><br><span class=\"line\">_<span class=\"built_in\">dict</span> = &#123;<span class=\"string\">&#x27;a&#x27;</span>:<span class=\"number\">3</span>, <span class=\"string\">&#x27;b&#x27;</span>:<span class=\"number\">1</span>, <span class=\"string\">&#x27;c&#x27;</span>:<span class=\"number\">2</span>&#125;</span><br><span class=\"line\"><span class=\"built_in\">sorted</span>(_<span class=\"built_in\">dict</span>.items(), key = <span class=\"keyword\">lambda</span> item: item[<span class=\"number\">1</span>])</span><br><span class=\"line\"><span class=\"comment\"># output</span></span><br><span class=\"line\">[(<span class=\"string\">&#x27;b&#x27;</span>, <span class=\"number\">1</span>), (<span class=\"string\">&#x27;c&#x27;</span>, <span class=\"number\">2</span>), (<span class=\"string\">&#x27;a&#x27;</span>, <span class=\"number\">3</span>)]</span><br><span class=\"line\"></span><br><span class=\"line\">_lst = [<span class=\"number\">1</span>,<span class=\"number\">2</span>,<span class=\"number\">3</span>]</span><br><span class=\"line\"><span class=\"comment\"># filter 过滤特定条件的元素</span></span><br><span class=\"line\"><span class=\"built_in\">list</span>(<span class=\"built_in\">filter</span>(<span class=\"keyword\">lambda</span> x: x &lt;= <span class=\"number\">2</span>, _lst))</span><br><span class=\"line\"><span class=\"comment\"># output</span></span><br><span class=\"line\">[<span class=\"number\">1</span>, <span class=\"number\">2</span>]</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># map 针对列表中每一个元素的操作</span></span><br><span class=\"line\"><span class=\"built_in\">list</span>(<span class=\"built_in\">map</span>(<span class=\"keyword\">lambda</span> x:x**<span class=\"number\">2</span>, _lst))</span><br><span class=\"line\"><span class=\"comment\"># output</span></span><br><span class=\"line\">[<span class=\"number\">1</span>, <span class=\"number\">4</span>, <span class=\"number\">9</span>]</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># reduce 列表中相邻元素的两两结合条件</span></span><br><span class=\"line\"><span class=\"keyword\">from</span> functools <span class=\"keyword\">import</span> reduce</span><br><span class=\"line\">reduce(<span class=\"keyword\">lambda</span> x, y: x+y, _lst)</span><br><span class=\"line\"><span class=\"comment\"># output</span></span><br><span class=\"line\"><span class=\"number\">6</span></span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n</li>\n</ul>\n",
            "tags": [
                "python"
            ]
        }
    ]
}