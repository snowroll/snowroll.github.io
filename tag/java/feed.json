{
    "version": "https://jsonfeed.org/version/1",
    "title": "SnowRoll Blog • All posts by \"java\" tag",
    "description": "分享经验，记录生活",
    "home_page_url": "https://snowroll.github.io",
    "items": [
        {
            "id": "https://snowroll.github.io/springboot-skill/",
            "url": "https://snowroll.github.io/springboot-skill/",
            "title": "springboot 零敲碎打",
            "date_published": "2020-11-26T06:46:08.000Z",
            "content_html": "<h3 id=\"内容摘要\"><a class=\"markdownIt-Anchor\" href=\"#内容摘要\">#</a> 内容摘要</h3>\n<ul>\n<li>常用的开发结构</li>\n<li>星星点点的小技巧</li>\n</ul>\n<a id=\"more\"></a>\n<h3 id=\"1-常用开发结构\"><a class=\"markdownIt-Anchor\" href=\"#1-常用开发结构\">#</a> 1. 常用开发结构</h3>\n<p>最简单的 Springboot 集成 Spring Data JPA 教程： <span class=\"exturl\" data-url=\"aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2h1YW5vbmd5aW5nMTIzL2FydGljbGUvZGV0YWlscy8xMDQyNzkyMzE=\">https://blog.csdn.net/huanongying123/article/details/104279231</span></p>\n<ul>\n<li>\n<p>新建 springboot 项目，命名为 demo，springboot 版本为 2.2.9.RELEASE</p>\n<figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;parent&gt;</span><br><span class=\"line\">    &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;</span><br><span class=\"line\">    &lt;artifactId&gt;spring-boot-starter-parent&lt;/artifactId&gt;</span><br><span class=\"line\">    &lt;version&gt;2.2.9.RELEASE&lt;/version&gt;</span><br><span class=\"line\">    &lt;relativePath/&gt; &lt;!-- lookup parent from repository --&gt;</span><br><span class=\"line\">&lt;/parent&gt;</span><br></pre></td></tr></table></figure>\n</li>\n<li>\n<p>在 pom 文件中，导入依赖的 jar 包</p>\n<figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;dependencies&gt;</span><br><span class=\"line\">  \t&lt;dependency&gt;</span><br><span class=\"line\">        &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;</span><br><span class=\"line\">        &lt;artifactId&gt;spring-boot-starter-data-jpa&lt;/artifactId&gt;</span><br><span class=\"line\">  \t&lt;/dependency&gt;</span><br><span class=\"line\">    &lt;dependency&gt;</span><br><span class=\"line\">        &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;</span><br><span class=\"line\">        &lt;artifactId&gt;spring-boot-starter-web&lt;/artifactId&gt;</span><br><span class=\"line\">    &lt;/dependency&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">    &lt;dependency&gt;</span><br><span class=\"line\">        &lt;groupId&gt;mysql&lt;/groupId&gt;</span><br><span class=\"line\">        &lt;artifactId&gt;mysql-connector-java&lt;/artifactId&gt;</span><br><span class=\"line\">        &lt;scope&gt;runtime&lt;/scope&gt;</span><br><span class=\"line\">    &lt;/dependency&gt;</span><br><span class=\"line\">    &lt;dependency&gt;</span><br><span class=\"line\">        &lt;groupId&gt;org.projectlombok&lt;/groupId&gt;</span><br><span class=\"line\">        &lt;artifactId&gt;lombok&lt;/artifactId&gt;</span><br><span class=\"line\">        &lt;optional&gt;true&lt;/optional&gt;</span><br><span class=\"line\">    &lt;/dependency&gt;</span><br><span class=\"line\">    &lt;dependency&gt;</span><br><span class=\"line\">        &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;</span><br><span class=\"line\">        &lt;artifactId&gt;spring-boot-starter-test&lt;/artifactId&gt;</span><br><span class=\"line\">        &lt;scope&gt;test&lt;/scope&gt;</span><br><span class=\"line\">    &lt;/dependency&gt;</span><br><span class=\"line\">&lt;/dependencies&gt;</span><br></pre></td></tr></table></figure>\n</li>\n<li>\n<p>在 <code>resources</code>  目录下新建一个配置文件 <code>application.yml</code> ，也可以直接在原有的配置文件 <code>application.properties</code>  中添加相关配置</p>\n<figure class=\"highlight yml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">server:</span></span><br><span class=\"line\">  <span class=\"attr\">port:</span> <span class=\"number\">8080</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"attr\">spring:</span></span><br><span class=\"line\">  <span class=\"attr\">datasource:</span></span><br><span class=\"line\">    <span class=\"attr\">url:</span> <span class=\"string\">jdbc:mysql://localhost:3306/test</span></span><br><span class=\"line\">    <span class=\"attr\">username:</span> <span class=\"string\">root</span>  <span class=\"comment\"># 替换为你本地mysql的用户名和密码</span></span><br><span class=\"line\">    <span class=\"attr\">password:</span> <span class=\"string\">root</span></span><br><span class=\"line\">    <span class=\"attr\">driver-class-name:</span> <span class=\"string\">com.mysql.cj.jdbc.Driver</span></span><br><span class=\"line\">  <span class=\"attr\">jpa:</span></span><br><span class=\"line\">    <span class=\"attr\">show-sql:</span> <span class=\"literal\">true</span>  <span class=\"comment\"># 执行数据库操作时，在控制台打印sql语句</span></span><br><span class=\"line\">    <span class=\"attr\">database-platform:</span> <span class=\"string\">org.hibernate.dialect.MySQL5InnoDBDialect</span>  <span class=\"comment\"># 数据库方言配置</span></span><br><span class=\"line\">    <span class=\"attr\">hibernate:</span></span><br><span class=\"line\">      <span class=\"attr\">ddl-auto:</span> <span class=\"string\">update</span>  <span class=\"comment\"># 第一次加载自动建立表，服务重启会进行表的更新</span></span><br></pre></td></tr></table></figure>\n<p>设置服务器端口号为 8080，这样我们可以通过 http://127.0.0.1:8080 访问我们的程序</p>\n<p>设置数据库 mysql，这里我们需要在本地的 mysql 中创建一个 test 数据库，命令行中操作如下</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[root@host]<span class=\"comment\"># mysql -u root -p   </span></span><br><span class=\"line\">Enter password:******  <span class=\"comment\"># 登录后进入终端</span></span><br><span class=\"line\"></span><br><span class=\"line\">mysql&gt; create DATABASE <span class=\"built_in\">test</span>;</span><br></pre></td></tr></table></figure>\n<p>设置 jpa 相关参数，jpa 全称 Java Persistence API，定义了一系列标准，让实体类和数据库中的表建立一个对应关系，使我们在 java 中操作实体类就能达到操作数据库中表的效果。 jpa 介绍博客 <span class=\"exturl\" data-url=\"aHR0cHM6Ly96aHVhbmxhbi56aGlodS5jb20vcC8xMTAwMjQxNDY=\">https://zhuanlan.zhihu.com/p/110024146</span></p>\n</li>\n<li>\n<p>代码分层</p>\n<p>spring boot 框架一般分为 dao、model、controller、service 四层。具体代码结构如下图所示：</p>\n<p><img data-src=\"/images/java/code-struct.png\" alt=\"image-20201126201354029\"></p>\n<p>图中我将 controller 用 rest 代替，仅是个人习惯</p>\n<ul>\n<li>\n<p><strong>dao 层</strong></p>\n<p>负责访问数据库，无需写复杂的 sql 语言，可以根据命名规则定义相应的查询方法。示例如下：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> com.example.demo.dao;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> com.example.demo.model.TestBean;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.data.jpa.repository.JpaRepository;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.util.Optional;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">interface</span> <span class=\"title\">TestDao</span> <span class=\"keyword\">extends</span> <span class=\"title\">JpaRepository</span>&lt;<span class=\"title\">TestBean</span>, <span class=\"title\">String</span>&gt; </span>&#123;</span><br><span class=\"line\">    <span class=\"function\">Optional&lt;TestBean&gt; <span class=\"title\">findById</span><span class=\"params\">(String id)</span></span>;  </span><br><span class=\"line\">    <span class=\"function\">TestBean <span class=\"title\">findByName</span><span class=\"params\">(String Name)</span></span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>TestDao 继承了 <code>JpaRepository</code> ， <code>JpaRepository</code>  可以查找所有实体，执行缓存和数据库同步。 <code>JpaRepository</code>  接口有 2 个泛型参数，第一个为实际存储的类型，第二个参数为主键。</p>\n<p>上例中存储的类型为 <code>TestBean</code> ，而 <code>TestBean</code>  的主键类型为 String。</p>\n<p>根据命名规则我们定义了 <code>findById</code>  方法来查询指定 id 的 <code>TestBean</code> 。</p>\n<p><code>Optional</code>  用来处理可能出现的空指针问题，具体用法见 https://www.jianshu.com/p/c1480145a961</p>\n</li>\n<li>\n<p><strong>model 层</strong></p>\n<p>也称 Entity（实体）层或 pojo（plain old java object）层，一般数据库中一张表对应一个实体类，类属性同表字段一一对应。简单示例如下</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> com.example.demo.model;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> lombok.Data;</span><br><span class=\"line\"><span class=\"keyword\">import</span> javax.persistence.*;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">@Data</span></span><br><span class=\"line\"><span class=\"meta\">@Entity</span></span><br><span class=\"line\"><span class=\"meta\">@Table(name = &quot;test_table&quot;)</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">TestBean</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"meta\">@Id</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> String id;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> String name;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<p><code>@Data</code>  可以提高代码的简介度，省去了代码中大量的 get ()、set ()、toString () 等方法。介绍： <span class=\"exturl\" data-url=\"aHR0cHM6Ly93d3cuamlhbnNodS5jb20vcC9jMWVlN2U0MjQ3YmY=\">https://www.jianshu.com/p/c1ee7e4247bf</span></p>\n<p><code>@Entity</code>  声明该类为实体类</p>\n<p><code>@Id</code>  标注用于声明一个实体类的属性映射为数据库的主键列</p>\n<p><code>@Id</code>  详解 <span class=\"exturl\" data-url=\"aHR0cHM6Ly94aWFveGlhbWkuZ2l0Ym9vay5pby9zcHJpbmctYm9vdC9ndWFuLXhpLXhpbmctc2h1LWp1LWt1L3NwcmluZy1kYXRhLWpwYS9pZC1oZS1nZW5lcmF0ZWR2YWx1ZS14aWFuZy1qaWU=\">https://xiaoxiami.gitbook.io/spring-boot/guan-xi-xing-shu-ju-ku/spring-data-jpa/id-he-generatedvalue-xiang-jie</span></p>\n<p><code>@Table</code>  将实体类与数据表  <code>test_table</code>  绑定，第一次操作实体类会生成相应的数据表</p>\n</li>\n<li>\n<p><strong>rest 层</strong></p>\n<p>负责前后端交互，接收前端 GET/POST 请求，调用 service 层中的处理函数，接收 service 层的返回数据，并将其返回给前端。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> com.example.demo.rest;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> com.example.demo.model.TestBean;</span><br><span class=\"line\"><span class=\"keyword\">import</span> com.example.demo.service.TestServiceImp;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.beans.factory.annotation.Autowired;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.web.bind.annotation.*;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">@RestController</span></span><br><span class=\"line\"><span class=\"meta\">@RequestMapping(&quot;demo&quot;)</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">TestService</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"meta\">@Autowired</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> TestServiceImp testServiceImp;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@PostMapping(&quot;/add&quot;)</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> String <span class=\"title\">add</span><span class=\"params\">(<span class=\"meta\">@RequestBody</span> TestBean testBean)</span></span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> testServiceImp.add(testBean);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>声明了一个接口 “demo/add”，实现了添加 testBean 的功能。成功返回 “success”，失败返回 “fail”。可以通过访问 http://127.0.0.1:8080/demo/add 来调用这个接口</p>\n<p><code>@RequestBody</code>  会自动将 post 中的数据包装为 <code>TestBean</code>  形式</p>\n</li>\n<li>\n<p>service 层</p>\n<p>业务逻辑层，调用 dao 层接口，完成基本功能设计</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> com.example.demo.service;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> com.example.demo.dao.TestDao;</span><br><span class=\"line\"><span class=\"keyword\">import</span> com.example.demo.model.TestBean;</span><br><span class=\"line\"><span class=\"keyword\">import</span> lombok.extern.slf4j.Slf4j;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.beans.factory.annotation.Autowired;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.stereotype.Service;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">@Service</span></span><br><span class=\"line\"><span class=\"meta\">@Slf4j</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">TestServiceImp</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"meta\">@Autowired</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> TestDao testDao;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> String <span class=\"title\">add</span><span class=\"params\">(TestBean testBean)</span></span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">            testDao.save(testBean);</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"string\">&quot;success&quot;</span>;</span><br><span class=\"line\">        &#125; <span class=\"keyword\">catch</span> (Exception e) &#123;</span><br><span class=\"line\">            log.error(<span class=\"string\">&quot;add testBean error!&quot;</span>, e);</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"string\">&quot;fail&quot;</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>使用 <code>TestDao</code>  操作实体类 <code>TestBean</code> ，进行保存。</p>\n</li>\n</ul>\n</li>\n<li>\n<p>程序使用效果</p>\n<p>运行程序，使用 <code>postman</code>  进行测试，结果如下：</p>\n<p><img data-src=\"/images/java/postman.png\" alt=\"image-20201126203059798\"></p>\n<p>打开 <code>DataGrip</code>  查看数据库中的表，结果如下图：</p>\n<p><img data-src=\"/images/java/database.png\" alt=\"image-20201126203405965\"></p>\n<p>至此，一个极简 springboot 项目就完成了<sup> o</sup>。</p>\n</li>\n</ul>\n<h3 id=\"2-星星点点的小技巧\"><a class=\"markdownIt-Anchor\" href=\"#2-星星点点的小技巧\">#</a> 2. 星星点点的小技巧</h3>\n<ul>\n<li>\n<p>List 和 String 互相转换</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// List =&gt; String</span></span><br><span class=\"line\">List&lt;Integer&gt; intList = Arrays.asList(<span class=\"number\">1</span>,<span class=\"number\">2</span>,<span class=\"number\">3</span>);</span><br><span class=\"line\">System.out.println(intList.toString());</span><br></pre></td></tr></table></figure>\n<p>结果：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>]</span><br></pre></td></tr></table></figure>\n<p>使用 List.toString () 功能即可得到 List 的 String 表示</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//String =&gt; List</span></span><br><span class=\"line\">String listStr = <span class=\"string\">&quot;[1,2,3]&quot;</span></span><br><span class=\"line\">ObjectMapper mapper = <span class=\"keyword\">new</span> ObjectMapper();</span><br><span class=\"line\">List&lt;Integer&gt; resList = Arrays.asList(mapper.readValue(listStr, Integer[].class));</span><br></pre></td></tr></table></figure>\n</li>\n<li>\n<p>restful 接口简单获取 POST/GET 请求参数</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 假设post 请求  &#123;&quot;id&quot;: &quot;0&quot;&#125;</span></span><br><span class=\"line\"><span class=\"meta\">@PostMapping(value=&quot;/test&quot;)</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">get</span><span class=\"params\">(<span class=\"meta\">@RequestParam</span> String id)</span></span>&#123;</span><br><span class=\"line\">\t\tSystem.out.println(id);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>使用 <code>@RequestParam</code>  注解，当没有指定 value 时，将会接受与变量名相同的请求参数</p>\n<p>接收参数的方式： <span class=\"exturl\" data-url=\"aHR0cHM6Ly9qdWVqaW4uY24vcG9zdC82ODQ0OTAzODY2NDIxNDc3Mzg0\">https://juejin.cn/post/6844903866421477384</span></p>\n</li>\n<li>\n<p>java1.8 Stream 机制</p>\n<p>可以用简单的语句完成一系列操作</p>\n<p>参考博客：  <span class=\"exturl\" data-url=\"aHR0cHM6Ly9jb2xvYnUuY29tLzIwMTYvMDMvMDIvSmF2YS1TdHJlYW0v\">https://colobu.com/2016/03/02/Java-Stream/</span></p>\n<p>使用 Stream 进行数组过滤：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">List&lt;Integer&gt; l = Arrays.asList(<span class=\"number\">1</span>,<span class=\"number\">2</span>,<span class=\"number\">3</span>,<span class=\"number\">4</span>,<span class=\"number\">5</span>,<span class=\"number\">6</span>,<span class=\"number\">7</span>,<span class=\"number\">8</span>,<span class=\"number\">9</span>,<span class=\"number\">10</span>);</span><br><span class=\"line\">List&lt;Integer&gt; t = l.stream()  <span class=\"comment\">// 生成一个stream对象</span></span><br><span class=\"line\">  \t.filter( i -&gt; i % <span class=\"number\">2</span> == <span class=\"number\">0</span>)  <span class=\"comment\">// 返回满足断言(predicate)的数据。</span></span><br><span class=\"line\">  \t.collect(Collectors.toList());</span><br><span class=\"line\">System.out.println(t); <span class=\"comment\">//[2, 4, 6, 8]</span></span><br></pre></td></tr></table></figure>\n</li>\n<li>\n<p>依赖全部爆红的解决</p>\n<p>博客： <span class=\"exturl\" data-url=\"aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3UwMTQ2NzI0NjYvYXJ0aWNsZS9kZXRhaWxzLzgwMjExMzQw\">https://blog.csdn.net/u014672466/article/details/80211340</span></p>\n<p>把依赖全部注释，Maven 刷新一下，解开注释，再重新刷新一遍，解决。</p>\n</li>\n</ul>\n<center><b>寻李白</b></center><center>——痛饮狂歌空度日 飞扬跋扈为谁雄</center>\n<center>余光中\n<center>那一双傲慢的靴子至今还落在</center><center>高力士羞愤的手里，人却不见了</center><center>把满地的难民和伤兵</center><center>把胡马和羌笛交践的节奏</center><center>留给杜二去细细的苦吟</center><center>自从那年贺知章眼花了</center><center>认你做谪仙，便更加佯狂</center><center>用一只中了魔咒的小酒壶</center><center>把自己藏起来，连太太也寻不到你</center><center>怨长安城小而壶中天长</center><center>在所有的诗里你都预言</center><center>会突然水遁，或许就在明天</center><center>只扁舟破浪，乱发当风</center><center>——而今，果然你失了踪</center><br>\n<center></center><center>树敌如林，世人皆欲杀</center><center>肝硬化怎杀得死你</center><center>酒入豪肠，七分酿成了月光</center><center>余下的三分啸成剑气</center><center>绣口一吐，就半个盛唐</center><center>从开元到天宝，从洛阳到咸阳</center><center>冠盖满途车骑的嚣闹</center><center>不及千年后你的一首</center><center>水晶绝句轻叩我额头</center><center>当地一弹挑起的回音</center><br>\n<center></center><center>一贬世上已经够落魄</center><center>再放夜郎毋乃太难堪</center><center>至今成谜是你的籍贯</center><center>陇西或山东，青莲乡或碎叶城</center><center>不如归去归哪个故乡</center><center>凡你醉处，你说过，皆非他乡</center><center>失踪，是天才唯一的下场</center><center>身后事，究竟你遁向何处</center><center>猿啼不住，杜二也苦劝你不住</center><center>一回头囚窗下竟已白头</center><center>七仙、五友，都救不了你了</center><center>匡山给雾锁了，无路可入</center><center>仍炉火未纯青，就半粒丹砂</center><center>怎追蹑葛洪袖里的流霞</center><br>\n<center></center><center>樽中月影，或许那才是你故乡</center><center>常得你一生痴痴地仰望</center><center>而无论出门向东哭，向西哭</center><center>长安却早已陷落</center><center>这二十四万里的归程</center><center>也不必惊动大鹏了，也无须招鹤</center><center>只消把酒杯向半空一扔</center><center>便旋成一只霍霍的飞碟</center><center>诡绿的闪光愈转愈快</center><center>接你回传说里去</center><br>\n<center>1980.4.27 </center>\n",
            "tags": [
                "java"
            ]
        }
    ]
}