{
    "version": "https://jsonfeed.org/version/1",
    "title": "SnowRoll Blog • All posts by \"gitlab\" tag",
    "description": "分享经验，记录生活",
    "home_page_url": "https://snowroll.github.io",
    "items": [
        {
            "id": "https://snowroll.github.io/gitlab/",
            "url": "https://snowroll.github.io/gitlab/",
            "title": "gitlab服务器搭建",
            "date_published": "2022-07-26T09:27:08.000Z",
            "content_html": "<h1 id=\"环境配置\"><a class=\"markdownIt-Anchor\" href=\"#环境配置\">#</a> 环境配置</h1>\n<p>两台 linux 服务器（Ubuntu 系统），一台搭建 Gitlab 服务端，另一台配置 Gitlab runner</p>\n<h1 id=\"gitlab下载安装\"><a class=\"markdownIt-Anchor\" href=\"#gitlab下载安装\">#</a> Gitlab 下载安装</h1>\n<p>采用 Docker 的形式进行安装，官方文档 <span class=\"exturl\" data-url=\"aHR0cHM6Ly9kb2NzLmdpdGxhYi5jb20vZWUvaW5zdGFsbC9kb2NrZXIuaHRtbA==\">https://docs.gitlab.com/ee/install/docker.html</span></p>\n<h2 id=\"ubuntu安装docker\"><a class=\"markdownIt-Anchor\" href=\"#ubuntu安装docker\">#</a> Ubuntu 安装 Docker</h2>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">curl -fsSL https://get.docker.com | bash -s docker --mirror Aliyun</span><br></pre></td></tr></table></figure>\n<h2 id=\"下载配置gitlab镜像\"><a class=\"markdownIt-Anchor\" href=\"#下载配置gitlab镜像\">#</a> 下载配置 Gitlab 镜像</h2>\n<ul>\n<li>\n<p>设置环境变量</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">export GITLAB_HOME=/srv/gitlab</span><br></pre></td></tr></table></figure>\n</li>\n<li>\n<p>下载安装 Docker</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo docker run --detach \\</span><br><span class=\"line\">  --hostname gitlab.example.com \\</span><br><span class=\"line\">  --publish 8443:443 --publish 8080:80 --publish 8022:22 \\</span><br><span class=\"line\">  --name gitlab \\</span><br><span class=\"line\">  --restart always \\</span><br><span class=\"line\">  --volume $GITLAB_HOME/config:/etc/gitlab \\</span><br><span class=\"line\">  --volume $GITLAB_HOME/logs:/var/log/gitlab \\</span><br><span class=\"line\">  --volume $GITLAB_HOME/data:/var/opt/gitlab \\</span><br><span class=\"line\">  --shm-size 256m \\</span><br><span class=\"line\">  gitlab/gitlab-ee:latest</span><br></pre></td></tr></table></figure>\n<ul>\n<li>\n<p><code>hostname</code>  主机名，随便设置</p>\n</li>\n<li>\n<p><code>publish</code>  Docker 和宿主机之间的端口映射， <code>8080:80</code>  表示宿主机的 8080 端口映射到容器的 80 端口，此时访问宿主机的 8080 端口即可访问 nginx 的默认页面</p>\n</li>\n<li>\n<p><code>name</code>  容器名</p>\n</li>\n<li>\n<p><code>restart always</code>  Docker 重启时，容器自动重启</p>\n</li>\n<li>\n<p><code>shm-size</code>  共享内存大小</p>\n</li>\n</ul>\n<blockquote>\n<p>扩展： Nginx 是什么？ 参考文章 <span class=\"exturl\" data-url=\"aHR0cHM6Ly96aHVhbmxhbi56aGlodS5jb20vcC8zNDk0MzMzMg==\">https://zhuanlan.zhihu.com/p/34943332</span></p>\n<p>Nginx 是一个轻量级的反向代理服务器。</p>\n<p><code>用户</code>  =&gt; vpn (正向代理) =&gt;  <code>服务器</code>        <code>服务器</code>  =&gt; nginx (反向代理) =&gt;  <code>用户</code></p>\n<p>启动 Nginx 服务后，就相当于在 80 端口启动了 Socket 服务进行监听，如下图所示</p>\n<img data-src=\"/gitlab/nginx.jpg\" class=\"\">\n</blockquote>\n</li>\n</ul>\n<h2 id=\"修改镜像gitlab的配置\"><a class=\"markdownIt-Anchor\" href=\"#修改镜像gitlab的配置\">#</a> 修改镜像 <code>gitlab</code>  的配置</h2>\n<ul>\n<li>\n<p>进入容器</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">docker exec -it gitlab /bin/bash</span><br></pre></td></tr></table></figure>\n</li>\n<li>\n<p>修改配置文件</p>\n<p><strong>配置文件</strong>  <code>/etc/gitlab/gitlab.rb</code>   和  <code>/var/opt/gitlab/gitlab-rails/etc/gitlab.yml</code></p>\n<p>其中 <code>gitlab.yml</code>  由 <code>gitlab-ctl</code>  管理，通过编辑 <code>/etc/gitlab/gitlab.rb</code> ，然后运行 <code>gitlab-ctl reconfigure</code>  会自动更新 <code>gitlab.yml</code> 。因此，一般不修改 <code>gitlab.yml</code>  文件</p>\n<ul>\n<li>\n<p>修改配置</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">vi /etc/gitlab/gitlab.rb</span><br></pre></td></tr></table></figure>\n</li>\n<li>\n<p>在公网 IP 访问 GitLab</p>\n<p><em>tips:</em> 在 <code>vi</code>  下通过  <code>/external_url</code>  快速查找</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">external_url &quot;http://your_ip_or_domain:8080&quot;</span><br></pre></td></tr></table></figure>\n<p>如果 <code>nginx['listen_port']</code>  没有特殊指定，其会从 <code>external_url</code>  拉取</p>\n</li>\n<li>\n<p>设置 shell 端口</p>\n<figure class=\"highlight yml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"string\">gitlab_rails[&#x27;gitlab_shell_ssh_port&#x27;]</span> <span class=\"string\">=</span> <span class=\"number\">8022</span></span><br></pre></td></tr></table></figure>\n</li>\n<li>\n<p>重新配置 GitLab</p>\n<figure class=\"highlight yml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"string\">gitlab-ctl</span> <span class=\"string\">reconfigure</span></span><br></pre></td></tr></table></figure>\n<p>实测结果</p>\n<center><img data-src=\"/gitlab/gitlab.png\" class=\"\">\n<p>这里的密码在  <code>/etc/gitlab/initial_root_password</code>  中，这个文件初次配置后 24h 会自动删除。</p>\n</li>\n<li>\n<p>修改密码 （忘记密码的情况下）</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> 进入gitlab 容器</span></span><br><span class=\"line\">docker exec -it gitlab /bin/bash</span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> 修改密码，这里可能会等很久，耐心一点</span></span><br><span class=\"line\">gitlab-rake &quot;gitlab:password:reset[root]”</span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n</li>\n</ul>\n<h1 id=\"配置优化\"><a class=\"markdownIt-Anchor\" href=\"#配置优化\">#</a> 配置优化</h1>\n<p>GitLab 非常吃内存，我刚开始搭建，服务器疯狂卡死，网页 502。建议配置的服务器内存在 4G 以上</p>\n<h2 id=\"修改gitlabrb中的配置\"><a class=\"markdownIt-Anchor\" href=\"#修改gitlabrb中的配置\">#</a> 修改 <code>gitlab.rb</code>  中的配置</h2>\n<p>参考 https://www.dongchuanmin.com/operate/3240.html</p>\n<figure class=\"highlight yml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"string\">puma[&#x27;worker_timeout&#x27;]</span> <span class=\"string\">=</span> <span class=\"number\">30</span></span><br><span class=\"line\"><span class=\"string\">gitlab_rails[&#x27;time_zone&#x27;]</span> <span class=\"string\">=</span> <span class=\"string\">&#x27;Asia/Shanghai&#x27;</span></span><br><span class=\"line\"><span class=\"string\">puma[&#x27;worker_processes&#x27;]</span> <span class=\"string\">=</span> <span class=\"number\">2</span></span><br><span class=\"line\"><span class=\"string\">postgresql[&#x27;shared_buffers&#x27;]</span> <span class=\"string\">=</span> <span class=\"string\">&quot;256MB&quot;</span></span><br><span class=\"line\"><span class=\"string\">sidekiq[&#x27;max_concurrency&#x27;]</span> <span class=\"string\">=</span> <span class=\"number\">8</span></span><br><span class=\"line\"><span class=\"string\">postgresql[&#x27;max_worker_processes&#x27;]</span> <span class=\"string\">=</span> <span class=\"number\">4</span></span><br><span class=\"line\"><span class=\"string\">puma[&#x27;per_worker_max_memory_mb&#x27;]</span> <span class=\"string\">=</span> <span class=\"number\">600</span></span><br><span class=\"line\"><span class=\"string\">prometheus_monitoring[&#x27;enable&#x27;]</span> <span class=\"string\">=</span> <span class=\"literal\">false</span></span><br><span class=\"line\"><span class=\"string\">sidekiq[&#x27;min_concurrency&#x27;]</span> <span class=\"string\">=</span> <span class=\"number\">8</span></span><br></pre></td></tr></table></figure>\n<p>官方推荐的优化配置 <span class=\"exturl\" data-url=\"aHR0cHM6Ly9kb2NzLmdpdGxhYi5jbi9vbW5pYnVzL3NldHRpbmdzL21lbW9yeV9jb25zdHJhaW5lZF9lbnZzLmh0bWw=\">https://docs.gitlab.cn/omnibus/settings/memory_constrained_envs.html</span></p>\n<p>修改完成之后，重启配置</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">gitlab-ctl reconfigure</span><br></pre></td></tr></table></figure>\n<ul>\n<li>\n<p>启动 swap 分区</p>\n<p>物理内存 + swap（交换空间） = 虚拟内存</p>\n<p>swap 分区，即交换空间，可以是磁盘的一个分区，也可以是一个文件。作用就是将一部分内存空间复制到硬盘空间中，释放这部分内存。某种程度而言，扩大了可用的内存空间，但与硬盘的交换必然带来性能的下降。</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> 查看swap分区是否启动</span></span><br><span class=\"line\">cat /proc/swaps</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> 创建swap，dd device driver，用于读取文件中内容，并复制到指定位置</span></span><br><span class=\"line\">dd if=/dev/zero of=/data/swap bs=512 count=8388616</span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> <span class=\"keyword\">if</span> 输入文件 of 输出文件 /dev/zero 输出恒为0的设备文件 bs bytes count 块数</span></span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> swap文件大小为 bs * counnt = 4294971392(4G)；</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> 通过mkswap命令将上面新建出的文件做成swap分区</span></span><br><span class=\"line\">mkswap /data/swap</span><br><span class=\"line\"></span><br><span class=\"line\">4.查看内核参数vm.swappiness中的数值是否为0，如果为0则根据实际需要调整成60。这个参数为换出运行时内存的相对权重，内存超过 40% 开始使用swap</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> 查看内核参数vm.swappiness 数值，代表换出运行时内存的相对权重</span></span><br><span class=\"line\">cat /proc/sys/vm/swappiness</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> 设置为60，即当内存超过 100-60 = 40%，开始使用swap</span></span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> 永久修改需编辑/etc/sysctl.conf文件</span></span><br><span class=\"line\">sysctl -w vm.swappiness=60</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> 启用分区</span></span><br><span class=\"line\">swapon /data/swap</span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> 在/etc/fstab文件中记录文件的名字，使系统重启后，swap依然有效</span></span><br><span class=\"line\">echo “/data/swap swap swap defaults 0 0” &gt;&gt; /etc/fstab</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> 查看确认</span></span><br><span class=\"line\">cat /proc/swaps</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> 重启gitlab</span></span><br></pre></td></tr></table></figure>\n</li>\n<li>\n<p>释放 buffer/cache</p>\n<p>参考文章 <span class=\"exturl\" data-url=\"aHR0cHM6Ly96aHVhbmxhbi56aGlodS5jb20vcC81Mzk1NTMyMTc=\">https://zhuanlan.zhihu.com/p/539553217</span></p>\n<p>程序运行一段时间后，linux 会将暂时不用的内存转换为 buffer/cache，通过 <code>free</code>  命令可以查看系统内存使用情况</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">free -m -h</span><br></pre></td></tr></table></figure>\n<p>输出结果</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">              total        used        free      shared  buff/cache   available</span><br><span class=\"line\"></span><br><span class=\"line\">Mem:          7.8Gi       3.2Gi       3.5Gi        50Mi       1.1Gi       4.3Gi</span><br><span class=\"line\">Swap:            0B          0B          0B</span><br></pre></td></tr></table></figure>\n<p>我们可以手动释放 buff/cache</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> 将在内存中的数据写入磁盘，防止丢失</span></span><br><span class=\"line\">sync</span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> 释放内存</span></span><br><span class=\"line\">echo 3 &gt; /proc/sys/vm/drop_caches</span><br></pre></td></tr></table></figure>\n<p>内存的管理方式在 <code>/proc/sys/vm/ drop_chches</code>  文件中，其只包含一个数字，不同代号的含义如下所示</p>\n<figure class=\"highlight txt\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">0：0 是系统默认值，默认情况下表示不释放内存，由操作系统自动管理</span><br><span class=\"line\">1：释放页缓存</span><br><span class=\"line\">2：释放dentries和inodes</span><br><span class=\"line\">3：释放所有缓存</span><br></pre></td></tr></table></figure>\n<p>Page Cache 的解释 <span class=\"exturl\" data-url=\"aHR0cHM6Ly9ibG9nLjUxY3RvLmNvbS91XzExMzg5NDMwLzI1MzUwOTg=\">https://blog.51cto.com/u_11389430/2535098</span></p>\n</li>\n</ul>\n<h1 id=\"gitlab-runner配置\"><a class=\"markdownIt-Anchor\" href=\"#gitlab-runner配置\">#</a> GitLab runner 配置</h1>\n<ul>\n<li>\n<p>官方文档： <span class=\"exturl\" data-url=\"aHR0cHM6Ly9kb2NzLmdpdGxhYi5jb20vcnVubmVyL2luc3RhbGwv\">https://docs.gitlab.com/runner/install/</span></p>\n<p>建议使用 <code>deb</code>  或 <code>rpm</code>  文件安装，简单快速</p>\n</li>\n<li>\n<p>另一处详细教学位置 GitLab 中打开一个项目</p>\n<p>Settings =&gt; CI/CD =&gt; Runners =&gt; Expand =&gt; Specific runners =&gt; Show runner installation instructions</p>\n</li>\n<li>\n<p>安装完成后，点击编辑小图标，✅ <code>Run untagged jobs</code>  以运行没有设置 tag 的任务</p>\n</li>\n</ul>\n<h1 id=\"qa\"><a class=\"markdownIt-Anchor\" href=\"#qa\">#</a> Q&amp;A</h1>\n<ul>\n<li>启动之后 502\n<ul>\n<li>原因一： GitLab 反应慢，等待几分钟</li>\n<li>原因二： 服务器端口占用，例如 80 端口，用  <code>lsof -i tcp:80</code>  查看是否有其他服务。杀掉对应进程，或在 <code>gitlab.rb</code>  中修改端口号</li>\n<li>原因三： 内存不足，优化配置或换用配置更高的服务器</li>\n</ul>\n</li>\n</ul>\n<blockquote>\n<p>你将看到大悲苦，并将在悲苦中领悟幸福。这就是我给你的赠言：到悲苦中去寻找幸福。努力干，不断地努力！</p>\n<p>——《卡拉马佐夫兄弟》</p>\n</blockquote>\n",
            "tags": [
                "gitlab"
            ]
        }
    ]
}